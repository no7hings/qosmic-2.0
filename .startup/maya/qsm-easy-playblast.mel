scriptToShelf "Easy Playblast" "# coding:utf-8\nimport sys\n\nimport copy\n\nimport glob\n\nimport os\n\nimport time\n\nimport re\n\n\nclass Main(object):\n    TIME_FORMAT = '%Y-%m-%d %H:%M:%S'\n\n    DEPLOY_ROOT = 'Y:/deploy'\n\n    PROJECT_ROOT = 'Z:/projects'\n\n    CACHE_ROOT = 'Z:/caches'\n\n    LIBRARY_ROOT = 'Z:/libraries'\n\n    ROOT_RELEASE = 'Y:/deploy/rez-packages/internally/release'\n\n    PACKAGE_RELEASE = '{root_release}/{package}/{version}'\n\n    MARK_KEY = 'QSM_MARK'\n\n    DATA = {\n        'qsm_main': {\n            'QSM_MAIN_BASE': '{root}',\n            'PYTHONPATH': ['{root}/script/python'],\n        },\n        'qsm_core': {\n            'QSM_CORE_BASE': '{root}',\n            'QSM_SCHEME': 'default',\n            'PYTHONPATH': ['{root}/script/python'],\n            'PATH': [\n                '{root}/script/bin/windows',\n                '{deploy_root}/.rez/build/windows/2.112.0/Scripts/rez'\n            ],\n            'QSM_EXTEND_CONFIGURES': ['{root}/configures'],\n            'QSM_EXTEND_RESOURCES': ['{deploy_root}/.resources', '{root}/resources'],\n            'QSM_LOG_ROOT': '{deploy_root}/.log',\n            'QSM_TOOLS': ['{deploy_root}/.tools'],\n            #\n            'QSM_DEPLOY_ROOT': DEPLOY_ROOT,\n            'QSM_PROJECT_ROOT': PROJECT_ROOT,\n            'QSM_CACHE_ROOT': CACHE_ROOT,\n            'QSM_LIBRARY_ROOT': LIBRARY_ROOT,\n            #\n            'QSM_UI_LANGUAGE': 'chs',\n            'REZ_CONFIGURE_FILE': '{deploy_root}/.rez/configure/windows/rezconfig.py'\n        },\n        'qsm_gui': {\n            'QSM_GUI_BASE': '{root}',\n            'PYTHONPATH': ['{root}/script/python'],\n        },\n        'qsm_lib': {\n            'QSM_LIB_BASE': '{root}',\n            'QSM_EXTEND_RESOURCES': ['{root}/resources'],\n            'PYTHONPATH': ['{root}/lib/python-2.7/site-packages', '{root}/lib/windows-python-2.7/site-packages']\n        },\n        'qsm_resource': {\n            'QSM_RESOURCE_BASE': '{root}',\n            'QSM_EXTEND_RESOURCES': ['{root}/resources'],\n        },\n        'qsm_extra': {\n            'QSM_EXTRA_BASE': '{root}',\n            'PYTHONPATH': ['{root}/script/python'],\n            'QSM_EXTEND_CONFIGURES': ['{root}/configures'],\n            'QSM_EXTEND_RESOURCES': ['{root}/resources'],\n        },\n        #\n        'qsm_dcc_main': {\n            'QSM_DCC_MAIN_BASE': '{root}',\n            'PYTHONPATH': ['{root}/script/python', '{root}/startup/maya/scripts']\n        },\n        'qsm_dcc_core': {\n            'QSM_DCC_CORE_BASE': '{root}',\n            'PYTHONPATH': ['{root}/script/python']\n        },\n        'qsm_dcc_gui': {\n            'QSM_DCC_GUI_BASE': '{root}',\n            'PYTHONPATH': ['{root}/script/python']\n        },\n        'qsm_dcc_lib': {\n            'QSM_DCC_LIB_BASE': '{root}',\n        },\n        'qsm_dcc_resource': {\n            'QSM_DCC_RESOURCE_BASE': '{root}',\n            'QSM_EXTEND_RESOURCES': ['{root}/resources'],\n        },\n        'qsm_dcc_extra': {\n            'QSM_DCC_EXTRA_BASE': '{root}',\n            'PYTHONPATH': ['{root}/script/python'],\n            'QSM_EXTEND_CONFIGURES': ['{root}/configures'],\n            'QSM_EXTEND_RESOURCES': ['{root}/resources'],\n\n        },\n    }\n\n    @classmethod\n    def log(cls, result):\n        sys.stdout.write(\n            '{}         | {}\\n'.format(time.strftime(\n                cls.TIME_FORMAT, time.localtime(time.time())),\n                result\n            ),\n        )\n\n    @classmethod\n    def to_number_embedded_args(cls, text):\n        pieces = re.compile(r'(\\d+)').split(text)\n        pieces[1::2] = map(int, pieces[1::2])\n        return pieces\n\n    @classmethod\n    def sort_by_number(cls, texts):\n        texts.sort(key=lambda x: cls.to_number_embedded_args(x))\n        return texts\n\n    @classmethod\n    def get_version_latest(cls, options):\n        options_0 = copy.copy(options)\n        options_0['version'] = '*'\n\n        p = cls.PACKAGE_RELEASE.format(**options_0)\n\n        _results = glob.glob(p)\n        if not _results:\n            return None\n\n        _results = cls.sort_by_number(_results)\n\n        result = _results[-1]\n        result = result.replace('\\\\', '/')\n        return result.split('/')[-1]\n\n    @classmethod\n    def add_python(cls, value, variants):\n        if isinstance(value, list) is False:\n            value = [value]\n\n        paths_exists = sys.path\n        for i_value in value:\n            i_value = i_value.format(**variants)\n            if i_value not in paths_exists:\n                sys.path.insert(0, i_value)\n                cls.log(\n                    'add python: {}'.format(i_value)\n                )\n\n    @classmethod\n    def add_other(cls, key, value, variants):\n        if isinstance(value, list):\n            for i_value in value:\n                i_value = i_value.format(**variants)\n                cls.add_environ_fnc(key, i_value)\n        else:\n            value = value.format(**variants)\n            cls.set_environ_fnc(key, value)\n\n    @classmethod\n    def set_environ_fnc(cls, key, value):\n        if value is not None:\n            os.environ[key] = value\n            cls.log(\n                'set environ: {} = {}'.format(key, value)\n            )\n\n    @classmethod\n    def add_environ_fnc(cls, key, value):\n        if value is not None:\n            if key in os.environ:\n                v = os.environ[key]\n                if value not in v:\n                    os.environ[key] += os.pathsep+value\n                    cls.log(\n                        'add environ: {} = {}'.format(key, value)\n                    )\n            else:\n                os.environ[key] = value\n                cls.log(\n                    'set environ: {} = {}'.format(key, value)\n                )\n\n    @classmethod\n    def execute(cls):\n        if cls.MARK_KEY in os.environ:\n            return\n\n        variants = dict(\n            deploy_root=cls.DEPLOY_ROOT,\n            root_release=cls.ROOT_RELEASE\n        )\n        for i_k, i_v in cls.DATA.items():\n            i_variants = copy.copy(variants)\n            i_variants['package'] = i_k\n            i_version_latest = cls.get_version_latest(\n                i_variants\n            )\n            if i_version_latest is None:\n                continue\n\n            i_variants['version'] = i_version_latest\n\n            i_root = cls.PACKAGE_RELEASE.format(**i_variants)\n\n            if os.path.isdir(i_root) is False:\n                raise RuntimeError()\n\n            i_variants['root'] = i_root\n\n            for j_key, j_value in i_v.items():\n                if j_key == 'PYTHONPATH':\n                    cls.add_python(j_value, i_variants)\n                else:\n                    cls.add_other(j_key, j_value, i_variants)\n\n        os.environ[cls.MARK_KEY] = 'TRUE'\n\n\nif __name__ == '__main__':\n    Main.execute()\n\n\n\n\n\n\n\n    import lxsession.commands as ssn_commands; ssn_commands.execute_hook('*/*/qsm-lazy-playblast')\n" "0";