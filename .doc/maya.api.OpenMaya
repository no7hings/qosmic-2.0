Help on module maya.api.OpenMaya in maya.api:

NAME
    maya.api.OpenMaya

FILE
    c:\program files\autodesk\maya2019\python\lib\site-packages\maya\api\openmaya.py

DESCRIPTION
    # Copyright 2012 Autodesk, Inc. All rights reserved.
    #
    # Use of this software is subject to the terms of the Autodesk
    # license agreement provided at the time of installation or download,
    # or which otherwise accompanies this software in either electronic
    # or hard copy form.

CLASSES
    __builtin__.object
        OpenMaya.MAngle
        OpenMaya.MArgList
        OpenMaya.MArgParser
            OpenMaya.MArgDatabase
        OpenMaya.MArrayDataBuilder
        OpenMaya.MArrayDataHandle
        OpenMaya.MAttributeIndex
        OpenMaya.MAttributePattern
        OpenMaya.MAttributeSpec
        OpenMaya.MAttributeSpecArray
        OpenMaya.MBoundingBox
        OpenMaya.MCallbackIdArray
        OpenMaya.MColor
        OpenMaya.MColorArray
        OpenMaya.MDAGDrawOverrideInfo
        OpenMaya.MDGContext
        OpenMaya.MDGModifier
            OpenMaya.MDagModifier
        OpenMaya.MDagPath
        OpenMaya.MDagPathArray
        OpenMaya.MDataBlock
        OpenMaya.MDataHandle
        OpenMaya.MDistance
        OpenMaya.MDoubleArray
        OpenMaya.MEulerRotation
        OpenMaya.MEvaluationNode
        OpenMaya.MEvaluationNodeIterator
        OpenMaya.MExternalContentInfoTable
        OpenMaya.MExternalContentLocationTable
        OpenMaya.MFileObject
        OpenMaya.MFloatArray
        OpenMaya.MFloatMatrix
        OpenMaya.MFloatPoint
        OpenMaya.MFloatPointArray
        OpenMaya.MFloatVector
        OpenMaya.MFloatVectorArray
        OpenMaya.MFn
        OpenMaya.MFnBase
            OpenMaya.MFnAttribute
                OpenMaya.MFnCompoundAttribute
                OpenMaya.MFnEnumAttribute
                OpenMaya.MFnGenericAttribute
                OpenMaya.MFnLightDataAttribute
                OpenMaya.MFnMatrixAttribute
                OpenMaya.MFnMessageAttribute
                OpenMaya.MFnNumericAttribute
                OpenMaya.MFnTypedAttribute
                OpenMaya.MFnUnitAttribute
            OpenMaya.MFnComponent
                OpenMaya.MFnDoubleIndexedComponent
                OpenMaya.MFnSingleIndexedComponent
                OpenMaya.MFnTripleIndexedComponent
            OpenMaya.MFnData
                OpenMaya.MFnComponentListData
                OpenMaya.MFnDoubleArrayData
                OpenMaya.MFnGeometryData
                    OpenMaya.MFnMeshData
                    OpenMaya.MFnNurbsCurveData
                    OpenMaya.MFnNurbsSurfaceData
                OpenMaya.MFnIntArrayData
                OpenMaya.MFnMatrixArrayData
                OpenMaya.MFnMatrixData
                OpenMaya.MFnNumericData
                OpenMaya.MFnPluginData
                OpenMaya.MFnPointArrayData
                OpenMaya.MFnStringArrayData
                OpenMaya.MFnStringData
                OpenMaya.MFnUInt64ArrayData
                OpenMaya.MFnVectorArrayData
            OpenMaya.MFnDependencyNode
                OpenMaya.MFnContainerNode
                OpenMaya.MFnDagNode
                    OpenMaya.MFnCamera
                    OpenMaya.MFnMesh
                    OpenMaya.MFnNurbsCurve
                    OpenMaya.MFnNurbsSurface
                    OpenMaya.MFnTransform
                OpenMaya.MFnReference
                OpenMaya.MFnSet
            OpenMaya.MFnPlugin
        OpenMaya.MGlobal
        OpenMaya.MImage
        OpenMaya.MInt64Array
        OpenMaya.MIntArray
        OpenMaya.MItDag
        OpenMaya.MItDependencyGraph
        OpenMaya.MItDependencyNodes
        OpenMaya.MItMeshEdge
        OpenMaya.MItMeshFaceVertex
        OpenMaya.MItMeshPolygon
        OpenMaya.MItMeshVertex
        OpenMaya.MItSelectionList
        OpenMaya.MItSurfaceCV
        OpenMaya.MIteratorType
        OpenMaya.MMatrix
        OpenMaya.MMatrixArray
        OpenMaya.MMeshIntersector
        OpenMaya.MMeshIsectAccelParams
        OpenMaya.MMeshSmoothOptions
        OpenMaya.MMessage
            OpenMaya.MCameraMessage
            OpenMaya.MCommandMessage
            OpenMaya.MConditionMessage
            OpenMaya.MContainerMessage
            OpenMaya.MDGMessage
            OpenMaya.MDagMessage
            OpenMaya.MEventMessage
            OpenMaya.MLockMessage
            OpenMaya.MModelMessage
            OpenMaya.MNodeMessage
            OpenMaya.MObjectSetMessage
            OpenMaya.MPolyMessage
            OpenMaya.MSceneMessage
            OpenMaya.MTimerMessage
            OpenMaya.MUserEventMessage
        OpenMaya.MNamespace
        OpenMaya.MNodeClass
        OpenMaya.MObject
        OpenMaya.MObjectArray
        OpenMaya.MObjectHandle
        OpenMaya.MPlane
        OpenMaya.MPlug
        OpenMaya.MPlugArray
        OpenMaya.MPoint
        OpenMaya.MPointArray
        OpenMaya.MPointOnMesh
        OpenMaya.MPxAttributePatternFactory
        OpenMaya.MPxCommand
        OpenMaya.MPxData
            OpenMaya.MPxGeometryData
        OpenMaya.MPxGeometryIterator
        OpenMaya.MPxNode
            OpenMaya.MPxSurfaceShape
        OpenMaya.MQuaternion
        OpenMaya.MRampAttribute
        OpenMaya.MRichSelection
        OpenMaya.MSelectionList
        OpenMaya.MSelectionMask
        OpenMaya.MSpace
        OpenMaya.MSyntax
        OpenMaya.MTime
        OpenMaya.MTimeArray
        OpenMaya.MTransformationMatrix
        OpenMaya.MTypeId
        OpenMaya.MURI
        OpenMaya.MUint64Array
        OpenMaya.MUintArray
        OpenMaya.MUserData
        OpenMaya.MUuid
        OpenMaya.MVector
        OpenMaya.MVectorArray
        OpenMaya.MWeight
    
    class MAngle(__builtin__.object)
     |  Manipulate angular data.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  asAngMinutes(...)
     |      Returns the angular value, converted to minutes of arc.
     |  
     |  asAngSeconds(...)
     |      Returns the angular value, converted to seconds of arc.
     |  
     |  asDegrees(...)
     |      Returns the angular value, converted to degrees.
     |  
     |  asRadians(...)
     |      Returns the angular value, converted to radians.
     |  
     |  asUnits(...)
     |      Returns the angular value, converted to the specified units.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  internalToUI(...)
     |      Converts a value from Maya's internal units to the units used in the UI.
     |  
     |  internalUnit(...)
     |      Returns the angular unit used internally by Maya.
     |  
     |  setUIUnit(...)
     |      Sets the angular unit used in Maya's UI.
     |  
     |  uiToInternal(...)
     |      Converts a value from the units used in the UI to Maya's internal units.
     |  
     |  uiUnit(...)
     |      Returns the units used to display angles in Maya's UI.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  unit
     |      Angular units used by the angle.
     |  
     |  value
     |      Value of the angle.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kAngMinutes = 3
     |  
     |  kAngSeconds = 4
     |  
     |  kDegrees = 2
     |  
     |  kInvalid = 0
     |  
     |  kLast = 5
     |  
     |  kRadians = 1
    
    class MArgDatabase(MArgParser)
     |  Command argument list parser which extends MArgParser with the
     |  ability to return arguments and objects as MSelectionLists
     |  
     |  Method resolution order:
     |      MArgDatabase
     |      MArgParser
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  commandArgumentMSelectionList(...)
     |      commandArgumentMSelectionList(argIndex) -> MSelectionList
     |      
     |      Returns the specified command argument as an MSelectionList.
     |  
     |  flagArgumentMSelectionList(...)
     |      flagArgumentMSelectionList(flagName, argIndex) -> MSelectionList
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      an MSelectionList.
     |  
     |  getObjectList(...)
     |      getObjectList() -> MSelectionList
     |      
     |      If the command's MSyntax has set the object format to kSelectionList
     |      then this method will return the objects passed to the command as an
     |      MSelectionList. If any other object format is set then an empty
     |      selection list will be returned.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MArgParser:
     |  
     |  commandArgumentBool(...)
     |      commandArgumentBool(argIndex) -> bool
     |      
     |      Returns the specified command argument as a bool.
     |  
     |  commandArgumentDouble(...)
     |      Alias for commandArgumentFloat().
     |  
     |  commandArgumentFloat(...)
     |      commandArgumentFloat(argIndex) -> float
     |      
     |      Returns the specified command argument as a float.
     |  
     |  commandArgumentInt(...)
     |      commandArgumentInt(argIndex) -> int
     |      
     |      Returns the specified command argument as an int.
     |  
     |  commandArgumentMAngle(...)
     |      commandArgumentMAngle(argIndex) -> MAngle
     |      
     |      Returns the specified command argument as an MAngle.
     |  
     |  commandArgumentMDistance(...)
     |      commandArgumentMDistance(argIndex) -> MDistance
     |      
     |      Returns the specified command argument as an MDistance.
     |  
     |  commandArgumentMTime(...)
     |      commandArgumentMTime(argIndex) -> MTime
     |      
     |      Returns the specified command argument as an MTime.
     |  
     |  commandArgumentString(...)
     |      commandArgumentString(argIndex) -> unicode string
     |      
     |      Returns the specified command argument as a string.
     |  
     |  flagArgumentBool(...)
     |      flagArgumentBool(flagName, argIndex) -> bool
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      a bool.
     |  
     |  flagArgumentDouble(...)
     |      flagArgumentDouble(flagName, argIndex) -> float
     |      
     |      Alias for flagArgumentFloat().
     |  
     |  flagArgumentFloat(...)
     |      flagArgumentFloat(flagName, argIndex) -> float
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      a float.
     |  
     |  flagArgumentInt(...)
     |      flagArgumentInt(flagName, argIndex) -> int
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      an int.
     |  
     |  flagArgumentMAngle(...)
     |      flagArgumentMAngle(flagName, argIndex) -> MAngle
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      an MAngle.
     |  
     |  flagArgumentMDistance(...)
     |      flagArgumentMDistance(flagName, argIndex) -> MDistance
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      an MDistance.
     |  
     |  flagArgumentMTime(...)
     |      flagArgumentMTime(flagName, argIndex) -> MTime
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      an MTime.
     |  
     |  flagArgumentString(...)
     |      flagArgumentString(flagName, argIndex) -> string
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      a string.
     |  
     |  getFlagArgumentList(...)
     |      getFlagArgumentList(flagName, occurrence) -> MArgList
     |      
     |      Returns the arguments for the specified occurrence of the given
     |      multi-use flag as an MArgList. Raises RuntimeError if the flag has
     |      not been enabled for multi-use. Raises IndexError if occurrence is
     |      out of range.
     |  
     |  getFlagArgumentPosition(...)
     |      getFlagArgumentPosition(flagName, occurrence) -> int
     |      
     |      Returns the position in the argument list of the specified occurrence
     |      of the given flag. Raises IndexError if occurrence is out of range.
     |  
     |  getObjectStrings(...)
     |      getObjectStrings() -> tuple of unicode strings
     |      
     |      If the command's MSyntax has set the object format to kStringObjects
     |      then this method will return the objects passed to the command as a
     |      tuple of strings. If any other object format is set then an empty
     |      tuple will be returned.
     |  
     |  isFlagSet(...)
     |      isFlagSet(flagName) -> bool
     |      
     |      Returns True if the given flag appears on the command line.
     |  
     |  numberOfFlagUses(...)
     |      numberOfFlagUses(flagName) -> int
     |      
     |      Returns the number of times that the flag appears on the command
     |      line.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MArgParser:
     |  
     |  isEdit
     |      True if the edit flag is present.
     |  
     |  isQuery
     |      True if the query flag is present.
     |  
     |  numberOfFlagsUsed
     |      Number of different flags used on the command line. If the same flag appears multiple times it is only counted once.
    
    class MArgList(__builtin__.object)
     |  Argument list for passing to commands.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  addArg(...)
     |      addArg(arg) -> self , 'arg' is a numeric value, MAngle, MDistance,
     |      MTime, MPoint or        MVector.
     |      
     |      Add an argument to the end of the arg list.
     |  
     |  asAngle(...)
     |      asAngle(index) -> MAngle
     |      
     |      Return an argument as an MAngle.
     |  
     |  asBool(...)
     |      asBool(index) -> bool
     |      
     |      Return an argument as a boolean.
     |  
     |  asDistance(...)
     |      asDistance(index) -> MDistance
     |      
     |      Return an argument as an MDistance.
     |  
     |  asDouble(...)
     |      asDouble(index) -> float
     |      
     |      Alias for asFloat().
     |  
     |  asDoubleArray(...)
     |      asDoubleArray(index) -> MDoubleArray
     |      
     |      Return a sequence of arguments as an MDoubleArray.
     |  
     |  asFloat(...)
     |      asFloat(index) -> float
     |      
     |      Return an argument as a float.
     |  
     |  asInt(...)
     |      asInt(index) -> int
     |      
     |      Return an argument as an integer.
     |  
     |  asIntArray(...)
     |      asIntArray(index) -> MIntArray
     |      
     |      Return a sequence of arguments as an MIntArray.
     |  
     |  asMatrix(...)
     |      asMatrix(index) -> MMatrix
     |      
     |      Return a sequence of arguments as an MMatrix.
     |  
     |  asPoint(...)
     |      asPoint(index) -> MPoint
     |      
     |      Return a sequence of arguments as an MPoint.
     |  
     |  asString(...)
     |      asString(index) -> string
     |      
     |      Return an argument as a string.
     |  
     |  asStringArray(...)
     |      asStringArray(index) -> list of strings
     |      
     |      Return a sequence of arguments as a list of strings.
     |  
     |  asTime(...)
     |      asTime(index) -> MTime
     |      
     |      Return an argument as an MTime.
     |  
     |  asVector(...)
     |      asVector(index) -> MVector
     |      
     |      Return a sequence of arguments as an MVector.
     |  
     |  flagIndex(...)
     |      flagIndex(shortFlag, longFlag=None) -> int
     |      
     |      Return index of first occurrence of specified flag.
     |  
     |  lastArgUsed(...)
     |      lastArgUsed() -> int
     |      
     |      Return index of last argument used by the most recent as*() method.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kInvalidArgIndex = -1
    
    class MArgParser(__builtin__.object)
     |  Command argument list parser.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  commandArgumentBool(...)
     |      commandArgumentBool(argIndex) -> bool
     |      
     |      Returns the specified command argument as a bool.
     |  
     |  commandArgumentDouble(...)
     |      Alias for commandArgumentFloat().
     |  
     |  commandArgumentFloat(...)
     |      commandArgumentFloat(argIndex) -> float
     |      
     |      Returns the specified command argument as a float.
     |  
     |  commandArgumentInt(...)
     |      commandArgumentInt(argIndex) -> int
     |      
     |      Returns the specified command argument as an int.
     |  
     |  commandArgumentMAngle(...)
     |      commandArgumentMAngle(argIndex) -> MAngle
     |      
     |      Returns the specified command argument as an MAngle.
     |  
     |  commandArgumentMDistance(...)
     |      commandArgumentMDistance(argIndex) -> MDistance
     |      
     |      Returns the specified command argument as an MDistance.
     |  
     |  commandArgumentMTime(...)
     |      commandArgumentMTime(argIndex) -> MTime
     |      
     |      Returns the specified command argument as an MTime.
     |  
     |  commandArgumentString(...)
     |      commandArgumentString(argIndex) -> unicode string
     |      
     |      Returns the specified command argument as a string.
     |  
     |  flagArgumentBool(...)
     |      flagArgumentBool(flagName, argIndex) -> bool
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      a bool.
     |  
     |  flagArgumentDouble(...)
     |      flagArgumentDouble(flagName, argIndex) -> float
     |      
     |      Alias for flagArgumentFloat().
     |  
     |  flagArgumentFloat(...)
     |      flagArgumentFloat(flagName, argIndex) -> float
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      a float.
     |  
     |  flagArgumentInt(...)
     |      flagArgumentInt(flagName, argIndex) -> int
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      an int.
     |  
     |  flagArgumentMAngle(...)
     |      flagArgumentMAngle(flagName, argIndex) -> MAngle
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      an MAngle.
     |  
     |  flagArgumentMDistance(...)
     |      flagArgumentMDistance(flagName, argIndex) -> MDistance
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      an MDistance.
     |  
     |  flagArgumentMTime(...)
     |      flagArgumentMTime(flagName, argIndex) -> MTime
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      an MTime.
     |  
     |  flagArgumentString(...)
     |      flagArgumentString(flagName, argIndex) -> string
     |      
     |      Returns the specified argument of the specified single-use flag as
     |      a string.
     |  
     |  getFlagArgumentList(...)
     |      getFlagArgumentList(flagName, occurrence) -> MArgList
     |      
     |      Returns the arguments for the specified occurrence of the given
     |      multi-use flag as an MArgList. Raises RuntimeError if the flag has
     |      not been enabled for multi-use. Raises IndexError if occurrence is
     |      out of range.
     |  
     |  getFlagArgumentPosition(...)
     |      getFlagArgumentPosition(flagName, occurrence) -> int
     |      
     |      Returns the position in the argument list of the specified occurrence
     |      of the given flag. Raises IndexError if occurrence is out of range.
     |  
     |  getObjectStrings(...)
     |      getObjectStrings() -> tuple of unicode strings
     |      
     |      If the command's MSyntax has set the object format to kStringObjects
     |      then this method will return the objects passed to the command as a
     |      tuple of strings. If any other object format is set then an empty
     |      tuple will be returned.
     |  
     |  isFlagSet(...)
     |      isFlagSet(flagName) -> bool
     |      
     |      Returns True if the given flag appears on the command line.
     |  
     |  numberOfFlagUses(...)
     |      numberOfFlagUses(flagName) -> int
     |      
     |      Returns the number of times that the flag appears on the command
     |      line.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  isEdit
     |      True if the edit flag is present.
     |  
     |  isQuery
     |      True if the query flag is present.
     |  
     |  numberOfFlagsUsed
     |      Number of different flags used on the command line. If the same flag appears multiple times it is only counted once.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MArrayDataBuilder(__builtin__.object)
     |  Array builder for arrays in data blocks.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  addElement(...)
     |      addElement(index) -> MDataHandle
     |      
     |      Adds a new element to the array at the given index.
     |      
     |      * index (int) - the index at which we wish to add the new element
     |      
     |      Returns The handle for the new element
     |  
     |  addElementArray(...)
     |      addElementArray(index) -> MArrayDataHandle
     |      
     |      Adds a new element to the array at the given index.  The added element is also an array.
     |      
     |      * index (int) - the index at which we wish to add the new element
     |      
     |      Returns The handle for the new array element
     |  
     |  addLast(...)
     |      addLast() -> MDataHandle
     |      
     |      Adds a new element to the end of the array.  The index of the element will be the current highest index + 1.
     |      
     |      Returns The handle for the new element
     |  
     |  addLastArray(...)
     |      addLastArray() -> MArrayDataHandle
     |      
     |      Adds a new element to the end of the array.  The added element is also an array.  The index of the element will the current highest index + 1.
     |      
     |      Returns The handle for the new array element
     |  
     |  copy(...)
     |      copy(source) -> self
     |      
     |      Copy data from source builder.
     |      
     |      * source (MArrayDataBuilder) - The source object to copy from
     |  
     |  growArray(...)
     |      growArray(amount) -> self
     |      
     |      Grows the array storage by the given amount.
     |      
     |      * amount (int) - the amount to grow the array by
     |  
     |  removeElement(...)
     |      removeElement(index) -> self
     |      
     |      Removes the specified element from the array
     |      
     |      * index (int) - the element of the array to remove
     |  
     |  setGrowSize(...)
     |      setGrowSize(size) -> self
     |      
     |      Sets the grow size of the array.  As elements are added to the array, the builder will allocate memory in chunks.  This method tells the builder how many elements to allocate each time it grows the array.
     |      
     |      * size (int) - the number of elements to allocate when growing the array
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MArrayDataHandle(__builtin__.object)
     |  Data block handle for array data.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  builder(...)
     |      builder() -> MArrayDataBuilder
     |      
     |      Returns a builder for this handle's array so that it can be expanded.
     |      
     |      This method will raise an exception if the current array does not support array data builders. This can be changed in a node's initialize routine using the usesArrayDataBuilder attribute in MFnAttribute.
     |      
     |      Do not use with an MArrayDataHandle which was returned by MPlug.asMDataHandle().
     |  
     |  copy(...)
     |      copy(source) -> self
     |      
     |      Copy data from source array.
     |      
     |      * source (MArrayDataHandle) - The source object to copy from
     |  
     |  elementLogicalIndex(...)
     |      elementLogicalIndex() -> int
     |      
     |      Returns the index that we are currently at in the array.  It is possible for the index to be invalid, in which case the return status will report an error.  These may be sparse arrays so the element index returned will be a logical index.
     |      
     |      Raises an exception if there is no current element (e.g. if there are no elements).
     |  
     |  inputArrayValue(...)
     |      inputArrayValue() -> MArrayDataHandle
     |      
     |      Gets a handle into this data block for the current array element.  This method should be used when the array elements are also arrays.  The data represented by the handle will be valid.  If the data is from an dirty connection, then the connection will be evaluated.
     |      
     |      Do not use with an MArrayDataHandle which was returned by MPlug.asMDataHandle().
     |  
     |  inputValue(...)
     |      inputValue() -> MDataHandle
     |      
     |      Gets a handle into this data block for the current array element.  The data represented by the handle will be valid.  If the data is from an dirty connection, then the connection will be evaluated.
     |      
     |      Do not use with an MArrayDataHandle which was returned by MPlug.asMDataHandle().
     |  
     |  isDone(...)
     |      isDone() -> bool
     |      
     |      Specifies whether or not there are more elements to iterate over.
     |  
     |  jumpToLogicalElement(...)
     |      jumpToLogicalElement(index) -> self
     |      
     |      Jump to a specific logical element in the array.
     |      Since the logical array is sparse its indices may not be consecutive and a binary search is used internally to find the element.
     |      Thus when iterating through the elements of the array it is much faster to do so using physical indices.
     |      
     |      * index (int) - the logical index to jump to
     |  
     |  jumpToPhysicalElement(...)
     |      jumpToPhysicalElement(position) -> self
     |      
     |      Jump to a specific physical element in the array.
     |      Since physical elements are contiguous no search is required.
     |      
     |      * position (int) - the array position to jump to
     |  
     |  next(...)
     |      next() -> bool
     |      
     |      Advance to the next element in the array.
     |      Return True if there was a next element and False if there wasn't.
     |  
     |  outputArrayValue(...)
     |      outputArrayValue() -> MArrayDataHandle
     |      
     |      Gets a handle into this data block for the current array element.  This method should be used when the array elements are also arrays. The array's elements are not evaluated and may no longer be valid. Therefore, this handle should only be used for writing over the data.
     |      
     |      Do not use with an MArrayDataHandle which was returned by MPlug.asMDataHandle().
     |  
     |  outputValue(...)
     |      outputValue() -> MDataHandle
     |      
     |      Gets a handle into this data block for the current array element. The element is not evaluated so its data may not be valid. Therefore, this handle should only be used for writing over the data.
     |      
     |      This method can also be used to retrieve handles to individual elements of  non-datablock array handles, such as those returned by MPlug.getValue() and MPlug.asMDataHandle().
     |  
     |  set(...)
     |      set(builder) -> self
     |      
     |      Sets the data for this array from the data in the builder object
     |      
     |      Do not use with an MArrayDataHandle which was returned by MPlug.asMDataHandle().
     |      
     |      * builder (MArrayDataBuilder) - the builder object
     |  
     |  setAllClean(...)
     |      setAllClean() -> self
     |      
     |      Marks every element of the array attribute represented by the handle as clean.  This method should be used if a compute function is asked to compute a single element of a multi, but instead calculates all the elements.  Calling <i>setAllClean</i> in this situation will prevent further calls to the node's compute method for the other elements of the multi.
     |      
     |      Do not use with an MArrayDataHandle which was returned by MPlug.asMDataHandle()
     |  
     |  setClean(...)
     |      setClean() -> self
     |      
     |      Marks the data that is represented by this handle as being clean.  This should be done after recalculating the data from the inputs.
     |      
     |      Do not use with an MArrayDataHandle which was returned by MPlug.asMDataHandle().
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MAttributeIndex(__builtin__.object)
     |  The index information for an attribute specification.
     |  
     |  Methods defined here:
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  copy(...)
     |      copy(source) -> self
     |      
     |      Copy data from source index.
     |      
     |      * source (MAttributeIndex) - The source index to copy from
     |  
     |  getLower(...)
     |      getLower() -> int/float
     |      
     |      Returns the lower bound of the index.
     |  
     |  getUpper(...)
     |      getUpper() -> int/float
     |      
     |      Returns the upper bound of the index.
     |  
     |  getValue(...)
     |      getValue() -> int/float
     |      
     |      Returns the current value of the index.
     |      Raises an exception if the index is a range.
     |  
     |  hasLowerBound(...)
     |      hasLowerBound() -> bool
     |      
     |      Returns True if a lower bound is specified.
     |  
     |  hasRange(...)
     |      hasRange() -> bool
     |      
     |      Returns True if a range was specified.
     |  
     |  hasUpperBound(...)
     |      hasUpperBound() -> bool
     |      
     |      Returns True if an upper bound is specified.
     |  
     |  hasValidRange(...)
     |      hasValidRange() -> bool
     |      
     |      Returns True if upper bound is greater than lower bound.
     |  
     |  isBounded(...)
     |      isBounded() -> bool
     |      
     |      Returns True if the index is bounded.
     |  
     |  setLower(...)
     |      setLower(value) -> self
     |      
     |      Sets the lower bound of the index.
     |  
     |  setType(...)
     |      setType(type) -> self
     |      
     |      Sets the type of attribute index.
     |      See type() for a list of valid index types.
     |      
     |      * type (int) - the index type to set
     |  
     |  setUpper(...)
     |      setUpper(value) -> self
     |      
     |      Sets the upper bound of the index.
     |  
     |  setValue(...)
     |      setValue(value) -> self
     |      
     |      Sets the value of the index.
     |      
     |      Remark: calling this method with an integer value will change its type to kInteger, and subsequently calling with a float value will change it to kFloat.
     |  
     |  type(...)
     |      type() -> int
     |      
     |      Returns the type of attribute index.
     |      
     |      Valid index types:
     |        kInteger      Integer index (e.g. mesh.cp[5])
     |        kFloat                Floating-poing index (e.g. curve.u[1.3])
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kFloat = 1
     |  
     |  kInteger = 0
    
    class MAttributePattern(__builtin__.object)
     |  Manipulate attribute structure patterns.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  addRootAttr(...)
     |      Add the given root attribute to this pattern.
     |  
     |  name(...)
     |      Return the name of the attribute pattern.
     |  
     |  removeRootAttr(...)
     |      Return the nth or passed-in root attribute from this pattern.
     |  
     |  rootAttr(...)
     |      Return the nth root attribute in this pattern.
     |  
     |  rootAttrCount(...)
     |      Return the number of root attributes in this pattern.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  attrPattern(...)
     |      Return the specified pattern indexed from the global list.
     |  
     |  attrPatternCount(...)
     |      Return the global number of patterns created.
     |  
     |  findPattern(...)
     |      Return a pattern with the given name, None if not found.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MAttributeSpec(__builtin__.object)
     |  Class that encapsulates component/attribute information for generating selection items.
     |  
     |  Methods defined here:
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  copy(...)
     |      copy(source) -> self
     |      
     |      Copy data from source specification.
     |      
     |      * source (MAttributeSpec) - The source specification to copy from
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  dimensions
     |      The dimensions of the attribute specification.
     |  
     |  name
     |      The name of the attribute specification.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MAttributeSpecArray(__builtin__.object)
     |  Array of MAttributeSpec values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MBoundingBox(__builtin__.object)
     |  3D axis-aligned bounding box.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  clear(...)
     |      Empties the bounding box, setting its corners to (0, 0, 0).
     |  
     |  contains(...)
     |      Returns True if a point lies within the bounding box.
     |  
     |  expand(...)
     |      Expands the bounding box to include a point or other bounding box.
     |  
     |  intersects(...)
     |      Returns True if any part of a given bounding box lies within this one.
     |  
     |  transformUsing(...)
     |      Multiplies the bounding box's corners by a matrix.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  center
     |      Center point
     |  
     |  depth
     |      Size in Z
     |  
     |  height
     |      Size in Y
     |  
     |  max
     |      Maximum corner point
     |  
     |  min
     |      Minimum corner point
     |  
     |  width
     |      Size in X
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MCallbackIdArray(__builtin__.object)
     |  Array of MCallbackId values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MCameraMessage(MMessage)
     |  Class used to register callbacks for Camera Manipulation Begin and End related messages.
     |  
     |  Method resolution order:
     |      MCameraMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addBeginManipulationCallback(...)
     |      addBeginManipulationCallback(node, function, clientData=None) -> id
     |      
     |      Registers callbacks for camera manipulation beginning messages.
     |      
     |       * node (MObject) - The node to register the callback for.
     |       * function (MMessage::MNodeFunction) - the callback function
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addEndManipulationCallback(...)
     |      addEndManipulationCallback(node, function, clientData=None) -> id
     |      
     |      Registers callbacks for camera manipulation ending messages.
     |      
     |       * node (MObject) - The node to register the callback for.
     |       * function (MMessage::MNodeFunction) - the callback function
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MColor(__builtin__.object)
     |  Manipulate color data.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __div__(...)
     |      x.__div__(y) <==> x/y
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __idiv__(...)
     |      x.__idiv__(y) <==> x/=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __rdiv__(...)
     |      x.__rdiv__(y) <==> y/x
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  getColor(...)
     |      Returns a list containing the color's components, in the specified color model.
     |  
     |  setColor(...)
     |      Sets the color's components and color model.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  a
     |      alpha component
     |  
     |  b
     |      blue component
     |  
     |  g
     |      green component
     |  
     |  r
     |      red component
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kByte = 1
     |  
     |  kCMY = 2
     |  
     |  kCMYK = 3
     |  
     |  kFloat = 0
     |  
     |  kHSV = 1
     |  
     |  kOpaqueBlack = maya.api.OpenMaya.MColor((0, 0, 0, 1))
     |  
     |  kRGB = 0
     |  
     |  kShort = 2
    
    class MColorArray(__builtin__.object)
     |  Array of MColor values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MCommandMessage(MMessage)
     |  Class used to register callbacks for command related messages.
     |  
     |  The class also provides the following MessageType constants which
     |  describe the different types of output messages:
     |    kHistory              #Command history
     |    kDisplay              #String to display unmodified
     |    kInfo         #General information
     |    kWarning              #Warning message
     |    kError                #Error message
     |    kResult               #Result from a command execution in the command window
     |    kStackTrace   #Stack trace
     |  
     |  Method resolution order:
     |      MCommandMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addCommandCallback(...)
     |      addCommandCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback for command messages that are
     |      issued every time a MEL command is executed. It is only called
     |      when actual commands are executed and not when scripts are
     |      executed.
     |      
     |      NOTE: Setting up a callback using this method will
     |      degrade the performance of Maya since the installed callback will be
     |      invoked repeatedly as MEL operations are processed.
     |      
     |       * function - callable which will be passed a string containing the
     |         MEL command being executed, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addCommandOutputCallback(...)
     |      addCommandOutputCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback for whenever commands generate
     |      output such as that which is printed into the command window.
     |      
     |       * function - callable which will be passed a string containing the
     |         MEL command being executed, a MessageType constant (see class docs
     |         for a list) indicating the message type and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addCommandOutputFilterCallback(...)
     |      addCommandOutputFilterCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback for whenever commands generate
     |      output such as that which is printed into the command window.
     |      
     |      Returning True in the callback will filter the output from the
     |      script editor and command line., returning False will keep the output.
     |      
     |       * function - callable which will be passed a string containing the
     |         MEL command being executed, a MessageType constant (see class docs
     |         for a list) indicating the message type and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addProcCallback(...)
     |      addProcCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is executed every time a MEL
     |      procedure is run. The callback will be executed once when the procedure
     |      is about to be executed, and again when it has exited. If a non-existent
     |      procedure is called the callback will be called once for entry but there
     |      will be no call on exit.
     |      
     |      The callback cannot be registered multiple times. To register a new
     |      callback function for this, please de-register the original callback first
     |      
     |      NOTE: Setting up a callback using this method can potentially degrade the
     |      performance of Maya since the installed callback will be invoked
     |      repeatedly as MEL procedures are executed.
     |      
     |       * function - callable which will be passed a string containing the name
     |         of the procedure being invoked, an integer indicating the ID for the
     |         procedure's invocation, a bool set to True if the procedure is being entered,
     |         false otherwise, a ProcType constant (see below for a list) indicating the
     |         type of call this is (MEL proc or MEL command), and the clientData object
     |         ProcType constant can take the folowing values:
     |           kMELProc
     |           kMELCommand
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  kDisplay = 1
     |  
     |  kError = 4
     |  
     |  kHistory = 0
     |  
     |  kInfo = 2
     |  
     |  kMELCommand = 1
     |  
     |  kMELProc = 0
     |  
     |  kResult = 5
     |  
     |  kStackTrace = 6
     |  
     |  kWarning = 3
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MConditionMessage(MMessage)
     |  Class used to register callbacks for condition related messages.
     |  
     |  Method resolution order:
     |      MConditionMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addConditionCallback(...)
     |      addConditionCallback(conditionName, function, clientData=None) -> id
     |      
     |      This method registers a callback for condition changed messages.
     |      The callback function will be passed the new state of the
     |      condition and any client data that the user wishes to pass in.
     |      
     |       * conditionName (string) - the condition to register the 
     |      callback for
     |       * function - callable which will be passed a bool indicating
     |         the new state of the condition, and the clientData object.
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  getConditionNames(...)
     |      getConditionNames() -> (string, string, ...)
     |      
     |      This method returns the list of available condition names.
     |      
     |       * return: tuple of available condition names.
     |  
     |  getConditionState(...)
     |      getConditionState(name) -> bool
     |      
     |      This method returns the current state of a condition.
     |      
     |       * name (string) - the name of the condition.
     |      
     |      
     |       * return: The current state of the condition.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MContainerMessage(MMessage)
     |  Class used to register callbacks for container related messages.
     |  
     |  Method resolution order:
     |      MContainerMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addBoundAttrCallback(...)
     |      addBoundAttrCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever an attribute
     |      is bound or unbound on a container.
     |      
     |       * function - callable which will be passed a Node (the container)
     |         ,a string indicating the name of the bound attr, and
     |         the clientData object.
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addPublishAttrCallback(...)
     |      addPublishAttrCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever an attribute
     |      is published or unpublished from a container.
     |      
     |       * function - callable which will be passed a Node (the container)
     |         ,a string indicating the name of the published attr, and
     |         the clientData object.
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MDAGDrawOverrideInfo(__builtin__.object)
     |  A data structure to store the per path draw override information.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  displayType
     |      Display type (kDisplayTypeNormal, kDisplayTypeReference or kDisplayTypeTemplate)
     |  
     |  enableShading
     |      Whether allow to draw shaded item
     |  
     |  enableTexturing
     |      Whether allow to draw textured item
     |  
     |  enableVisible
     |      Whether the whole geometry is visible
     |  
     |  lod
     |      Level of detail (kLODFull or kLODBoundingBox)
     |  
     |  overrideEnabled
     |      Draw override enabled or not
     |  
     |  playbackVisible
     |      Whether the object is visible during playback
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kDisplayTypeNormal = 0
     |  
     |  kDisplayTypeReference = 1
     |  
     |  kDisplayTypeTemplate = 2
     |  
     |  kLODBoundingBox = 1
     |  
     |  kLODFull = 0
    
    class MDGContext(__builtin__.object)
     |  Dependency graph context.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  copy(...)
     |      copy(source) -> self
     |      
     |      Copy data from source context.
     |      
     |      * source (MDGContext) - The source object to copy from
     |  
     |  getTime(...)
     |      Returns the time at which this context is set to evaluate.
     |  
     |  isCurrent(...)
     |      Returns True if the context is currently being used for evaluation. Returns False if some other context is being used for evaluation.
     |  
     |  isNormal(...)
     |      Returns True if the context is set to evaluate normally. Returns False if the context is set to evaluate at a specific time.
     |  
     |  makeCurrent(...)
     |      Makes this context the new current one being used for evaluation. Returns the previous evaluation context.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  current(...)
     |      Returns the current context being used for evaluation.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kNormal = <OpenMaya.MDGContext object>
    
    class MDGMessage(MMessage)
     |  Class used to register callbacks for Dependency Graph related messages.
     |  
     |  Method resolution order:
     |      MDGMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addConnectionCallback(...)
     |      addConnectionCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a connection
     |      is made or broken in the dependency graph. This callback is triggered
     |      after the given connection has been made or broken, unlike the addPreConnectionCallback
     |      which is triggered before the operation.
     |      
     |       * function - callable which will be passed a MPlug indicating the source
     |         plug of the connection, a MPlug indicating the destination plug of the
     |         connection, a boolean set to True if a new connection will be made,
     |         False if it will be broken and the clientData object.
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addDelayedTimeChangeCallback(...)
     |      addDelayedTimeChangeCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever the time
     |      changes in the dependency graph, but after the time changed callback.
     |      
     |       * function - callable which will be passed a MTime object indicating
     |         the new time and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addDelayedTimeChangeRunupCallback(...)
     |      addDelayedTimeChangeRunupCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever the time
     |      changes in the dependency graph, but after the other time changed callbacks
     |      which can be used to invoke a dynamics solve or runup if needed
     |      
     |       * function - callable which will be passed a MTime object indicating
     |         the new time and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addForceUpdateCallback(...)
     |      addForceUpdateCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called after the time
     |      changes and after all nodes have been evaluated in the
     |      dependency graph.
     |      
     |       * function - callable which will be passed a MTime object indicating
     |         the new time and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addNodeAddedCallback(...)
     |      addNodeAddedCallback(function, nodeType, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a new node
     |      is added to the dependency graph.
     |      The nodeType argument allows you to specify the type of nodes that
     |      will trigger the callback. The default node type is "dependNode" which
     |      matches all nodes.
     |      
     |       * function - callable which will be passed a MObject indicating
     |         the new node and the clientData object
     |       * nodeType (MString) - type of node that will trigger the callback
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addNodeChangeUuidCheckCallback(...)
     |      addNodeChangeUuidCheckCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a node
     |      may have its UUID changed. Possible causes include the 'rename' command,
     |      and the UUID for a node being read from a file during file I/O.
     |      
     |      Note that nodes are assigned a UUID when they are created; this does
     |      not invoke this callback. During file I/O the stored UUID is applied as
     |      a separate step after creation (which does invoke this callback).
     |      
     |      Depending on the situation Maya may or may not use the new UUID by default.
     |      For example, when importing a file, Maya reads the UUID from the file 
     |      but does not use it. The boolean argument to the callback function lets
     |      the callback know whether Maya is intending to use the UUID or not.
     |      
     |      The callback returns a MMessage.Action constant:
     |              * kDefaultAction - The callback does not want to change whether the
     |                UUID is used or not.
     |              * kDoNotDoAction - Do not use the new UUID.
     |              * kDoAction - Use the new UUID.
     |      
     |      In any case, the callback may leave the new uuid as is, or may provide
     |      a new uuid of its own choosing to be used instead.
     |      
     |       * function - callable which will be passed a boolean indicating whether
     |         the UUID will be applied, a MObject indicating the node whose UUID may
     |         be changed, the MUuid that may be applied to the node (typically the one
     |         read from the file, during file I/O) - the callback may provide its own
     |         uuid to be applied by changing this parameter - and the clientData object.
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addNodeRemovedCallback(...)
     |      addNodeRemovedCallback(function, nodeType, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a new node
     |      is removed from the dependency graph.
     |      The nodeType argument allows you to specify the type of nodes that
     |      will trigger the callback. The default node type is "dependNode" which
     |      matches all nodes.
     |      
     |       * function - callable which will be passed a MObject indicating
     |         the node being removed and the clientData object
     |       * nodeType (MString) - type of node that will trigger the callback
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addPreConnectionCallback(...)
     |      addPreConnectionCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever any connection
     |      is made or broken in the dependency graph. This callback is triggered before
     |      the given connection has been made or broken, unlike the addConnectionCallback
     |      which is triggered after the operation.
     |      
     |       * function - callable which will be passed a MPlug indicating the source
     |         plug of the connection, a MPlug indicating the destination plug of the
     |         connection, a boolean set to True if a new connection will be made,
     |         False if it will be broken and the clientData object.
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addTimeChangeCallback(...)
     |      addTimeChangeCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever the time
     |      changes in the dependency graph.
     |      
     |       * function - callable which will be passed a MTime object indicating
     |         the new time and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MDGModifier(__builtin__.object)
     |  Used to change the structure of the dependency graph.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addAttribute(...)
     |      addAttribute(MObject node, MObject attribute) -> self
     |      
     |      Adds an operation to the modifier to add a new dynamic attribute to the
     |      given dependency node. If the attribute is a compound its children will
     |      be added as well, so only the parent needs to be added using this method.
     |  
     |  addExtensionAttribute(...)
     |      addExtensionAttribute(MNodeClass nodeClass, MObject attribute) -> self
     |      
     |      Adds an operation to the modifier to add a new extension attribute to
     |      the given node class. If the attribute is a compound its children will be
     |      added as well, so only the parent needs to be added using this method.
     |  
     |  commandToExecute(...)
     |      commandToExecute(command) -> self
     |      
     |      Adds an operation to the modifier to execute a MEL command. The command
     |      should be fully undoable otherwise unexpected results may occur. If 
     |      the command contains no undoable portions whatsoever, the call to
     |      doIt() may fail, but only after executing the command. It is best to
     |      use multiple commandToExecute() calls rather than batching multiple
     |      commands into a single call to commandToExecute(). They will still be
     |      undone together, as a single undo action by the user, but Maya will
     |      better be able to recover if one of the commands fails.
     |  
     |  connect(...)
     |      connect(MPlug source, MPlug dest) -> self
     |      connect(MObject sourceNode, MObject sourceAttr,
     |              MObject destNode,   MObject destAttr) -> self
     |      
     |      Adds an operation to the modifier that connects two plugs in the
     |      dependency graph. It is the user's responsibility to ensure that the
     |      source and destination attributes are of compatible types. For instance,
     |      if the source attribute is a nurbs surface then the destination must
     |      also be a nurbs surface.
     |      Plugs can either be specified with node and attribute MObjects or with
     |      MPlugs.
     |  
     |  createNode(...)
     |      createNode(typeName) -> MObject
     |      createNode(MTypeId typeId) -> MObject
     |      
     |      Adds an operation to the modifier to create a node of the given type.
     |      The new node is created and returned but will not be added to the
     |      Dependency Graph until the modifier's doIt() method is called. Raises
     |      TypeError if the named node type does not exist or if it is a DAG node
     |      type.
     |  
     |  deleteNode(...)
     |      deleteNode(MObject node) -> self
     |      
     |      Adds an operation to the modifer which deletes the specified node from
     |      the Dependency Graph. If the modifier already contains other operations
     |      on the same node (e.g. a disconnect) then they should be committed by
     |      calling the modifier's doIt() before the deleteNode operation is added.
     |  
     |  disconnect(...)
     |      disconnect(MPlug source, MPlug dest) -> self
     |      disconnect(MObject sourceNode, MObject sourceAttr,
     |                 MObject destNode,   MObject destAttr) -> self
     |      
     |      Adds an operation to the modifier that breaks a connection between two
     |      plugs in the dependency graph.
     |      Plugs can either be specified with node and attribute MObjects or with
     |      MPlugs.
     |  
     |  doIt(...)
     |      doIt() -> self
     |      
     |      Executes the modifier's operations. If doIt() is called multiple times
     |      in a row, without any intervening calls to undoIt(), then only the
     |      operations which were added since the previous doIt() call will be
     |      executed. If undoIt() has been called then the next call to doIt() will
     |      do all operations.
     |  
     |  linkExtensionAttributeToPlugin(...)
     |      linkExtensionAttributeToPlugin(MObject plugin, MObject attribute) -> self
     |      
     |      The plugin can call this method to indicate that the extension attribute
     |      defines part of the plugin, regardless of the node type to which it
     |      attaches itself. This requirement is used when the plugin is checked to
     |      see if it is in use or if is able to be unloaded or if it is required as
     |      part of a stored file. For compound attributes only the topmost parent
     |      attribute may be passed in and all of its children will be included,
     |      recursively. Thus it's not possible to link a child attribute to a
     |      plugin by itself. Note that the link is established immediately and is
     |      not affected by the modifier's doIt() or undoIt() methods.
     |  
     |  newPlugValue(...)
     |      newPlugValue(MPlug plug, MObject value) -> self
     |      
     |      Adds an operation to the modifier to set the value of a plug, where
     |      value is an MObject data wrapper, such as created by the various
     |      MFn*Data classes.
     |  
     |  newPlugValueBool(...)
     |      newPlugValueBool(MPlug plug, bool value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a bool plug.
     |  
     |  newPlugValueChar(...)
     |      newPlugValueChar(MPlug plug, int value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a char (single
     |      byte signed integer) plug.
     |  
     |  newPlugValueDouble(...)
     |      newPlugValueDouble(MPlug plug, float value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a double-precision
     |      float plug.
     |  
     |  newPlugValueFloat(...)
     |      newPlugValueFloat(MPlug plug, float value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a single-precision
     |      float plug.
     |  
     |  newPlugValueInt(...)
     |      newPlugValueInt(MPlug plug, int value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto an int plug.
     |  
     |  newPlugValueMAngle(...)
     |      newPlugValueMAngle(MPlug plug, MAngle value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto an angle plug.
     |  
     |  newPlugValueMDistance(...)
     |      newPlugValueMDistance(MPlug plug, MDistance value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a distance plug.
     |  
     |  newPlugValueMTime(...)
     |      newPlugValueMTime(MPlug plug, MTime value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a time plug.
     |  
     |  newPlugValueShort(...)
     |      newPlugValueShort(MPlug plug, int value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a short
     |      integer plug.
     |  
     |  newPlugValueString(...)
     |      newPlugValueString(MPlug plug, string value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a string plug.
     |  
     |  pythonCommandToExecute(...)
     |      pythonCommandToExecute(callable) -> selfpythonCommandToExecute(commandString) -> self
     |      
     |      Adds an operation to the modifier to execute a Python command, which
     |      can be passed as either a Python callable or a string containing the
     |      text of the Python code to be executed. The command should be fully
     |      undoable otherwise unexpected results may occur. If the command
     |      contains no undoable portions whatsoever, the call to doIt() may fail,
     |      but only after executing the command. It is best to use multiple calls
     |      rather than batching multiple commands into a single call to
     |      pythonCommandToExecute(). They will still be undone together, as a
     |      single undo action by the user, but Maya will better be able to
     |      recover if one of the commands fails.
     |  
     |  removeAttribute(...)
     |      removeAttribute(MObject node, MObject attribute) -> self
     |      
     |      Adds an operation to the modifier to remove a dynamic attribute from the
     |      given dependency node. If the attribute is a compound its children will
     |      be removed as well, so only the parent needs to be removed using this
     |      method. The attribute MObject passed in will be set to kNullObj. There
     |      should be no function sets attached to the attribute at the time of the
     |      call as their behaviour may become unpredictable.
     |  
     |  removeExtensionAttribute(...)
     |      removeExtensionAttribute(MNodeClass nodeClass, MObject attribute) -> self
     |      
     |      Adds an operation to the modifier to remove an extension attribute from
     |      the given node class. If the attribute is a compound its children will
     |      be removed as well, so only the parent needs to be removed using this
     |      method. The attribute MObject passed in will be set to kNullObj. There
     |      should be no function sets attached to the attribute at the time of the
     |      call as their behaviour may become unpredictable.
     |  
     |  removeExtensionAttributeIfUnset(...)
     |      removeExtensionAttributeIfUnset(MNodeClass nodeClass,
     |                                      MObject attribute) -> self
     |      
     |      Adds an operation to the modifier to remove an extension attribute from
     |      the given node class, but only if there are no nodes in the graph with
     |      non-default values for this attribute. If the attribute is a compound
     |      its children will be removed as well, so only the parent needs to be
     |      removed using this method. The attribute MObject passed in will be set
     |      to kNullObj. There should be no function sets attached to the attribute
     |      at the time of the call as their behaviour may become unpredictable.
     |  
     |  removeMultiInstance(...)
     |      removeMultiInstance(MPlug plug, bool breakConnections) -> self
     |      
     |      Adds an operation to the modifier to remove an element of a multi (array) plug.
     |  
     |  renameAttribute(...)
     |      renameAttribute(MObject node, MObject attribute, 
     |      string newShortName, string newShortName) -> self
     |      
     |      Adds an operation to the modifer that renames a dynamic attribute on the given dependency node.
     |  
     |  renameNode(...)
     |      renameNode(MObject node, string newName) -> self
     |      
     |      Adds an operation to the modifer to rename a node.
     |  
     |  setNodeLockState(...)
     |      setNodeLockState(MObject node, bool newState) -> self
     |      
     |      Adds an operation to the modifier to set the lockState of a node.
     |  
     |  undoIt(...)
     |      undoIt() -> self
     |      
     |      Undoes all of the operations that have been given to this modifier. It
     |      is only valid to call this method after the doIt() method has been
     |      called.
     |  
     |  unlinkExtensionAttributeFromPlugin(...)
     |      unlinkExtensionAttributeFromPlugin(MObject plugin,
     |                                         MObject attribute) -> self
     |      
     |      The plugin can call this method to indicate that it no longer requires
     |      an extension attribute for its operation. This requirement is used when
     |      the plugin is checked to see if it is in use or if is able to be unloaded
     |      or if it is required as part of a stored file. For compound attributes
     |      only the topmost parent attribute may be passed in and all of its
     |      children will be unlinked, recursively. Thus it's not possible to unlink
     |      a child attribute from a plugin by itself. Note that the link is broken
     |      immediately and is not affected by the modifier's doIt() or undoIt()
     |      methods.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MDagMessage(MMessage)
     |  Class used to register callbacks for Dag related messages.
     |  
     |  The class also provides the following DagMessage constants which describe the different types of DAG operations:
     |    kParentAdded
     |    kParentRemoved
     |    kChildAdded
     |    kChildRemoved
     |    kChildReordered
     |    kInstanceAdded
     |    kInstanceRemoved
     |    kInvalidMsg
     |  
     |  Method resolution order:
     |      MDagMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addAllDagChangesCallback(...)
     |      addAllDagChangesCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever any
     |      DAG change is made to any DAG node.
     |      
     |       * function - callable which will be passed a DagMessage constant
     |         indicating the operation which triggered the callback (see class
     |                docs for a list), a MDagPath to the parent, a MDagPath to the child
     |         ,and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addAllDagChangesDagPathCallback(...)
     |      addAllDagChangesDagPathCallback(node, function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a DAG
     |      change is made to the specified DAG path.
     |      
     |       * node (MDagPath) - the DAG node to register the callback for
     |       * function - callable which will be passed a DagMessage constant
     |         indicating the operation which triggered the callback (see class
     |                docs for a list), a MDagPath to the parent, a MDagPath to the child
     |         ,and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addChildAddedCallback(...)
     |      addChildAddedCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a child is
     |      added in the DAG.
     |      
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addChildAddedDagPathCallback(...)
     |      addChildAddedDagPathCallback(node, function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a child is
     |      added to the specified DAG node.
     |      
     |       * node (MDagPath) - the DAG node to register the callback for
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addChildRemovedCallback(...)
     |      addChildRemovedCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a child is
     |      removed in the DAG.
     |      
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addChildRemovedDagPathCallback(...)
     |      addChildRemovedDagPathCallback(node, function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a child is
     |      removed from the specified DAG node.
     |      
     |       * node (MDagPath) - the DAG node to register the callback for
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addChildReorderedCallback(...)
     |      addChildReorderedCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a child is
     |      reordered in the DAG.
     |      
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addChildReorderedDagPathCallback(...)
     |      addChildReorderedDagPathCallback(node, function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a child of
     |      the specified DAG node is reordered
     |      
     |       * node (MDagPath) - the DAG node to register the callback for
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addDagCallback(...)
     |      addDagCallback(msgType, function, clientData=None) -> id
     |      
     |      This method registers a callback that is called for specified
     |      DAG changes on all nodes. The callback will also receive the
     |      DagMessage
     |      
     |       * msgType (DagMessage) - The type of DAG change to trigger the callback
     |       * function - callable which will be passed a DagMessage constant
     |         indicating the operation which triggered the callback (see class
     |                docs for a list), a MDagPath to the parent, a MDagPath to the child
     |         ,and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addDagDagPathCallback(...)
     |      addDagDagPathCallback(node, msgType, function, clientData=None) -> id
     |      
     |      This method registers a callback that is called for specified a DAG
     |      change is made to the specified DAG path. The callback receives the
     |      DagMessage as well.
     |      
     |       * node (MDagPath) - the DAG node to register the callback for
     |       * msgType (DagMessage) - The type of DAG change to trigger the callback
     |        (see class docs for a list)
     |       * function - callable which will be passed a DagMessage constant
     |         indicating the operation which triggered the callback, a MDagPath
     |         to the parent, a MDagPath to the child
     |         ,and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addInstanceAddedCallback(...)
     |      addInstanceAddedCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever any node in the DAG
     |      is instanced.
     |      
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addInstanceAddedDagPathCallback(...)
     |      addInstanceAddedDagPathCallback(node, function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever the specified node
     |      is instanced
     |      
     |       * node (MDagPath) - the DAG node to register the callback for
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addInstanceRemovedCallback(...)
     |      addInstanceRemovedCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever an instance of any DAG
     |      node is removed or deleted.
     |      
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addInstanceRemovedDagPathCallback(...)
     |      addInstanceRemovedDagPathCallback(node, function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever an instance of the specified
     |      node is removed.
     |      
     |       * node (MDagPath) - the DAG node to register the callback for
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addParentAddedCallback(...)
     |      addParentAddedCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a parent is
     |      added in the DAG.
     |      
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addParentAddedDagPathCallback(...)
     |      addParentAddedDagPathCallback(node, function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a parent is
     |      added to the specified DAG node.
     |      
     |       * node (MDagPath) - the DAG node to register the callback for
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addParentRemovedCallback(...)
     |      addParentRemovedCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a parent is
     |      removed in the DAG.
     |      
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addParentRemovedDagPathCallback(...)
     |      addParentRemovedDagPathCallback(node, function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a parent is
     |      removed from the specified DAG node.
     |      
     |       * node (MDagPath) - the DAG node to register the callback for
     |       * function - callable which will be passed a MDagPath to the parent,
     |         a MDagPath to the child, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addWorldMatrixModifiedCallback(...)
     |      addWorldMatrixModifiedCallback(node, function, clientData=None) -> id
     |      
     |      This method registers a callback that is called when a DAG node's worldMatrix
     |      changes.
     |      
     |      Since a node's worldMatrix is affected by the transforms of its ancestors in 
     |      the DAG, it's possible for there to be two different nodes involved: the 
     |      "trigger" node, whose transform has changed, and the "affected" node, whose 
     |      worldMatrix is affected by the change to the trigger.
     |      
     |      The trigger node may be the same as the affected node, or it may be one of 
     |      its ancestors.
     |      
     |      The callback is placed on the affected node, but it is the trigger node which 
     |      is passed to the callback.
     |      
     |      If the trigger node's transformation is already dirty (i.e. it has not been 
     |      evaluated since it was last changed) then the callback will not be triggered. 
     |      So if the trigger node's transformation is modified multiple times between 
     |      evaluations, only the first one will result in the callback being called.
     |      
     |       * affectedNode (MDagPath) - the DAG node to register the callback for
     |       * function - callable which will be passed a MObject indicating the node
     |         whose transformation has changed, a MatrixModifiedFlags constant showing
     |         what has changed (see below for complete list) and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |      Available MatrixModifiedFlags constants:
     |      Individual flags:
     |        kScaleX               kScaleY                 kScaleZ
     |        kShearXY              kShearXZ                kShearYZ
     |        kRotateX              kRotateY                kRotateZ
     |        kTranslateX   kTranslateY             kTranslateZ
     |        kScalePivotX  kScalePivotY    kScalePivotZ
     |        kRotatePivotX kRotatePivotY   kRotatePivotZ
     |        kScaleTransX  kScaleTransY    kScaleTransZ
     |        kRotateTransX kRotateTransY   kRotateTransZ
     |        kRotateOrientX        kRotateOrientY  kRotateOrientZ
     |        kRotateOrder
     |      Composite flags
     |        kAll
     |        kScale                = kScaleX        | kScaleY        | kScaleZ
     |        kShear                = kShearXY       | kShearXZ       | kShearYZ
     |        kRotation             = kRotateX       | kRotateY       | kRotateZ
     |        kTranslation          = kTranslateX    | kTranslateY    | kTranslateZ
     |        kScalePivot           = kScalePivotX   | kScalePivotY   | kScalePivotZ
     |        kRotatePivot          = kRotatePivotX  | kRotatePivotY  | kRotatePivotZ
     |        kScalePivotTrans      = kScaleTransX   | kScaleTransY   | kScaleTransZ
     |        kRotatePivotTrans     = kRotateTransX  | kRotateTransY  | kRotateTransZ
     |        kRotateOrient         = kRotateOrientX | kRotateOrientY | kRotateOrientZ
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  kAll = 268435455
     |  
     |  kChildAdded = 2
     |  
     |  kChildRemoved = 3
     |  
     |  kChildReordered = 4
     |  
     |  kInstanceAdded = 5
     |  
     |  kInstanceRemoved = 6
     |  
     |  kInvalidMsg = -1
     |  
     |  kLast = 7
     |  
     |  kParentAdded = 0
     |  
     |  kParentRemoved = 1
     |  
     |  kRotateOrder = 134217728
     |  
     |  kRotateOrient = 117440512
     |  
     |  kRotateOrientX = 16777216
     |  
     |  kRotateOrientY = 33554432
     |  
     |  kRotateOrientZ = 67108864
     |  
     |  kRotatePivot = 229376
     |  
     |  kRotatePivotTrans = 14680064
     |  
     |  kRotatePivotX = 32768
     |  
     |  kRotatePivotY = 65536
     |  
     |  kRotatePivotZ = 131072
     |  
     |  kRotateTransX = 2097152
     |  
     |  kRotateTransY = 4194304
     |  
     |  kRotateTransZ = 8388608
     |  
     |  kRotateX = 64
     |  
     |  kRotateY = 128
     |  
     |  kRotateZ = 256
     |  
     |  kRotation = 448
     |  
     |  kScale = 7
     |  
     |  kScalePivot = 28672
     |  
     |  kScalePivotTrans = 1835008
     |  
     |  kScalePivotX = 4096
     |  
     |  kScalePivotY = 8192
     |  
     |  kScalePivotZ = 16384
     |  
     |  kScaleTransX = 262144
     |  
     |  kScaleTransY = 524288
     |  
     |  kScaleTransZ = 1048576
     |  
     |  kScaleX = 1
     |  
     |  kScaleY = 2
     |  
     |  kScaleZ = 4
     |  
     |  kShear = 56
     |  
     |  kShearXY = 8
     |  
     |  kShearXZ = 16
     |  
     |  kShearYZ = 32
     |  
     |  kTranslateX = 512
     |  
     |  kTranslateY = 1024
     |  
     |  kTranslateZ = 2048
     |  
     |  kTranslation = 3584
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MDagModifier(MDGModifier)
     |  Used to change the structure of the DAG
     |  
     |  Method resolution order:
     |      MDagModifier
     |      MDGModifier
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  createNode(...)
     |      createNode(typeName, parent=MObject.kNullObj) -> new DAG node MObject
     |      createNode(typeId,   parent=MObject.kNullObj) -> new DAG node MObject
     |      
     |      Adds an operation to the modifier to create a DAG node of the specified
     |      type. If a parent DAG node is provided the new node will be parented
     |      under it. If no parent is provided and the new DAG node is a transform
     |      type then it will be parented under the world. In both of these cases
     |      the method returns the new DAG node.
     |      
     |      If no parent is provided and the new DAG node is not a transform type
     |      then a transform node will be created and the child parented under that. The new transform will be parented under the world and it is the
     |      transform node which will be returned by the method, not the child.
     |      
     |      None of the newly created nodes will be added to the DAG until the
     |      modifier's doIt() method is called.
     |  
     |  reparentNode(...)
     |      reparentNode(MObject node, newParent=MObject.kNullObj) -> self
     |      
     |      Adds an operation to the modifier to reparent a DAG node under a
     |      specified parent.
     |      
     |      If no parent is provided then the DAG node will be reparented under the
     |      world, so long as it is a transform type. If it is not a transform type
     |      then the doIt() will raise a RuntimeError.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MDGModifier:
     |  
     |  addAttribute(...)
     |      addAttribute(MObject node, MObject attribute) -> self
     |      
     |      Adds an operation to the modifier to add a new dynamic attribute to the
     |      given dependency node. If the attribute is a compound its children will
     |      be added as well, so only the parent needs to be added using this method.
     |  
     |  addExtensionAttribute(...)
     |      addExtensionAttribute(MNodeClass nodeClass, MObject attribute) -> self
     |      
     |      Adds an operation to the modifier to add a new extension attribute to
     |      the given node class. If the attribute is a compound its children will be
     |      added as well, so only the parent needs to be added using this method.
     |  
     |  commandToExecute(...)
     |      commandToExecute(command) -> self
     |      
     |      Adds an operation to the modifier to execute a MEL command. The command
     |      should be fully undoable otherwise unexpected results may occur. If 
     |      the command contains no undoable portions whatsoever, the call to
     |      doIt() may fail, but only after executing the command. It is best to
     |      use multiple commandToExecute() calls rather than batching multiple
     |      commands into a single call to commandToExecute(). They will still be
     |      undone together, as a single undo action by the user, but Maya will
     |      better be able to recover if one of the commands fails.
     |  
     |  connect(...)
     |      connect(MPlug source, MPlug dest) -> self
     |      connect(MObject sourceNode, MObject sourceAttr,
     |              MObject destNode,   MObject destAttr) -> self
     |      
     |      Adds an operation to the modifier that connects two plugs in the
     |      dependency graph. It is the user's responsibility to ensure that the
     |      source and destination attributes are of compatible types. For instance,
     |      if the source attribute is a nurbs surface then the destination must
     |      also be a nurbs surface.
     |      Plugs can either be specified with node and attribute MObjects or with
     |      MPlugs.
     |  
     |  deleteNode(...)
     |      deleteNode(MObject node) -> self
     |      
     |      Adds an operation to the modifer which deletes the specified node from
     |      the Dependency Graph. If the modifier already contains other operations
     |      on the same node (e.g. a disconnect) then they should be committed by
     |      calling the modifier's doIt() before the deleteNode operation is added.
     |  
     |  disconnect(...)
     |      disconnect(MPlug source, MPlug dest) -> self
     |      disconnect(MObject sourceNode, MObject sourceAttr,
     |                 MObject destNode,   MObject destAttr) -> self
     |      
     |      Adds an operation to the modifier that breaks a connection between two
     |      plugs in the dependency graph.
     |      Plugs can either be specified with node and attribute MObjects or with
     |      MPlugs.
     |  
     |  doIt(...)
     |      doIt() -> self
     |      
     |      Executes the modifier's operations. If doIt() is called multiple times
     |      in a row, without any intervening calls to undoIt(), then only the
     |      operations which were added since the previous doIt() call will be
     |      executed. If undoIt() has been called then the next call to doIt() will
     |      do all operations.
     |  
     |  linkExtensionAttributeToPlugin(...)
     |      linkExtensionAttributeToPlugin(MObject plugin, MObject attribute) -> self
     |      
     |      The plugin can call this method to indicate that the extension attribute
     |      defines part of the plugin, regardless of the node type to which it
     |      attaches itself. This requirement is used when the plugin is checked to
     |      see if it is in use or if is able to be unloaded or if it is required as
     |      part of a stored file. For compound attributes only the topmost parent
     |      attribute may be passed in and all of its children will be included,
     |      recursively. Thus it's not possible to link a child attribute to a
     |      plugin by itself. Note that the link is established immediately and is
     |      not affected by the modifier's doIt() or undoIt() methods.
     |  
     |  newPlugValue(...)
     |      newPlugValue(MPlug plug, MObject value) -> self
     |      
     |      Adds an operation to the modifier to set the value of a plug, where
     |      value is an MObject data wrapper, such as created by the various
     |      MFn*Data classes.
     |  
     |  newPlugValueBool(...)
     |      newPlugValueBool(MPlug plug, bool value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a bool plug.
     |  
     |  newPlugValueChar(...)
     |      newPlugValueChar(MPlug plug, int value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a char (single
     |      byte signed integer) plug.
     |  
     |  newPlugValueDouble(...)
     |      newPlugValueDouble(MPlug plug, float value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a double-precision
     |      float plug.
     |  
     |  newPlugValueFloat(...)
     |      newPlugValueFloat(MPlug plug, float value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a single-precision
     |      float plug.
     |  
     |  newPlugValueInt(...)
     |      newPlugValueInt(MPlug plug, int value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto an int plug.
     |  
     |  newPlugValueMAngle(...)
     |      newPlugValueMAngle(MPlug plug, MAngle value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto an angle plug.
     |  
     |  newPlugValueMDistance(...)
     |      newPlugValueMDistance(MPlug plug, MDistance value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a distance plug.
     |  
     |  newPlugValueMTime(...)
     |      newPlugValueMTime(MPlug plug, MTime value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a time plug.
     |  
     |  newPlugValueShort(...)
     |      newPlugValueShort(MPlug plug, int value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a short
     |      integer plug.
     |  
     |  newPlugValueString(...)
     |      newPlugValueString(MPlug plug, string value) -> self
     |      
     |      Adds an operation to the modifier to set a value onto a string plug.
     |  
     |  pythonCommandToExecute(...)
     |      pythonCommandToExecute(callable) -> selfpythonCommandToExecute(commandString) -> self
     |      
     |      Adds an operation to the modifier to execute a Python command, which
     |      can be passed as either a Python callable or a string containing the
     |      text of the Python code to be executed. The command should be fully
     |      undoable otherwise unexpected results may occur. If the command
     |      contains no undoable portions whatsoever, the call to doIt() may fail,
     |      but only after executing the command. It is best to use multiple calls
     |      rather than batching multiple commands into a single call to
     |      pythonCommandToExecute(). They will still be undone together, as a
     |      single undo action by the user, but Maya will better be able to
     |      recover if one of the commands fails.
     |  
     |  removeAttribute(...)
     |      removeAttribute(MObject node, MObject attribute) -> self
     |      
     |      Adds an operation to the modifier to remove a dynamic attribute from the
     |      given dependency node. If the attribute is a compound its children will
     |      be removed as well, so only the parent needs to be removed using this
     |      method. The attribute MObject passed in will be set to kNullObj. There
     |      should be no function sets attached to the attribute at the time of the
     |      call as their behaviour may become unpredictable.
     |  
     |  removeExtensionAttribute(...)
     |      removeExtensionAttribute(MNodeClass nodeClass, MObject attribute) -> self
     |      
     |      Adds an operation to the modifier to remove an extension attribute from
     |      the given node class. If the attribute is a compound its children will
     |      be removed as well, so only the parent needs to be removed using this
     |      method. The attribute MObject passed in will be set to kNullObj. There
     |      should be no function sets attached to the attribute at the time of the
     |      call as their behaviour may become unpredictable.
     |  
     |  removeExtensionAttributeIfUnset(...)
     |      removeExtensionAttributeIfUnset(MNodeClass nodeClass,
     |                                      MObject attribute) -> self
     |      
     |      Adds an operation to the modifier to remove an extension attribute from
     |      the given node class, but only if there are no nodes in the graph with
     |      non-default values for this attribute. If the attribute is a compound
     |      its children will be removed as well, so only the parent needs to be
     |      removed using this method. The attribute MObject passed in will be set
     |      to kNullObj. There should be no function sets attached to the attribute
     |      at the time of the call as their behaviour may become unpredictable.
     |  
     |  removeMultiInstance(...)
     |      removeMultiInstance(MPlug plug, bool breakConnections) -> self
     |      
     |      Adds an operation to the modifier to remove an element of a multi (array) plug.
     |  
     |  renameAttribute(...)
     |      renameAttribute(MObject node, MObject attribute, 
     |      string newShortName, string newShortName) -> self
     |      
     |      Adds an operation to the modifer that renames a dynamic attribute on the given dependency node.
     |  
     |  renameNode(...)
     |      renameNode(MObject node, string newName) -> self
     |      
     |      Adds an operation to the modifer to rename a node.
     |  
     |  setNodeLockState(...)
     |      setNodeLockState(MObject node, bool newState) -> self
     |      
     |      Adds an operation to the modifier to set the lockState of a node.
     |  
     |  undoIt(...)
     |      undoIt() -> self
     |      
     |      Undoes all of the operations that have been given to this modifier. It
     |      is only valid to call this method after the doIt() method has been
     |      called.
     |  
     |  unlinkExtensionAttributeFromPlugin(...)
     |      unlinkExtensionAttributeFromPlugin(MObject plugin,
     |                                         MObject attribute) -> self
     |      
     |      The plugin can call this method to indicate that it no longer requires
     |      an extension attribute for its operation. This requirement is used when
     |      the plugin is checked to see if it is in use or if is able to be unloaded
     |      or if it is required as part of a stored file. For compound attributes
     |      only the topmost parent attribute may be passed in and all of its
     |      children will be unlinked, recursively. Thus it's not possible to unlink
     |      a child attribute from a plugin by itself. Note that the link is broken
     |      immediately and is not affected by the modifier's doIt() or undoIt()
     |      methods.
    
    class MDagPath(__builtin__.object)
     |  Path to a DAG node from the top of the DAG.
     |  
     |  Methods defined here:
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  apiType(...)
     |      Returns the type of the object at the end of the path.
     |  
     |  child(...)
     |      Returns the specified child of the object at the end of the path.
     |  
     |  childCount(...)
     |      Returns the number of objects parented directly beneath the object at the end of the path.
     |  
     |  exclusiveMatrix(...)
     |      Returns the matrix for all transforms in the path, excluding the end object.
     |  
     |  exclusiveMatrixInverse(...)
     |      Returns the inverse of exclusiveMatrix().
     |  
     |  extendToShape(...)
     |      Extends the path to the specified shape node parented directly beneath the transform at the current end of the path.
     |  
     |  fullPathName(...)
     |      Returns a string representation of the path from the DAG root to the path's last node.
     |  
     |  getDisplayStatus(...)
     |      Returns the display status for this path.
     |  
     |  getDrawOverrideInfo(...)
     |      Returns the draw override information for this path.
     |  
     |  getPath(...)
     |      Returns the specified sub-path of this path.
     |  
     |  hasFn(...)
     |      Returns True if the object at the end of the path supports the given function set.
     |  
     |  inclusiveMatrix(...)
     |      Returns the matrix for all transforms in the path, including the end object, if it is a transform.
     |  
     |  inclusiveMatrixInverse(...)
     |      Returns the inverse of inclusiveMatrix().
     |  
     |  instanceNumber(...)
     |      Returns the instance number of this path to the object at the end.
     |  
     |  isInstanced(...)
     |      Returns True if the object at the end of the path can be reached by more than one path.
     |  
     |  isTemplated(...)
     |      Returns true if the DAG Node at the end of the path is templated.
     |  
     |  isValid(...)
     |      Returns True if this is a valid path.
     |  
     |  isVisible(...)
     |      Returns true if the DAG Node at the end of the path is visible.
     |  
     |  length(...)
     |      Returns the number of nodes on the path, not including the DAG's root node.
     |  
     |  node(...)
     |      Returns the DAG node at the end of the path.
     |  
     |  numberOfShapesDirectlyBelow(...)
     |      Returns the number of shape nodes parented directly beneath the transform at the end of the path.
     |  
     |  partialPathName(...)
     |      Returns the minimum string representation which will uniquely identify the path.
     |  
     |  pathCount(...)
     |      Returns the number of sub-paths which make up this path.
     |  
     |  pop(...)
     |      Removes objects from the end of the path.
     |  
     |  push(...)
     |      Extends the path to the specified child object, which must be parented directly beneath the object currently at the end of the path.
     |  
     |  set(...)
     |      Replaces the current path held by this object with another.
     |  
     |  transform(...)
     |      Returns the last transform node on the path.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  getAPathTo(...)
     |      Returns the first path found to the given node.
     |  
     |  getAllPathsTo(...)
     |      Returns all paths to the given node.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MDagPathArray(__builtin__.object)
     |  Array of MDagPath values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MDataBlock(__builtin__.object)
     |  Dependency node data block.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  context(...)
     |      context() -> MDGContext
     |      
     |      Returns a copy of the dependecy graph context for which this data block was created. The context is used to specify how a dependency node is going to be evaluated.
     |  
     |  inputArrayValue(...)
     |      inputArrayValue(plug) -> MArrayDataHandle
     |      inputArrayValue(attribute) -> MArrayDataHandle
     |      
     |      Gets an array handle to this data block for the given plug/attribute's data.  This is only valid if the given plug has array data.  The data represented by the handle will be valid.  If the data is from a dirty connection, then the connection will be evaluated.  If no connection is present, then the value that the plug has been set to will be returned.  If the plug has not been set to a particular value, then the default value will be returned.
     |      
     |      * plug (MPlug) - the plug whose data you wish to access
     |       OR
     |      * attribute (MObject) - the attribute whose data you wish to access
     |  
     |  inputValue(...)
     |      inputValue(plug) -> MDataHandle
     |      inputValue(attribute) -> MDataHandle
     |      
     |      Gets a handle to this data block for the given plug/attribute's data.  The data represented by the handle is guaranteed to be valid for reading.  If the data is from a dirty connection, then the connection will be evaluated.  If no connection is present, then the value that the plug has been set to will be returned. If the plug has not been set to a particular value, then the default value will be returned.
     |      
     |      * plug (MPlug) - the plug whose data you wish to access
     |       OR
     |      * attribute (MObject) - the attribute of the node that you want to access
     |  
     |  isClean(...)
     |      isClean(plug) -> bool
     |      isClean(attribute) -> bool
     |      
     |      Queries the dependency graph to see whether the given plug/attribute is clean.
     |      
     |      * plug (MPlug) - the plug that is to be query
     |       OR
     |      * attribute (MObject) - the attribute that is to be query.
     |  
     |  outputArrayValue(...)
     |      outputArrayValue(plug) -> MArrayDataHandle
     |      outputArrayValue(attribute) -> MArrayDataHandle
     |      
     |      Gets a handle to this data block for the given plug/attribute's data.  No dependency graph evaluations will be done, and therefore the data is not guaranteed to be valid (i.e. it may be dirty).  Typically, this method is used to get the handle during compute in order to write output data to it.
     |      
     |      Another usage of this method is to access an input array attribute without evaluating any of its array elements. One can then use MArrayDataHandle.jumpToElement() to get to the particular element of interest, and evaluate its value using MArrayDataHandle.inputValue().
     |      
     |      * plug (MPlug) - the plug whose data you wish to access
     |       OR
     |      * attribute (MObject) - the attribute whose data you wish to access
     |  
     |  outputValue(...)
     |      outputValue(plug) -> MDataHandle
     |      outputValue(attribute) -> MDataHandle
     |      
     |      Gets a handle to this data block for the given plug/attribute's data.  The data is not guaranteed to be valid.  No dependency graph evaluations will be done. Therefore, this handle should be used only for writing.
     |      
     |      * plug (MPlug) - the plug whose data you wish to access
     |       OR
     |      * attribute (MObject) - the attribute of the node that you want to access
     |  
     |  setClean(...)
     |      setClean(plug) -> self
     |      setClean(attribute) -> self
     |      
     |      Tells the dependency graph that the given plug/attribute has been updated and is now clean.  This should be called after the data in the plug has been recalculated from the inputs of the node.
     |      
     |      * plug (MPlug) - the plug that is to be marked clean
     |       OR
     |      * attribute (MObject) - the attribute that is to be marked clean
     |  
     |  setContext(...)
     |      setContext(ctx) -> self
     |      
     |      Set the dependency graph context for this data block. The context is used to specify how a dependency node is going to be evaluated, thus replacing the context for the given datablock. This does not modify the dirty state of the datablock so that they apply to the new context.
     |      
     |      This function should not be used for timed evaluation.
     |      
     |      * ctx (MDGContext) - the dependency graph context
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MDataHandle(__builtin__.object)
     |  Data handle for information contained in a data block.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  acceptedTypeIds(...)
     |      acceptedTypeIds() -> array of MTypeIds
     |      
     |      This method returns an array of MTypeIds.
     |  
     |  asAddr(...)
     |      asAddr() -> long
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asAngle(...)
     |      asAngle() -> MAngle
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asBool(...)
     |      asBool() -> bool
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asChar(...)
     |      asChar() -> int
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asDistance(...)
     |      asDistance() -> MDistance
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asDouble(...)
     |      asDouble() -> float
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asDouble2(...)
     |      asDouble2() -> [float, float]
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asDouble3(...)
     |      asDouble3() -> [float, float, float]
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asFloat(...)
     |      asFloat() -> float
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asFloat2(...)
     |      asFloat2() -> [float, float]
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asFloat3(...)
     |      asFloat3() -> [float, float, float]
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asFloatMatrix(...)
     |      asFloatMatrix() -> MFloatMatrix
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asFloatVector(...)
     |      asFloatVector() -> MFloatVector
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asGenericBool(...)
     |      asGenericBool() -> bool
     |      
     |      Returns the generic data represented by this handle in the data block.
     |  
     |  asGenericChar(...)
     |      asGenericChar() -> int
     |      
     |      Returns the generic data represented by this handle in the data block.
     |  
     |  asGenericDouble(...)
     |      asGenericDouble() -> float
     |      
     |      Returns the generic data represented by this handle in the data block.
     |  
     |  asGenericFloat(...)
     |      asGenericFloat() -> float
     |      
     |      Returns the generic data represented by this handle in the data block.
     |  
     |  asGenericInt(...)
     |      asGenericInt() -> int
     |      
     |      Returns the generic data represented by this handle in the data block.
     |  
     |  asGenericShort(...)
     |      asGenericShort() -> int
     |      
     |      Returns the generic data represented by this handle in the data block.
     |  
     |  asInt(...)
     |      asInt() -> int
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asInt2(...)
     |      asInt2() -> [int, int]
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asInt3(...)
     |      asInt3() -> [int, int, int]
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asMatrix(...)
     |      asMatrix() -> MMatrix
     |      
     |      Returns the data represented by this handle in the data block.This method is only valid for attributes created using the MFnMatrixAttribute function set.
     |  
     |  asMesh(...)
     |      asMesh() -> MObject
     |      
     |      Returns the data represented by this handle in the data block.  The object returned by this call may be used directly with the mesh function set and iterators.  Even though this method does not return a reference to an MObject, modifications to the MObject instance will update the contents of the handle in the data block.  The method MDataHandle.setClean() should be called after the data block has been modified.
     |      
     |      The surface returned by this method will be in local space even if the connection is supplying world space geometry.  This occurs mostly for efficiency reasons.  In the case of a world space geometry connection, the MObject returned by this method will also contain the world space transformation matrix. This means that world space operations may be performed on this object using the mesh function set and iterators.
     |      
     |      It is possible to get the matrix that defines the local to world transformation for this geometry using the MDataHandle.geometryTransformMatrix() method.
     |  
     |  asMeshTransformed(...)
     |      asMeshTransformed() -> MObject
     |      
     |      Returns the data represented by this handle in the data block.  The object returned by this call may be used directly with the mesh function set (MFnMesh) or any of the mesh iterators.
     |      
     |      If the incoming mesh comes with world space transformation data, then it will be applied to the data that is returned.  In other words, the mesh that is returned will be the mesh as it exists in world space.
     |      
     |      The mesh that is returned from this method should not be modified.  This method is only provided to make it easier to take world space geometry as input.
     |  
     |  asNurbsCurve(...)
     |      asNurbsCurve() -> MObject
     |      
     |      Returns the data represented by this handle in the data block.  The object returned by this call may be used directly with the nurbs curve function set and iterator.  Even though this method does not return a reference to an MObject, modifications to the MObject instance will update the contents of the handle in the data block.  The method MDataHandle.setClean() should be called after the data block has been modified.
     |      
     |      The curve returned by this method will be in local space even if the connection is supplying world space geometry.  This occurs mostly for efficiency reasons.  In the case of a world space geometry connection, the MObject returned by this method will also contain the world space transformation matrix. This means that world space operations may be performed on this object using the nurbs curve function set and iterator.
     |      
     |      It is possible to get the matrix that defines the local to world transformation for this geometry using the MDataHandle.geometryTransformMatrix() method.
     |  
     |  asNurbsCurveTransformed(...)
     |      asNurbsCurveTransformed() -> MObject
     |      
     |      Returns the data represented by this handle in the data block.  The object returned by this call may be used directly with the nurbs curve function set (MFnNurbsCurve) or the nurbs curve CV iterator (MItCurveCV).
     |      
     |      If the incoming curve comes with world space transformation data, then it will be applied to the data that is returned.  In other words, the curve that is returned will be the curve as it exists in world space.
     |      
     |      The curve that is returned from this method should not be modified.  This method is only provided to make it easier to take world space geometry as input.
     |  
     |  asNurbsSurface(...)
     |      asNurbsSurface() -> MObject
     |      
     |      Returns the data represented by this handle in the data block.  The object returned by this call may be used directly with the nurbs surface function set and iterator.  Even though this method does not return a reference to an MObject, modifications to the MObject instance will update the contents of the handle in the data block.  The method MDataHandle.setClean() should be called after the data block has been modified.
     |      
     |      The surface returned by this method will be in local space even if the connection is supplying world space geometry.  This occurs mostly for efficiency reasons.  In the case of a world space geometry connection, the MObject returned by this method will also contain the world space transformation matrix.  This means that world space operations may be performed on this object using the nurbs surface function set and iterator.
     |      
     |      It is possible to get the matrix that defines the local to world transformation for this geometry using the MDataHandle.geometryTransformMatrix() method.
     |  
     |  asNurbsSurfaceTransformed(...)
     |      asNurbsSurfaceTransformed() -> MObject
     |      
     |      Returns the data represented by this handle in the data block.  The object returned by this call may be used directly with the nurbs surface function set (MFnNurbsSurface) or the nurbs surface CV iterator (MItSurfaceCV).
     |      
     |      If the incoming surface comes with world space transformation data, then it will be applied to the data that is returned.  In other words, the surface that is returned will be the surface as it exists in world space.
     |      
     |      The surface that is returned from this method should not be modified.  This method is only provided to make it easier to take world space geometry as input.
     |  
     |  asPluginData(...)
     |      asPluginData() -> MPxData
     |      
     |      Returns the data represented by this handle in the data block.  The object is returned as plugin data.  This should be used to access data types defined by plugins.
     |  
     |  asShort(...)
     |      asShort() -> int
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asShort2(...)
     |      asShort2() -> [int, int]
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asShort3(...)
     |      asShort3() -> [int, int, int]
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asString(...)
     |      asString() -> MString
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asSubdSurface(...)
     |      asSubdSurface() -> MObject
     |      
     |      Returns the data represented by this handle in the data block.  The object returned by this call may be used directly with the subdivision surface function set and iterator.  Even though this method does not return a reference to an MObject, modifications to the MObject instance will update the contents of the handle in the data block.  The method MDataHandle.setClean() should be called after the data block has been modified.
     |      
     |      The subdivision surface returned by this method will be in local space even if the connection is supplying world space geometry.  This occurs mostly for efficiency reasons.  In the case of a world space geometry connection, the MObject returned by this method will also contain the world space   transformation matrix. This means that world space operations may be performed on this object using the subdivision surface function set and iterator.
     |      
     |      It is possible to get the matrix that defines the local to world transformation for this geometry using the MDataHandle.geometryTransformMatrix() method.
     |  
     |  asSubdSurfaceTransformed(...)
     |      asSubdSurfaceTransformed() -> MObject
     |      
     |      Returns the data represented by this handle in the data block.  The object returned by this call may be used directly with the subdivision surface function set (MFnSubdSurface) or the subdivision surface iterators (MItSubdVertex, MItSubdFace, MItSubdEdge).
     |      
     |      If the incoming surface comes with world space transformation data, then it will be applied to the data that is returned.  In other words, the surface that is returned will be the surface as it exists in world space.
     |      
     |      The surface that is returned from this method should not be modified.  This method is only provided to make it easier to take world space geometry as input.
     |  
     |  asTime(...)
     |      asTime() -> MTime
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asUChar(...)
     |      asUChar() -> int
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  asVector(...)
     |      asVector() -> MVector
     |      
     |      Returns the data represented by this handle in the data block.
     |  
     |  child(...)
     |      child(MPlug) -> MDataHandle
     |      child(MObject) -> MDataHandle
     |      
     |      Get a handle to a child of this handle.  This is used if you have a handle to a compound attribute.
     |  
     |  copy(...)
     |      copy(src) -> self
     |      
     |      Copies the attribute from the src attribute to the attribute referenced by this handle.  This is the only method which can completely copy a compound attribute from one handle to another.  The construct outputHandle.set (inputHandle.data()) will not work for compound or multi attributes.
     |      
     |      * src (MDataHandle) - the handle to the attribute to copy.
     |  
     |  copyWritable(...)
     |      copyWritable(src) -> self
     |      
     |      Copies the attribute from the <i>src</i> attribute to the attribute referenced by this handle.  When the copy is made it ensures that the data in this handle is writable. That is, if the src handle has a writable copy of the data then it will be duplicated, otherwise this handle will claim the writer status for the data.
     |      
     |      * src (MDataHandle) - the handle to the attribute to copy.
     |  
     |  data(...)
     |      data() -> MObject
     |      
     |      Returns the data object from this handle.  The object returned should be used with the appropriate data function set.  This method is not valid for simple numeric types.
     |  
     |  datablock(...)
     |      datablock() -> MDataBlock
     |      
     |      Returns a reference to the datablock assigned to this data handle.
     |  
     |  geometryTransformMatrix(...)
     |      geometryTransformMatrix() -> MMatrix
     |      
     |      This method returns a reference to the local-to-world transformation matrix that can accompany a geometry data object.  Only use this method on handles to geometry data (curves, surfaces, and meshes).
     |      
     |      If no local-to-world transformation information has been provided then this will be an identity matrix.
     |  
     |  isGeneric(...)
     |      isGeneric() -> [bool, isNumeric, isNull]
     |      
     |      Returns True if this handle is for generic data.  There are 2 forms of generic data.  The first is for simple data and is used if the isNumeric parameter returns True.  In this case, the asGeneric*() and setGeneric*() methods of this class are used to query and set values.
     |      The second form of generic data is for more complex attribute types.  As a result the type of the object must be checked and an appropriate attribute function set initialized with the object.Returns isNumeric True if this handle is for simple generic numeric data.
     |      Returns isNull True if this handle is not set.
     |  
     |  isNumeric(...)
     |      isNumeric() -> bool
     |      
     |      Returns True if this handle is for simple numeric data. That means that the numeric data is directly accessible through the non-generic as*() and set*() methods of this handle. For example, depending on handle initialization, the asBool() may be called but the asGenericBool() should not be called.
     |  
     |  numericType(...)
     |      numericType() -> int
     |      
     |      Returns the type of data represented by this handle.  This method is only valid for data handles of simple numeric types.
     |  
     |  set2Double(...)
     |      set2Double(float, float) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  set2Float(...)
     |      set2Float(float, float) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  set2Int(...)
     |      set2Int(int, int) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  set2Short(...)
     |      set2Short(int, int) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  set3Double(...)
     |      set3Double(float, float, float) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  set3Float(...)
     |      set3Float(float, float, float) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  set3Int(...)
     |      set3Int(int, int, int) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  set3Short(...)
     |      set3Short(int, int, int) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setBool(...)
     |      setBool(bool) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setChar(...)
     |      setChar(int) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setClean(...)
     |      setClean() -> self
     |      
     |      Marks the data that is represented by this handle as being clean.  This should be done after recalculating the data from the inputs.
     |  
     |  setDouble(...)
     |      setDouble(float) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setFloat(...)
     |      setFloat(float) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setGenericBool(...)
     |      setGenericBool(bool, force) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setGenericChar(...)
     |      setGenericChar(int, force) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setGenericDouble(...)
     |      setGenericDouble(float, force) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setGenericFloat(...)
     |      setGenericFloat(float, force) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setGenericInt(...)
     |      setGenericInt(int, force) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setGenericShort(...)
     |      setGenericShort(int, force) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setInt(...)
     |      setInt(int) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setMAngle(...)
     |      setMAngle(MAngle) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setMDistance(...)
     |      setMDistance(MDistance) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setMFloatMatrix(...)
     |      setMFloatMatrix(MFloatMatrix) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setMFloatVector(...)
     |      setMFloatVector(MFloatVector) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setMMatrix(...)
     |      setMMatrix(MMatrix) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setMObject(...)
     |      setMObject(MObject) -> self
     |      
     |      Set the data that this handle represents in the data block.  This method assumes that the MObject is a dependency graph data object.  These objects can be created using the appropriate MFn..Data function set.
     |      Note that this method cannot be used to copy compound or multi attributes from one handle to another via the construct outputHandle.set (inputHandle.data()).
     |      To copy these user defined attributes, the method MDataHandle.copy() must be used.
     |  
     |  setMPxData(...)
     |      setMPxData(MPxData) -> self
     |      
     |      Set the data that this handle represents in the data block.  This method takes a pointer to a user defined data object.  The data block will become the new owner of the data object that you pass in.  Do not delete it.
     |  
     |  setMTime(...)
     |      setMTime(MTime) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setMVector(...)
     |      setMVector(MVector) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setShort(...)
     |      setShort(int) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  setString(...)
     |      setString(string) -> self
     |      
     |      Set the data that this handle represents in the data block.
     |  
     |  type(...)
     |      type() -> int
     |      
     |      Returns the type of data represented by this handle.
     |  
     |  typeId(...)
     |      typeId() -> MTypeId
     |      
     |      Returns the type of data represented by this handle as a type id.  A type id is a four character code that is used to identify the data type.
     |      If no data exists for this handle, the type id will be 0x0.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MDistance(__builtin__.object)
     |  Manipulate distance data.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  asCentimeters(...)
     |      Return the distance value, converted to centimeters.
     |  
     |  asFeet(...)
     |      Return the distance value, converted to feet.
     |  
     |  asInches(...)
     |      Return the distance value, converted to inches.
     |  
     |  asKilometers(...)
     |      Return the distance value, converted to kilometers.
     |  
     |  asMeters(...)
     |      Return the distance value, converted to meters.
     |  
     |  asMiles(...)
     |      Return the distance value, converted to miles.
     |  
     |  asMillimeters(...)
     |      Return the distance value, converted to millimeters.
     |  
     |  asUnits(...)
     |      Return the distance value, converted to the specified units.
     |  
     |  asYards(...)
     |      Return the distance value, converted to yards.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  internalToUI(...)
     |      Convert a value from Maya's internal units to the units used in the UI.
     |  
     |  internalUnit(...)
     |      Return the distance unit used internally by Maya.
     |  
     |  setUIUnit(...)
     |      Change the units used to display distances in Maya's UI.
     |  
     |  uiToInternal(...)
     |      Convert a value from the units used in the UI to Maya's internal units.
     |  
     |  uiUnit(...)
     |      Return the units used to display distances in Maya's UI.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  unit
     |      Distance units currently in use.
     |  
     |  value
     |      Value of the distance in the current units.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kCentimeters = 6
     |  
     |  kFeet = 2
     |  
     |  kInches = 1
     |  
     |  kInvalid = 0
     |  
     |  kKilometers = 7
     |  
     |  kLast = 9
     |  
     |  kMeters = 8
     |  
     |  kMiles = 4
     |  
     |  kMillimeters = 5
     |  
     |  kYards = 3
    
    class MDoubleArray(__builtin__.object)
     |  Array of double values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MEulerRotation(__builtin__.object)
     |  X, Y and Z rotations, applied in a specified order.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __isub__(...)
     |      x.__isub__(y) <==> x-=y
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __neg__(...)
     |      x.__neg__() <==> -x
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  alternateSolution(...)
     |      Returns an equivalent rotation which is not simply a multiple.
     |  
     |  asMatrix(...)
     |      Returns the rotation as an equivalent matrix.
     |  
     |  asQuaternion(...)
     |      Returns the rotation as an equivalent quaternion.
     |  
     |  asVector(...)
     |      Returns the X, Y and Z rotations as a vector.
     |  
     |  bound(...)
     |      Returns a new MEulerRotation having this rotation, but with each rotation component bound within +/- PI.
     |  
     |  boundIt(...)
     |      In-place bounding of each rotation component to lie wthin +/- PI.
     |  
     |  closestCut(...)
     |      Returns the rotation which is full spin multiples of this one and comes closest to target.
     |  
     |  closestSolution(...)
     |      Returns the equivalent rotation which comes closest to a target.
     |  
     |  incrementalRotateBy(...)
     |      Increase this rotation by a given angle around the specified axis. The update is done in series of small increments to avoid flipping.
     |  
     |  inverse(...)
     |      Returns a new MEulerRotation containing the inverse rotation of this one and reversed rotation order.
     |  
     |  invertIt(...)
     |      In-place inversion of the rotation. Rotation order is also reversed.
     |  
     |  isEquivalent(...)
     |      Returns true if this rotation has the same order as another and their X, Y and Z components are within a tolerance of each other.
     |  
     |  isZero(...)
     |      Returns true if the X, Y and Z components are each within a tolerance of 0.0.
     |  
     |  reorder(...)
     |      Returns a new MEulerRotation having this rotation, reordered to use the given rotation order.
     |  
     |  reorderIt(...)
     |      In-place reordering to use the given rotation order.
     |  
     |  setToAlternateSolution(...)
     |      Replace this rotation with an alternate solution.
     |  
     |  setToClosestCut(...)
     |      Replace this rotation with the closest cut to a target.
     |  
     |  setToClosestSolution(...)
     |      Replace this rotation with the closest solution to a target.
     |  
     |  setValue(...)
     |      Set the rotation.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  computeAlternateSolution(...)
     |      Returns an equivalent rotation which is not simply a multiple.
     |  
     |  computeBound(...)
     |      Returns an equivalent rotation with each rotation component bound within +/- PI.
     |  
     |  computeClosestCut(...)
     |      Returns the rotation which is full spin multiples of the src and comes closest to target.
     |  
     |  computeClosestSolution(...)
     |      Returns the equivalent rotation which comes closest to a target.
     |  
     |  decompose(...)
     |      Extracts a rotation from a matrix.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  order
     |      Rotation order
     |  
     |  x
     |      X rotation in radians
     |  
     |  y
     |      Y rotation in radians
     |  
     |  z
     |      Z rotation in radians
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kIdentity = maya.api.OpenMaya.MEulerRotation(0, 0, 0, maya.api.OpenMay...
     |  
     |  kTolerance = 1e-10
     |  
     |  kXYZ = 0
     |  
     |  kXZY = 3
     |  
     |  kYXZ = 4
     |  
     |  kYZX = 1
     |  
     |  kZXY = 2
     |  
     |  kZYX = 5
    
    class MEvaluationNode(__builtin__.object)
     |  A class providing access to Evaluation Manager node information.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  datablock(...)
     |      Returns the datablock for this node.
     |  
     |  dependencyNode(...)
     |      Returns the dependency node this evaluation node represents.
     |  
     |  dirtyPlug(...)
     |      Returns the top-most plug for the specified attribute if the attribute has dirty plugs. This call should be made from MPxNode::preEvaluation() and MPxNode::postEvaluation() to access a networked plug which is going to be dirty and computed.
     |  
     |  dirtyPlugExists(...)
     |      Returns true if the specified attribute has a dirty plug. This call should be made from MPxNode::preEvaluation() and MPxNode::postEvaluation() to verify which plugs are going to be dirty and computed.
     |  
     |  iterator(...)
     |      Returns an iterator at the beginning of the dirty plug list.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MEvaluationNodeIterator(__builtin__.object)
     |  A class providing access to the Evaluation Manager node dirty plug list.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  isDone(...)
     |      Checks to see if the iterator has reached the end of the iteration.
     |  
     |  next(...)
     |      Advances the iterator to the next position in the dirty plug list.
     |  
     |  plug(...)
     |      Returns the dirty plug at the current iterator position. Returns an empty plug if the iterator is illegal.
     |  
     |  reset(...)
     |      Resets the iterator to the first position in the dirty plug list.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MEventMessage(MMessage)
     |  Class used to register callbacks for event related messages.
     |  
     |  Method resolution order:
     |      MEventMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addEventCallback(...)
     |      addEventCallback(eventName, function, clientData=None) -> id
     |      
     |      This method registers a callback for event occurred messages.
     |      The callback function will be passed the any client data that
     |      was provided when the callback was registered.
     |      
     |       * eventName (string) - the event to register the 
     |      callback for
     |       * function - callable which will be passed the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  getEventNames(...)
     |      getEventNames() -> (string, string, ...)
     |      
     |      This method returns the list of available event names.
     |      
     |       * return: tuple of available event names.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MExternalContentInfoTable(__builtin__.object)
     |  This is a table of all the external content for a given node.
     |  
     |  Methods defined here:
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  addResolvedEntry(...)
     |      addResolvedEntry(key, unresolvedLocation, resolvedLocation, contextNodeFullName, roles) -> self
     |      
     |      Add an entry in the table.
     |      
     |      * key (string) - An arbitrary string defined by the caller. This will typically be an attribute name for situations where the content location is stored verbatim in a plug's value.
     |      * unresolvedLocation (string) - Path as stored in the node (i.e. without any token replacement performed).
     |      * resolvedLocation (string) - Full path to the content if it exists at the time of creation of this object.
     |      * contextNodeFullName (string) - The fullname of the URI owner (node) if it applies, an empty string otherwise.
     |      * roles (list of strings) - An enumeration of all roles this content plays in the context of the node. The actual strings are not rigidly defined as of this writing. This is mostly for offline browsing of the content info: to assist in sorting content by role.  A better content type system may be introduced later on to        formalize this.
     |  
     |  addUnresolvedEntry(...)
     |      addUnresolvedEntry(key, unresolvedLocation, contextNodeFullName, roles=None) -> self
     |      
     |      Add an entry in the table. The resolved location will be inferred from the application's built-in file resolving for the specified file type. This will automatically add entries into the roles vector that correspond to the search rules for this file type.
     |      
     |      * key (string) - See documentation of MExternalContentInfoTable.addResolvedEntry().
     |      * unresolvedLocation (string) - See documentation of MExternalContentInfoTable.addResolvedEntry().
     |      * contextNodeFullName (string) - See documentation of MExternalContentInfoTable.addResolvedEntry().
     |      * roles (list of strings) - See documentation of MExternalContentInfoTable.addResolvedEntry().
     |  
     |  getEntry(...)
     |      getEntry(index) -> [key, unresolvedLocation, resolvedLocation, contextNodeFullName, roles]
     |      
     |      Retrieves external content entry based on its position in the table.
     |      
     |      * index (unsigned int) - Position of the entry to retrieve information from.
     |  
     |  getInfo(...)
     |      getInfo(key) -> [unresolvedLocation, resolvedLocation, contextNodeFullName, roles]
     |      
     |      Retrieves external content information based on its key.
     |      
     |      * key (string) - See documentation of MExternalContentInfoTable.addResolvedEntry().
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MExternalContentLocationTable(__builtin__.object)
     |  This is a table of the all the external content locations for a given node.
     |  
     |  Methods defined here:
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  addEntry(...)
     |      addEntry(key, location) -> self
     |      
     |      Adds an external content location and its key to the table.
     |      
     |      * key (string) - An arbitrary string defined by the node. This will typically be an attribute name for situations where the content location is stored verbatim in a plug's value.* location (string) - Full path to the content referenced by the key.
     |  
     |  getEntry(...)
     |      getEntry(index) -> [key, location]
     |      
     |      Retrieves external content entry based on its position in the table.
     |      
     |      * index (unsigned int) - Position of the entry to retrieve information from.
     |  
     |  getLocation(...)
     |      getLocation(key) -> string
     |      
     |      Retrieves an entry's location based on the associated key.
     |      
     |      * key (string) - See documentation of MExternalContentLocationTable.addEntry().
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MFileObject(__builtin__.object)
     |  Manipulate filenames and search paths.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  copy(...)
     |      copy(source) -> self
     |      
     |      Copy data from source file object.
     |      
     |      * source (MFileObject) - The source file object to copy from
     |  
     |  exists(...)
     |      exists(index=None) -> bool
     |      
     |      Checks to see if the file exists and is readable.
     |      If index is None tests for the fullName file, else tests the file constructed from the indicated portion of the path element and filename element.
     |      
     |      * index (int) - Index of the path element to be used in searching for the file.
     |  
     |  expandedFullName(...)
     |      expandedFullName() -> string
     |      
     |      Returns the pathname of a file constructed from the unresolved file object values. The file name will consist of the the expanded raw path and raw name elements.
     |      All variables in the path element are expanded, and the first path (the part before the first separator (':') in the path) is prepended to the filename element to construct the fullName.
     |      
     |      After expanding environment variables Maya may perform additional modifications to the full file name in order to resolve it to a valid location on disk. This resolved full file name can be accessed through resolvedFullName().
     |  
     |  expandedPath(...)
     |      expandedPath() -> string
     |      
     |      Returns the raw path element of the unresolved file object with all environment variables expanded. In the case that the path expands to multiple paths, the first expanded path will be returned.
     |      
     |      After expanding environment variables Maya may perform additional modifications to the path in order to resolve it to a valid location on disk. This resolved path can be accessed through resolvedPath().
     |  
     |  fullName(...)
     |      fullName(index) -> string
     |      
     |      Returns the pathname of a file constructed from the indicated portion of the path element and filename element.
     |      All variables in the path element are expanded, and the indicated path portion is prepended to the filename element to construct the fullName.
     |      
     |      * index (int) - the index of the desired path portion.
     |  
     |  isSet(...)
     |      isSet() -> bool
     |      
     |      Checks to see if both file and path elements of the file object have been set.
     |  
     |  overrideResolvedFullName(...)
     |      overrideResolvedFullName(fullFileName, reresolveType=False) -> self
     |      
     |      Normally when a raw file name is set, Maya will perform a series of operations on it in an attempt to resolve it to a valid file name. This final resolved file name can be accessed through the resolvedName(), resolvedPath(), and resolvedFullFileName() methods and can be quite different from the originally specified raw file name.
     |      
     |      This method will override the normal Maya path resolution process and explicitly set the resolved file name. This path does not have to be a valid file path, but if any '/' characters appear in the given name then the resolved path element of the file object is set to everything in name up to, but not including the last '/'. The resolved filename is set to the part of name after the final '/'.
     |      
     |      Once the resolved file name is set, it is only guaranteed to be retained in the file object so long as the raw file path is not updated. Once the rawPath, rawName or rawFullName are set, the normal Maya path resolution process will be re-invoked and the resolved path and filename will be updated.
     |      
     |      - fullFileName (string) - the string used to override the path and filename.- reresolveType (bool) - if Maya should re-resolve the file type/translator.
     |  
     |  path(...)
     |      path(index) -> string
     |      
     |      Returns the indicated portion of the path element of the file object.  All variables in the path element are expanded, and the portion indicated by the argument is extracted and returned.
     |      
     |      * index (int) - the index of the desired path portion.
     |  
     |  pathCount(...)
     |      pathCount() -> int
     |      
     |      Returns the number of paths in the path element of the file object.
     |      This will be equal to one more than the number of ':' characters specified of the rawPath attribute.
     |  
     |  rawFullName(...)
     |      rawFullName() -> string
     |      
     |      Returns the unresolved full file name (path plus filename) of the MFileObject with all environment variables unexpanded.
     |      
     |      This method differs from expandedFullName() in that it returns the unexpanded instead of expanded values.
     |  
     |  rawName(...)
     |      rawName() -> string
     |      
     |      Returns the unresolved filename element of the MFileObject.
     |  
     |  rawPath(...)
     |      rawPath() -> string
     |      
     |      Returns the path element of the MFileObject with all environment variables unexpanded.
     |  
     |  rawURI(...)
     |      rawURI() -> MURI
     |      
     |      Returns the unresolved URI of the MFileObject, if any.
     |      
     |      This will be empty if the MFileObject was not resolved from a URI.
     |  
     |  resolvedFullName(...)
     |      resolvedFullName() -> string
     |      
     |      Returns the first pathname of a file constructed from the path and filename elements.  All variables in the path element are expanded, and the first path (the part before the first ':' in the path) is prepended to the filename element. After expanding all environment     variables Maya may then perform additional modifications, such  as prepending directories to a relative path name, in order to resolve the path to a valid location on disk.
     |      
     |      The resolution is performed using the ResolveMethod of the file object.
     |      By default, this will be set to kNone. While this is suitable in many situations, it may not be appropriate if the file is expected to exist.
     |      Refer to getResolvedFullNameAndExistsStatus() for more information about how the  resolution mode is used.
     |      
     |      Failure to resolve the path according to the specifications of the file object will result in an empty return value.
     |  
     |  resolvedName(...)
     |      resolvedName() -> string
     |      
     |      Returns the resolved filename element of the file object.
     |  
     |  resolvedPath(...)
     |      resolvedPath() -> string
     |      
     |      Returns the resolved path element of the file object. In order to build the resolved path, Maya first expands all environment variables and then may perform additional modifications, such as prepending directories to a relative path name, in order to resolve the path to a valid location on disk.
     |  
     |  setRawFullName(...)
     |      setRawFullName(fullFileName) -> self
     |      
     |      This method combines the functions of the setRawName and setRawPath methods in that it sets both the path and filename from the given name.
     |      
     |      If any '/' characters appear in the given name then the path element of the MFileObject is set to everything in name up to, but not including the last '/'.  The filename is set to the part of name after the final '/'.
     |      
     |      If no '/' characters appear in the given name then the path element is set to "." and the filename is set to the given name.
     |      
     |      Note that if the specified fullFileName is relative, contains environment variables, or does not exist, the full names returned by resolvedFullName() and expandedFullName() may not match the fullFileName. See the description of resolvedFullName() and expandedFullName() for more information.
     |      
     |      Also note that for URI-based file paths (e.g. "arrow:uri_path_to_file"),  setRawFullName will not call setRawName and setRawPath (raw name and path will remain empty). Use resolvedName and resolvedPath to retrieve the resolved file path, or rawFullName to retrieve the unresolved file path.
     |      
     |      * fullFileName (string) - The string used to initialize the path and filename.
     |  
     |  setRawName(...)
     |      setRawName(fileName) -> self
     |      
     |      Set the unresolved filename element of the MFileObject instance.  This name should not contain any '/' characters, it should indicate simply the name of a file.  The directories in which this name will be searched for are specified by setRawPath.
     |      
     |      * fileName (string) - The filename to set.
     |  
     |  setRawPath(...)
     |      setRawPath(pathName) -> self
     |      
     |      Set the unresolved path element of the MFileObject instance.  This should contain a list of directories, each separated by a single ':' character.  The pathnames can contain Unix environment variables in the form $VARNAME.  These will be expanded when paths to actual filenames are constructed.
     |      
     |      Note that if the specified pathName is relative, contains environment variables, or does not exist, the paths returned by resolvedPath() and expandedPath() may not match the rawPath. See the description of resolvedPath() and expandedPath() for more information.
     |      
     |      * pathName (string) - The path string.
     |  
     |  setRawURI(...)
     |      setRawURI(uri) -> self
     |      
     |      Set the unresolved URI of the MFileObject instance.
     |      
     |      * uri (string or MURI) - The unresolved URI.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  getResolvedFullName(...)
     |      getResolvedFullName(rawFullName) -> string
     |      
     |      Returns the full path to the resolved file, or an empty string if the resolution was unsuccessful.
     |      
     |      * rawFullName (string) - The fully specified unresolved path.
     |  
     |  getResolvedFullNameAndExistsStatus(...)
     |      getResolvedFullNameAndExistsStatus(rawFullName, method=kNone) -> (string, bool)
     |      
     |      Returns the full path to the resolved file, or an empty string if the resolution was unsuccessful, and a boolean that indicate if the resolved path exists or not.
     |      
     |      * rawFullName (string) - The fully specified unresolved path
     |      * resolveMethod (int) - To resolve method to use, default is kNone.
     |      
     |      Valid resolve methods:
     |        kNone                    The resolved path is simply the resulting path after converting
     |                                 the raw value to its expanded form. If the path contains environment variables,
     |                                 the resolved value will be the first path returned from their expansion.
     |                                 Relative paths will be considered to be relative to root of the current project.
     |                                 The resolution algorithm will not check if this file actually exists - the
     |                                 resolution will be considered successful whether it exists or not.
     |                                 With this mode, the resolver will not continue on to attempt to resolve 
     |                                 using any other resolve method.
     |                                 The user must explicitly check MFileObject.exists() to determine if it is an 
     |                                 existing path.
     |        kExact                   Checks if expanded paths exist. If paths are relative, assume it's relative to
     |                                 the current workspace (so check workspace current directory, file-rule directory and
     |                                 root directory).
     |        kDirMap                  Checks path against mappings defined with the dirmap command. Only for absolute paths
     |        kReferenceMappings       Check path against any previously re-mapped reference locations. If kRelative/kBaseName
     |                                 are set, then even if we have an absolute path, convert to relative and/or baseName and
     |                                 look for them in directories provided to the missing reference dialog.
     |        kRelative                Strips away the project directory, and treats path as relative. Relative to the current
     |                                 workspace, that is. So look in the workspace current directory, file-rules directory
     |                                 and the root directory.
     |        kBaseName                Strips away everything but the base file name and look in the current workspace,
     |        kInputFile               This mode is the default on file open and import, and is suitable for 
     |                                 files that are to be used as input files.  The file will be checked for 
     |                                 existence.
     |                                 Combination of kExact, kDirMap, kRelative and kBaseName.
     |        kInputReference          This mode is the default on file reference. In addition to the checks done for
     |                                 a regular input file, it will also check the reference mappings. 
     |                                 Combination of kInputFile and kReferenceMappings.
     |        kStrict                  Combination of kExact and kDirMap.
     |  
     |  isAbsolutePath(...)
     |      isAbsolutePath(fileName) -> bool
     |      
     |      Checks a file path string and determines if it represents an absolute file path. An absolute path can uniquely identify a directory or file.
     |      
     |      * fileName (string) - the string used to check if it is absolute
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  resolveMethod
     |      The file-path resolution steps this file object will use.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kBaseName = 32
     |  
     |  kDirMap = 4
     |  
     |  kExact = 2
     |  
     |  kInputFile = 54
     |  
     |  kInputReference = 62
     |  
     |  kNone = 1
     |  
     |  kReferenceMappings = 8
     |  
     |  kRelative = 16
     |  
     |  kStrict = 6
    
    class MFloatArray(__builtin__.object)
     |  Array of float values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MFloatMatrix(__builtin__.object)
     |  4x4 matrix with single-precision elements.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __isub__(...)
     |      x.__isub__(y) <==> x-=y
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  adjoint(...)
     |      Returns a new matrix containing this matrix's adjoint.
     |  
     |  det3x3(...)
     |      Returns the determinant of the 3x3 matrix formed by the first 3 elements of the first 3 rows of this matrix.
     |  
     |  det4x4(...)
     |      Returns this matrix's determinant.
     |  
     |  getElement(...)
     |      Returns the matrix element for the specified row and column.
     |  
     |  homogenize(...)
     |      Returns a new matrix containing the homogenized version of this matrix.
     |  
     |  inverse(...)
     |      Returns a new matrix containing this matrix's inverse.
     |  
     |  isEquivalent(...)
     |      Test for equivalence of two matrices, within a tolerance.
     |  
     |  setElement(...)
     |      Sets the matrix element for the specified row and column.
     |  
     |  setToIdentity(...)
     |      Sets this matrix to the identity.
     |  
     |  setToProduct(...)
     |      Sets this matrix to the product of the two matrices passed in.
     |  
     |  transpose(...)
     |      Returns a new matrix containing this matrix's transpose.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kTolerance = 9.999999747378752e-06
    
    class MFloatPoint(__builtin__.object)
     |  3D point with single-precision coordinates.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __div__(...)
     |      x.__div__(y) <==> x/y
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __isub__(...)
     |      x.__isub__(y) <==> x-=y
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __rdiv__(...)
     |      x.__rdiv__(y) <==> y/x
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  cartesianize(...)
     |      Convert point to cartesian form.
     |  
     |  distanceTo(...)
     |      Return distance between this point and another.
     |  
     |  homogenize(...)
     |      Convert point to homogenous form.
     |  
     |  isEquivalent(...)
     |      Test for equivalence of two points, within a tolerance.
     |  
     |  rationalize(...)
     |      Convert point to rational form.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  w
     |      W coordinate
     |  
     |  x
     |      X coordinate
     |  
     |  y
     |      Y coordinate
     |  
     |  z
     |      Z coordinate
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kOrigin = maya.api.OpenMaya.MFloatPoint(0, 0, 0, 1)
     |  
     |  kTolerance = 9.999999747378752e-06
    
    class MFloatPointArray(__builtin__.object)
     |  Array of MFloatPoint values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MFloatVector(__builtin__.object)
     |  3D vector with single-precision coordinates.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __div__(...)
     |      x.__div__(y) <==> x/y
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __idiv__(...)
     |      x.__idiv__(y) <==> x/=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __isub__(...)
     |      x.__isub__(y) <==> x-=y
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __neg__(...)
     |      x.__neg__() <==> -x
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __rdiv__(...)
     |      x.__rdiv__(y) <==> y/x
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __rxor__(...)
     |      x.__rxor__(y) <==> y^x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  __xor__(...)
     |      x.__xor__(y) <==> x^y
     |  
     |  angle(...)
     |      Returns the angle, in radians, between this vector and another.
     |  
     |  isEquivalent(...)
     |      Returns True if this vector and another are within a given tolerance of being equal.
     |  
     |  isParallel(...)
     |      Returns True if this vector and another are within the given tolerance of being parallel.
     |  
     |  length(...)
     |      Returns the magnitude of this vector.
     |  
     |  normal(...)
     |      Returns a new vector containing the normalized version of this one.
     |  
     |  normalize(...)
     |      Normalizes this vector in-place and returns a new reference to it.
     |  
     |  transformAsNormal(...)
     |      Returns a new vector which is calculated by postmultiplying this vector by the transpose of the given matrix and then normalizing the result.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  x
     |      X coordinate
     |  
     |  y
     |      Y coordinate
     |  
     |  z
     |      Z coordinate
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kOneVector = maya.api.OpenMaya.MFloatVector(1, 1, 1)
     |  
     |  kTolerance = 9.999999747378752e-06
     |  
     |  kXaxisVector = maya.api.OpenMaya.MFloatVector(1, 0, 0)
     |  
     |  kXnegAxisVector = maya.api.OpenMaya.MFloatVector(-1, 0, 0)
     |  
     |  kYaxisVector = maya.api.OpenMaya.MFloatVector(0, 1, 0)
     |  
     |  kYnegAxisVector = maya.api.OpenMaya.MFloatVector(0, -1, 0)
     |  
     |  kZaxisVector = maya.api.OpenMaya.MFloatVector(0, 0, 1)
     |  
     |  kZeroVector = maya.api.OpenMaya.MFloatVector(0, 0, 0)
     |  
     |  kZnegAxisVector = maya.api.OpenMaya.MFloatVector(0, 0, -1)
    
    class MFloatVectorArray(__builtin__.object)
     |  Array of MFloatVector values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MFn(__builtin__.object)
     |  Static class providing constants for all API types.
     |  
     |  Data and other attributes defined here:
     |  
     |  kAISEnvFacade = 972
     |  
     |  kAddDoubleLinear = 5
     |  
     |  kAdskMaterial = 1062
     |  
     |  kAffect = 6
     |  
     |  kAimConstraint = 111
     |  
     |  kAir = 257
     |  
     |  kAlignCurve = 41
     |  
     |  kAlignManip = 907
     |  
     |  kAlignSurface = 42
     |  
     |  kAmbientLight = 303
     |  
     |  kAngle = 270
     |  
     |  kAngleBetween = 21
     |  
     |  kAnimBlend = 789
     |  
     |  kAnimBlendInOut = 790
     |  
     |  kAnimCurve = 7
     |  
     |  kAnimCurveTimeToAngular = 8
     |  
     |  kAnimCurveTimeToDistance = 9
     |  
     |  kAnimCurveTimeToTime = 10
     |  
     |  kAnimCurveTimeToUnitless = 11
     |  
     |  kAnimCurveUnitlessToAngular = 12
     |  
     |  kAnimCurveUnitlessToDistance = 13
     |  
     |  kAnimCurveUnitlessToTime = 14
     |  
     |  kAnimCurveUnitlessToUnitless = 15
     |  
     |  kAnimLayer = 1015
     |  
     |  kAnisotropy = 617
     |  
     |  kAnnotation = 271
     |  
     |  kAnyGeometryVarGroup = 115
     |  
     |  kArcLength = 273
     |  
     |  kAreaLight = 305
     |  
     |  kArrayMapper = 524
     |  
     |  kArrowManip = 123
     |  
     |  kArubaTesselate = 1127
     |  
     |  kAssembly = 1076
     |  
     |  kAsset = 1013
     |  
     |  kAttachCurve = 43
     |  
     |  kAttachSurface = 44
     |  
     |  kAttribute = 561
     |  
     |  kAttribute2Double = 742
     |  
     |  kAttribute2Float = 743
     |  
     |  kAttribute2Int = 745
     |  
     |  kAttribute2Long = 745
     |  
     |  kAttribute2Short = 744
     |  
     |  kAttribute3Double = 746
     |  
     |  kAttribute3Float = 747
     |  
     |  kAttribute3Int = 749
     |  
     |  kAttribute3Long = 749
     |  
     |  kAttribute3Short = 748
     |  
     |  kAttribute4Double = 875
     |  
     |  kAudio = 22
     |  
     |  kAverageCurveManip = 149
     |  
     |  kAvgCurves = 45
     |  
     |  kAvgNurbsSurfacePoints = 47
     |  
     |  kAvgSurfacePoints = 46
     |  
     |  kAxesActionManip = 124
     |  
     |  kBackground = 23
     |  
     |  kBallProjectionManip = 125
     |  
     |  kBarnDoorManip = 150
     |  
     |  kBase = 1
     |  
     |  kBaseLattice = 249
     |  
     |  kBendLattice = 335
     |  
     |  kBevel = 48
     |  
     |  kBevelManip = 151
     |  
     |  kBevelPlus = 894
     |  
     |  kBezierCurve = 1049
     |  
     |  kBezierCurveData = 1050
     |  
     |  kBezierCurveToNurbs = 1052
     |  
     |  kBinaryData = 741
     |  
     |  kBirailSrf = 49
     |  
     |  kBlend = 27
     |  
     |  kBlendColorSet = 734
     |  
     |  kBlendColors = 31
     |  
     |  kBlendDevice = 30
     |  
     |  kBlendManip = 152
     |  
     |  kBlendNodeAdditiveRotation = 1028
     |  
     |  kBlendNodeAdditiveScale = 1027
     |  
     |  kBlendNodeBase = 1016
     |  
     |  kBlendNodeBoolean = 1017
     |  
     |  kBlendNodeDouble = 1018
     |  
     |  kBlendNodeDoubleAngle = 1019
     |  
     |  kBlendNodeDoubleLinear = 1020
     |  
     |  kBlendNodeEnum = 1021
     |  
     |  kBlendNodeFloat = 1022
     |  
     |  kBlendNodeFloatAngle = 1023
     |  
     |  kBlendNodeFloatLinear = 1024
     |  
     |  kBlendNodeInt16 = 1025
     |  
     |  kBlendNodeInt32 = 1026
     |  
     |  kBlendNodeTime = 1047
     |  
     |  kBlendShape = 336
     |  
     |  kBlendTwoAttr = 28
     |  
     |  kBlendWeighted = 29
     |  
     |  kBlindData = 751
     |  
     |  kBlindDataTemplate = 752
     |  
     |  kBlinn = 371
     |  
     |  kBlinnMaterial = 386
     |  
     |  kBoundary = 53
     |  
     |  kBox = 862
     |  
     |  kBoxData = 861
     |  
     |  kBrownian = 504
     |  
     |  kBrush = 760
     |  
     |  kBulge = 493
     |  
     |  kBulgeLattice = 338
     |  
     |  kBump = 32
     |  
     |  kBump3d = 33
     |  
     |  kButtonManip = 153
     |  
     |  kCacheBase = 994
     |  
     |  kCacheBlend = 995
     |  
     |  kCacheFile = 982
     |  
     |  kCacheTrack = 996
     |  
     |  kCacheableNode = 991
     |  
     |  kCaddyManipBase = 1105
     |  
     |  kCamera = 250
     |  
     |  kCameraManip = 154
     |  
     |  kCameraPlaneManip = 143
     |  
     |  kCameraSet = 1006
     |  
     |  kCameraView = 34
     |  
     |  kCenterManip = 134
     |  
     |  kChainToSpline = 35
     |  
     |  kCharacter = 683
     |  
     |  kCharacterMap = 798
     |  
     |  kCharacterMappingData = 737
     |  
     |  kCharacterOffset = 684
     |  
     |  kChecker = 494
     |  
     |  kChoice = 36
     |  
     |  kChooser = 767
     |  
     |  kCircle = 54
     |  
     |  kCircleManip = 126
     |  
     |  kCirclePointManip = 231
     |  
     |  kCircleSweepManip = 128
     |  
     |  kClampColor = 39
     |  
     |  kClientDevice = 1072
     |  
     |  kClip = 804
     |  
     |  kClipGhostShape = 1077
     |  
     |  kClipLibrary = 775
     |  
     |  kClipScheduler = 774
     |  
     |  kClipToGhostData = 1078
     |  
     |  kCloseCurve = 55
     |  
     |  kCloseSurface = 57
     |  
     |  kClosestPointOnMesh = 984
     |  
     |  kClosestPointOnSurface = 56
     |  
     |  kCloth = 495
     |  
     |  kCloud = 505
     |  
     |  kCluster = 251
     |  
     |  kClusterFilter = 347
     |  
     |  kClusterFlexor = 300
     |  
     |  kCoiManip = 155
     |  
     |  kCollision = 253
     |  
     |  kColorBackground = 24
     |  
     |  kColorMgtGlobals = 1096
     |  
     |  kColorProfile = 1061
     |  
     |  kCombinationShape = 337
     |  
     |  kCommCornerManip = 608
     |  
     |  kCommCornerOperManip = 609
     |  
     |  kCommEdgeOperManip = 606
     |  
     |  kCommEdgePtManip = 605
     |  
     |  kCommEdgeSegmentManip = 607
     |  
     |  kComponent = 531
     |  
     |  kComponentListData = 579
     |  
     |  kComponentManip = 669
     |  
     |  kCompoundAttribute = 571
     |  
     |  kConcentricProjectionManip = 129
     |  
     |  kCondition = 37
     |  
     |  kCone = 96
     |  
     |  kConstraint = 927
     |  
     |  kContainer = 1008
     |  
     |  kContainerBase = 1063
     |  
     |  kContourProjectionManip = 1110
     |  
     |  kContrast = 38
     |  
     |  kControl = 482
     |  
     |  kControllerTag = 1123
     |  
     |  kCopyColorSet = 733
     |  
     |  kCopyUVSet = 802
     |  
     |  kCpManip = 156
     |  
     |  kCrater = 506
     |  
     |  kCreaseSet = 1085
     |  
     |  kCreate = 40
     |  
     |  kCreateBPManip = 832
     |  
     |  kCreateBezierManip = 1048
     |  
     |  kCreateCVManip = 157
     |  
     |  kCreateColorSet = 731
     |  
     |  kCreateEPManip = 158
     |  
     |  kCreateSectionManip = 819
     |  
     |  kCreateUVSet = 803
     |  
     |  kCrossSectionEditManip = 820
     |  
     |  kCrossSectionManager = 818
     |  
     |  kCubicProjectionManip = 130
     |  
     |  kCurve = 266
     |  
     |  kCurveCVComponent = 532
     |  
     |  kCurveCurveIntersect = 636
     |  
     |  kCurveEPComponent = 533
     |  
     |  kCurveEdManip = 159
     |  
     |  kCurveFromMeshCoM = 929
     |  
     |  kCurveFromMeshEdge = 635
     |  
     |  kCurveFromSubdivEdge = 831
     |  
     |  kCurveFromSubdivFace = 837
     |  
     |  kCurveFromSurface = 58
     |  
     |  kCurveFromSurfaceBnd = 59
     |  
     |  kCurveFromSurfaceCoS = 60
     |  
     |  kCurveFromSurfaceIso = 61
     |  
     |  kCurveInfo = 62
     |  
     |  kCurveKnotComponent = 534
     |  
     |  kCurveNormalizerAngle = 998
     |  
     |  kCurveNormalizerLinear = 999
     |  
     |  kCurveParamComponent = 535
     |  
     |  kCurveSegmentManip = 160
     |  
     |  kCurveVarGroup = 116
     |  
     |  kCustomEvaluatorClusterNode = 1125
     |  
     |  kCylinder = 98
     |  
     |  kCylindricalProjectionManip = 131
     |  
     |  kDOF = 323
     |  
     |  kDPbirailSrf = 50
     |  
     |  kDagContainer = 1064
     |  
     |  kDagNode = 107
     |  
     |  kDagPose = 685
     |  
     |  kDagSelectionItem = 558
     |  
     |  kData = 578
     |  
     |  kData2Double = 588
     |  
     |  kData2Float = 589
     |  
     |  kData2Int = 590
     |  
     |  kData2Long = 590
     |  
     |  kData2Short = 591
     |  
     |  kData3Double = 592
     |  
     |  kData3Float = 593
     |  
     |  kData3Int = 594
     |  
     |  kData3Long = 594
     |  
     |  kData3Short = 595
     |  
     |  kData4Double = 876
     |  
     |  kDblTrsManip = 190
     |  
     |  kDecayRegionCapComponent = 544
     |  
     |  kDecayRegionComponent = 545
     |  
     |  kDefaultLightList = 317
     |  
     |  kDeformBend = 620
     |  
     |  kDeformBendManip = 626
     |  
     |  kDeformFlare = 623
     |  
     |  kDeformFlareManip = 629
     |  
     |  kDeformFunc = 619
     |  
     |  kDeformSine = 624
     |  
     |  kDeformSineManip = 630
     |  
     |  kDeformSquash = 622
     |  
     |  kDeformSquashManip = 628
     |  
     |  kDeformTwist = 621
     |  
     |  kDeformTwistManip = 627
     |  
     |  kDeformWave = 625
     |  
     |  kDeformWaveManip = 631
     |  
     |  kDeleteColorSet = 732
     |  
     |  kDeleteComponent = 318
     |  
     |  kDeleteUVSet = 795
     |  
     |  kDeltaMush = 350
     |  
     |  kDependencyNode = 4
     |  
     |  kDetachCurve = 63
     |  
     |  kDetachSurface = 64
     |  
     |  kDiffuseMaterial = 384
     |  
     |  kDimension = 269
     |  
     |  kDimensionManip = 232
     |  
     |  kDirectedDisc = 276
     |  
     |  kDirectionManip = 161
     |  
     |  kDirectionalLight = 308
     |  
     |  kDiscManip = 132
     |  
     |  kDiskCache = 858
     |  
     |  kDispatchCompute = 319
     |  
     |  kDisplacementShader = 321
     |  
     |  kDisplayLayer = 728
     |  
     |  kDisplayLayerManager = 729
     |  
     |  kDistance = 272
     |  
     |  kDistanceBetween = 322
     |  
     |  kDistanceManip = 633
     |  
     |  kDofManip = 162
     |  
     |  kDoubleAngleAttribute = 563
     |  
     |  kDoubleArrayData = 580
     |  
     |  kDoubleIndexedComponent = 709
     |  
     |  kDoubleLinearAttribute = 565
     |  
     |  kDoubleShadingSwitch = 614
     |  
     |  kDrag = 258
     |  
     |  kDropOffFunction = 821
     |  
     |  kDropoffLocator = 282
     |  
     |  kDropoffManip = 163
     |  
     |  kDummy = 254
     |  
     |  kDummyConnectable = 324
     |  
     |  kDynAirManip = 719
     |  
     |  kDynArrayAttrsData = 724
     |  
     |  kDynAttenuationManip = 723
     |  
     |  kDynBase = 715
     |  
     |  kDynBaseFieldManip = 718
     |  
     |  kDynEmitterManip = 716
     |  
     |  kDynFieldsManip = 717
     |  
     |  kDynGlobals = 764
     |  
     |  kDynNewtonManip = 720
     |  
     |  kDynParticleSetComponent = 556
     |  
     |  kDynSpreadManip = 722
     |  
     |  kDynSweptGeometryData = 738
     |  
     |  kDynTurbulenceManip = 721
     |  
     |  kDynamicConstraint = 988
     |  
     |  kDynamicsController = 325
     |  
     |  kEdgeComponent = 541
     |  
     |  kEditCurve = 816
     |  
     |  kEditCurveManip = 817
     |  
     |  kEditMetadata = 1084
     |  
     |  kEditsManager = 1092
     |  
     |  kEmitter = 255
     |  
     |  kEnableManip = 136
     |  
     |  kEnumAttribute = 568
     |  
     |  kEnvBall = 487
     |  
     |  kEnvChrome = 489
     |  
     |  kEnvCube = 488
     |  
     |  kEnvFacade = 971
     |  
     |  kEnvFogMaterial = 378
     |  
     |  kEnvFogShape = 278
     |  
     |  kEnvSky = 490
     |  
     |  kEnvSphere = 491
     |  
     |  kExplodeNurbsShell = 687
     |  
     |  kExpression = 327
     |  
     |  kExtendCurve = 65
     |  
     |  kExtendCurveDistanceManip = 164
     |  
     |  kExtendSurface = 66
     |  
     |  kExtendSurfaceDistanceManip = 711
     |  
     |  kExtract = 328
     |  
     |  kExtrude = 67
     |  
     |  kExtrudeManip = 165
     |  
     |  kFFD = 339
     |  
     |  kFFblendSrf = 68
     |  
     |  kFFfilletSrf = 69
     |  
     |  kFacade = 969
     |  
     |  kFfdDualBase = 340
     |  
     |  kField = 256
     |  
     |  kFileBackground = 25
     |  
     |  kFileTexture = 496
     |  
     |  kFilletCurve = 70
     |  
     |  kFilter = 329
     |  
     |  kFilterClosestSample = 330
     |  
     |  kFilterEuler = 331
     |  
     |  kFilterSimplify = 332
     |  
     |  kFitBspline = 71
     |  
     |  kFixedLineManip = 233
     |  
     |  kFlexor = 299
     |  
     |  kFloatAngleAttribute = 564
     |  
     |  kFloatArrayData = 1032
     |  
     |  kFloatLinearAttribute = 566
     |  
     |  kFloatMatrixAttribute = 575
     |  
     |  kFloatVectorArrayData = 1009
     |  
     |  kFlow = 72
     |  
     |  kFluid = 909
     |  
     |  kFluidData = 911
     |  
     |  kFluidEmitter = 915
     |  
     |  kFluidGeom = 910
     |  
     |  kFluidTexture2D = 904
     |  
     |  kFluidTexture3D = 903
     |  
     |  kFollicle = 930
     |  
     |  kForceUpdateManip = 690
     |  
     |  kFosterParent = 1087
     |  
     |  kFourByFourMatrix = 770
     |  
     |  kFractal = 497
     |  
     |  kFreePointManip = 133
     |  
     |  kFreePointTriadManip = 137
     |  
     |  kGammaCorrect = 333
     |  
     |  kGenericAttribute = 572
     |  
     |  kGeoConnectable = 326
     |  
     |  kGeoConnector = 917
     |  
     |  kGeomBind = 1095
     |  
     |  kGeometric = 265
     |  
     |  kGeometryConstraint = 113
     |  
     |  kGeometryData = 707
     |  
     |  kGeometryFilt = 334
     |  
     |  kGeometryOnLineManip = 142
     |  
     |  kGeometryVarGroup = 114
     |  
     |  kGlobalCacheControls = 857
     |  
     |  kGlobalStitch = 696
     |  
     |  kGranite = 507
     |  
     |  kGravity = 259
     |  
     |  kGreasePencilSequence = 1083
     |  
     |  kGreasePlane = 1081
     |  
     |  kGreasePlaneRenderShape = 1082
     |  
     |  kGrid = 498
     |  
     |  kGroundPlane = 290
     |  
     |  kGroupId = 354
     |  
     |  kGroupParts = 355
     |  
     |  kGuide = 356
     |  
     |  kGuideLine = 301
     |  
     |  kHairConstraint = 935
     |  
     |  kHairSystem = 931
     |  
     |  kHairTubeShader = 942
     |  
     |  kHandleRotateManip = 216
     |  
     |  kHardenPointCurve = 73
     |  
     |  kHardwareReflectionMap = 881
     |  
     |  kHardwareRenderGlobals = 523
     |  
     |  kHardwareRenderingGlobals = 1066
     |  
     |  kHeightField = 916
     |  
     |  kHikEffector = 956
     |  
     |  kHikFKJoint = 958
     |  
     |  kHikFloorContactMarker = 978
     |  
     |  kHikGroundPlane = 979
     |  
     |  kHikHandle = 960
     |  
     |  kHikIKEffector = 957
     |  
     |  kHikSolver = 959
     |  
     |  kHistorySwitch = 983
     |  
     |  kHsvToRgb = 357
     |  
     |  kHwShaderNode = 884
     |  
     |  kHyperGraphInfo = 358
     |  
     |  kHyperLayout = 359
     |  
     |  kHyperLayoutDG = 1000
     |  
     |  kHyperView = 360
     |  
     |  kIkEffector = 119
     |  
     |  kIkHandle = 120
     |  
     |  kIkRPManip = 167
     |  
     |  kIkSolver = 361
     |  
     |  kIkSplineManip = 166
     |  
     |  kIkSystem = 367
     |  
     |  kIllustratorCurve = 74
     |  
     |  kImageAdd = 654
     |  
     |  kImageBlur = 660
     |  
     |  kImageColorCorrect = 659
     |  
     |  kImageData = 648
     |  
     |  kImageDepth = 662
     |  
     |  kImageDiff = 655
     |  
     |  kImageDisplay = 663
     |  
     |  kImageFilter = 661
     |  
     |  kImageLoad = 649
     |  
     |  kImageMotionBlur = 665
     |  
     |  kImageMultiply = 656
     |  
     |  kImageNetDest = 652
     |  
     |  kImageNetSrc = 651
     |  
     |  kImageOver = 657
     |  
     |  kImagePlane = 368
     |  
     |  kImageRender = 653
     |  
     |  kImageSave = 650
     |  
     |  kImageSource = 786
     |  
     |  kImageUnder = 658
     |  
     |  kImageView = 664
     |  
     |  kImplicitCone = 889
     |  
     |  kImplicitSphere = 890
     |  
     |  kInsertKnotCrv = 75
     |  
     |  kInsertKnotSrf = 76
     |  
     |  kInstancer = 757
     |  
     |  kInt64ArrayData = 809
     |  
     |  kIntArrayData = 581
     |  
     |  kIntersectSurface = 77
     |  
     |  kInvalid = 0
     |  
     |  kIsoparmComponent = 536
     |  
     |  kIsoparmManip = 146
     |  
     |  kItemList = 560
     |  
     |  kJiggleDeformer = 856
     |  
     |  kJoint = 121
     |  
     |  kJointCluster = 349
     |  
     |  kJointClusterManip = 168
     |  
     |  kJointTranslateManip = 229
     |  
     |  kKeyframeDelta = 944
     |  
     |  kKeyframeDeltaAddRemove = 947
     |  
     |  kKeyframeDeltaBlockAddRemove = 948
     |  
     |  kKeyframeDeltaBreakdown = 952
     |  
     |  kKeyframeDeltaInfType = 949
     |  
     |  kKeyframeDeltaMove = 945
     |  
     |  kKeyframeDeltaScale = 946
     |  
     |  kKeyframeDeltaTangent = 950
     |  
     |  kKeyframeDeltaWeighted = 951
     |  
     |  kKeyframeRegionManip = 997
     |  
     |  kKeyingGroup = 682
     |  
     |  kLambert = 369
     |  
     |  kLambertMaterial = 385
     |  
     |  kLast = 1130
     |  
     |  kLattice = 279
     |  
     |  kLatticeComponent = 542
     |  
     |  kLatticeData = 582
     |  
     |  kLatticeGeom = 280
     |  
     |  kLayeredShader = 374
     |  
     |  kLayeredTexture = 799
     |  
     |  kLeastSquares = 376
     |  
     |  kLeather = 508
     |  
     |  kLight = 302
     |  
     |  kLightDataAttribute = 573
     |  
     |  kLightFogMaterial = 377
     |  
     |  kLightInfo = 375
     |  
     |  kLightLink = 763
     |  
     |  kLightList = 379
     |  
     |  kLightManip = 169
     |  
     |  kLightProjectionGeometry = 234
     |  
     |  kLightSource = 380
     |  
     |  kLightSourceMaterial = 388
     |  
     |  kLimitManip = 135
     |  
     |  kLineArrowManip = 235
     |  
     |  kLineManip = 147
     |  
     |  kLineModifier = 973
     |  
     |  kLinearLight = 306
     |  
     |  kLocator = 281
     |  
     |  kLodGroup = 768
     |  
     |  kLodThresholds = 766
     |  
     |  kLookAt = 112
     |  
     |  kLuminance = 381
     |  
     |  kMCsolver = 362
     |  
     |  kMPbirailSrf = 51
     |  
     |  kMakeGroup = 382
     |  
     |  kMandelbrot = 1079
     |  
     |  kMandelbrot3D = 1080
     |  
     |  kManip2DContainer = 192
     |  
     |  kManipContainer = 148
     |  
     |  kManipulator = 230
     |  
     |  kManipulator2D = 205
     |  
     |  kManipulator3D = 122
     |  
     |  kMarble = 509
     |  
     |  kMarker = 283
     |  
     |  kMarkerManip = 210
     |  
     |  kMaterial = 383
     |  
     |  kMaterialFacade = 970
     |  
     |  kMaterialInfo = 389
     |  
     |  kMatrixAdd = 390
     |  
     |  kMatrixArrayData = 598
     |  
     |  kMatrixAttribute = 574
     |  
     |  kMatrixData = 583
     |  
     |  kMatrixFloatData = 667
     |  
     |  kMatrixHold = 391
     |  
     |  kMatrixMult = 392
     |  
     |  kMatrixPass = 393
     |  
     |  kMatrixWtAdd = 394
     |  
     |  kMembrane = 1033
     |  
     |  kMentalRayTexture = 937
     |  
     |  kMergeVertsToolManip = 1034
     |  
     |  kMesh = 296
     |  
     |  kMeshComponent = 546
     |  
     |  kMeshData = 584
     |  
     |  kMeshEdgeComponent = 547
     |  
     |  kMeshFaceVertComponent = 551
     |  
     |  kMeshFrEdgeComponent = 549
     |  
     |  kMeshGeom = 297
     |  
     |  kMeshMapComponent = 812
     |  
     |  kMeshPolygonComponent = 548
     |  
     |  kMeshVarGroup = 117
     |  
     |  kMeshVertComponent = 550
     |  
     |  kMeshVtxFaceComponent = 740
     |  
     |  kMessageAttribute = 576
     |  
     |  kMidModifier = 395
     |  
     |  kMidModifierWithMatrix = 396
     |  
     |  kModel = 3
     |  
     |  kModifyEdgeBaseManip = 833
     |  
     |  kModifyEdgeCrvManip = 824
     |  
     |  kModifyEdgeManip = 825
     |  
     |  kMotionPath = 441
     |  
     |  kMotionPathManip = 170
     |  
     |  kMountain = 499
     |  
     |  kMoveUVShellManip2D = 705
     |  
     |  kMoveVertexManip = 758
     |  
     |  kMultDoubleLinear = 769
     |  
     |  kMultiSubVertexComponent = 554
     |  
     |  kMultilisterLight = 443
     |  
     |  kMultiplyDivide = 444
     |  
     |  kMute = 926
     |  
     |  kNBase = 993
     |  
     |  kNCloth = 1002
     |  
     |  kNComponent = 989
     |  
     |  kNId = 1031
     |  
     |  kNIdData = 1030
     |  
     |  kNLE = 1090
     |  
     |  kNObject = 1011
     |  
     |  kNObjectData = 1010
     |  
     |  kNParticle = 1003
     |  
     |  kNRigid = 1004
     |  
     |  kNamedObject = 2
     |  
     |  kNearestPointOnCurve = 1060
     |  
     |  kNewton = 260
     |  
     |  kNodeGraphEditorBookmarkInfo = 1113
     |  
     |  kNodeGraphEditorBookmarks = 1112
     |  
     |  kNodeGraphEditorInfo = 1111
     |  
     |  kNoise = 874
     |  
     |  kNonAmbientLight = 304
     |  
     |  kNonDagSelectionItem = 559
     |  
     |  kNonExtendedLight = 307
     |  
     |  kNonLinear = 618
     |  
     |  kNormalConstraint = 238
     |  
     |  kNucleus = 992
     |  
     |  kNumericAttribute = 562
     |  
     |  kNumericData = 587
     |  
     |  kNurbsBoolean = 688
     |  
     |  kNurbsCircular2PtArc = 638
     |  
     |  kNurbsCircular3PtArc = 637
     |  
     |  kNurbsCube = 80
     |  
     |  kNurbsCurve = 267
     |  
     |  kNurbsCurveData = 586
     |  
     |  kNurbsCurveGeom = 268
     |  
     |  kNurbsCurveToBezier = 1051
     |  
     |  kNurbsPlane = 79
     |  
     |  kNurbsSquare = 616
     |  
     |  kNurbsSurface = 294
     |  
     |  kNurbsSurfaceData = 585
     |  
     |  kNurbsSurfaceGeom = 295
     |  
     |  kNurbsTesselate = 78
     |  
     |  kNurbsToSubdiv = 755
     |  
     |  kObjectAttrFilter = 675
     |  
     |  kObjectBinFilter = 938
     |  
     |  kObjectFilter = 671
     |  
     |  kObjectMultiFilter = 672
     |  
     |  kObjectNameFilter = 673
     |  
     |  kObjectRenderFilter = 676
     |  
     |  kObjectScriptFilter = 677
     |  
     |  kObjectTypeFilter = 674
     |  
     |  kOcean = 870
     |  
     |  kOceanDeformer = 1121
     |  
     |  kOceanShader = 893
     |  
     |  kOffsetCos = 81
     |  
     |  kOffsetCosManip = 171
     |  
     |  kOffsetCurve = 82
     |  
     |  kOffsetCurveManip = 172
     |  
     |  kOffsetSurface = 639
     |  
     |  kOffsetSurfaceManip = 647
     |  
     |  kOldGeometryConstraint = 445
     |  
     |  kOpticalFX = 446
     |  
     |  kOrientConstraint = 239
     |  
     |  kOrientationComponent = 552
     |  
     |  kOrientationLocator = 286
     |  
     |  kOrientationMarker = 284
     |  
     |  kOrthoGrid = 291
     |  
     |  kPASolver = 363
     |  
     |  kPairBlend = 922
     |  
     |  kParamDimension = 275
     |  
     |  kParentConstraint = 242
     |  
     |  kParticle = 311
     |  
     |  kParticleAgeMapper = 447
     |  
     |  kParticleCloud = 448
     |  
     |  kParticleColorMapper = 449
     |  
     |  kParticleIncandecenceMapper = 450
     |  
     |  kParticleSamplerInfo = 801
     |  
     |  kParticleTransparencyMapper = 451
     |  
     |  kPartition = 452
     |  
     |  kPassContributionMap = 782
     |  
     |  kPfxGeometry = 940
     |  
     |  kPfxHair = 941
     |  
     |  kPfxToon = 966
     |  
     |  kPhong = 372
     |  
     |  kPhongExplorer = 373
     |  
     |  kPhongMaterial = 387
     |  
     |  kPinToGeometryProx = 986
     |  
     |  kPinToGeometryUV = 985
     |  
     |  kPivotComponent = 537
     |  
     |  kPivotManip2D = 191
     |  
     |  kPlace2dTexture = 453
     |  
     |  kPlace3dTexture = 454
     |  
     |  kPlanarProjectionManip = 207
     |  
     |  kPlanarTrimSrf = 83
     |  
     |  kPlane = 288
     |  
     |  kPlugin = 577
     |  
     |  kPluginBlendShape = 1116
     |  
     |  kPluginCameraSet = 1007
     |  
     |  kPluginClientDevice = 1073
     |  
     |  kPluginConstraintNode = 1012
     |  
     |  kPluginData = 596
     |  
     |  kPluginDeformerNode = 610
     |  
     |  kPluginDependNode = 455
     |  
     |  kPluginEmitterNode = 726
     |  
     |  kPluginFieldNode = 725
     |  
     |  kPluginGeometryData = 762
     |  
     |  kPluginGeometryFilter = 1115
     |  
     |  kPluginHardwareShader = 885
     |  
     |  kPluginHwShaderNode = 886
     |  
     |  kPluginIkSolver = 756
     |  
     |  kPluginImagePlaneNode = 1001
     |  
     |  kPluginLocatorNode = 456
     |  
     |  kPluginManipContainer = 691
     |  
     |  kPluginManipulatorNode = 1029
     |  
     |  kPluginMotionPathNode = 442
     |  
     |  kPluginObjectSet = 919
     |  
     |  kPluginParticleAttributeMapperNode = 1005
     |  
     |  kPluginShape = 706
     |  
     |  kPluginSkinCluster = 1114
     |  
     |  kPluginSpringNode = 727
     |  
     |  kPluginThreadedDevice = 1074
     |  
     |  kPluginTransformNode = 908
     |  
     |  kPlusMinusAverage = 457
     |  
     |  kPointArrayData = 597
     |  
     |  kPointConstraint = 240
     |  
     |  kPointLight = 309
     |  
     |  kPointManip = 236
     |  
     |  kPointMatrixMult = 458
     |  
     |  kPointOnCurveInfo = 84
     |  
     |  kPointOnCurveManip = 208
     |  
     |  kPointOnLineManip = 211
     |  
     |  kPointOnPolyConstraint = 1055
     |  
     |  kPointOnSurfaceInfo = 85
     |  
     |  kPointOnSurfaceManip = 212
     |  
     |  kPoleVectorConstraint = 243
     |  
     |  kPolyAppend = 399
     |  
     |  kPolyAppendVertex = 791
     |  
     |  kPolyArrow = 974
     |  
     |  kPolyAutoProj = 846
     |  
     |  kPolyAutoProjManip = 962
     |  
     |  kPolyAverageVertex = 845
     |  
     |  kPolyBevel = 397
     |  
     |  kPolyBevel2 = 1093
     |  
     |  kPolyBevel3 = 1097
     |  
     |  kPolyBlindData = 753
     |  
     |  kPolyBoolOp = 612
     |  
     |  kPolyBridgeEdge = 990
     |  
     |  kPolyCBoolOp = 1094
     |  
     |  kPolyCaddyManip = 1106
     |  
     |  kPolyChipOff = 400
     |  
     |  kPolyCircularize = 1126
     |  
     |  kPolyClean = 1119
     |  
     |  kPolyCloseBorder = 401
     |  
     |  kPolyCollapseEdge = 402
     |  
     |  kPolyCollapseF = 403
     |  
     |  kPolyColorDel = 736
     |  
     |  kPolyColorMod = 735
     |  
     |  kPolyColorPerVertex = 730
     |  
     |  kPolyComponentData = 980
     |  
     |  kPolyCone = 433
     |  
     |  kPolyConnectComponents = 1056
     |  
     |  kPolyContourProj = 1109
     |  
     |  kPolyCreaseEdge = 954
     |  
     |  kPolyCreateFacet = 439
     |  
     |  kPolyCreateToolManip = 140
     |  
     |  kPolyCreator = 431
     |  
     |  kPolyCube = 434
     |  
     |  kPolyCut = 896
     |  
     |  kPolyCutManip = 900
     |  
     |  kPolyCutManipContainer = 899
     |  
     |  kPolyCylProj = 404
     |  
     |  kPolyCylinder = 435
     |  
     |  kPolyDelEdge = 405
     |  
     |  kPolyDelFacet = 406
     |  
     |  kPolyDelVertex = 407
     |  
     |  kPolyDuplicateEdge = 968
     |  
     |  kPolyEdgeToCurve = 1014
     |  
     |  kPolyEditEdgeFlow = 1086
     |  
     |  kPolyExtrudeEdge = 788
     |  
     |  kPolyExtrudeFacet = 408
     |  
     |  kPolyExtrudeManip = 1069
     |  
     |  kPolyExtrudeManipContainer = 1070
     |  
     |  kPolyExtrudeVertex = 921
     |  
     |  kPolyFlipEdge = 787
     |  
     |  kPolyFlipUV = 883
     |  
     |  kPolyHelix = 981
     |  
     |  kPolyHoleFace = 1054
     |  
     |  kPolyLayoutUV = 847
     |  
     |  kPolyMapCut = 409
     |  
     |  kPolyMapDel = 410
     |  
     |  kPolyMapSew = 411
     |  
     |  kPolyMapSewMove = 848
     |  
     |  kPolyMappingManip = 194
     |  
     |  kPolyMergeEdge = 412
     |  
     |  kPolyMergeFacet = 413
     |  
     |  kPolyMergeUV = 905
     |  
     |  kPolyMergeVert = 693
     |  
     |  kPolyMesh = 436
     |  
     |  kPolyMirror = 953
     |  
     |  kPolyMirrorManipContainer = 901
     |  
     |  kPolyModifierManip = 195
     |  
     |  kPolyModifierManipContainer = 1107
     |  
     |  kPolyMoveEdge = 414
     |  
     |  kPolyMoveFacet = 415
     |  
     |  kPolyMoveFacetUV = 416
     |  
     |  kPolyMoveUV = 417
     |  
     |  kPolyMoveUVManip = 193
     |  
     |  kPolyMoveVertex = 418
     |  
     |  kPolyMoveVertexManip = 196
     |  
     |  kPolyMoveVertexUV = 419
     |  
     |  kPolyNormal = 420
     |  
     |  kPolyNormalPerVertex = 754
     |  
     |  kPolyNormalizeUV = 882
     |  
     |  kPolyPassThru = 1117
     |  
     |  kPolyPinUV = 955
     |  
     |  kPolyPipe = 977
     |  
     |  kPolyPlanProj = 421
     |  
     |  kPolyPlatonicSolid = 976
     |  
     |  kPolyPoke = 897
     |  
     |  kPolyPokeManip = 902
     |  
     |  kPolyPrimitive = 432
     |  
     |  kPolyPrimitiveMisc = 975
     |  
     |  kPolyPrism = 963
     |  
     |  kPolyProj = 422
     |  
     |  kPolyProjectCurve = 1067
     |  
     |  kPolyProjectionManip = 174
     |  
     |  kPolyPyramid = 964
     |  
     |  kPolyQuad = 423
     |  
     |  kPolyReduce = 765
     |  
     |  kPolyRemesh = 1108
     |  
     |  kPolySelectEditFeedbackManip = 1037
     |  
     |  kPolySeparate = 459
     |  
     |  kPolySewEdge = 692
     |  
     |  kPolySmooth = 424
     |  
     |  kPolySmoothFacet = 694
     |  
     |  kPolySmoothProxy = 939
     |  
     |  kPolySoftEdge = 425
     |  
     |  kPolySphProj = 426
     |  
     |  kPolySphere = 437
     |  
     |  kPolySpinEdge = 1053
     |  
     |  kPolySplit = 427
     |  
     |  kPolySplitEdge = 810
     |  
     |  kPolySplitRing = 965
     |  
     |  kPolySplitToolManip = 141
     |  
     |  kPolySplitVert = 805
     |  
     |  kPolyStraightenUVBorder = 906
     |  
     |  kPolySubdEdge = 428
     |  
     |  kPolySubdFacet = 429
     |  
     |  kPolyToSubdiv = 680
     |  
     |  kPolyToolFeedbackManip = 1036
     |  
     |  kPolyToolFeedbackShape = 312
     |  
     |  kPolyTorus = 438
     |  
     |  kPolyTransfer = 844
     |  
     |  kPolyTriangulate = 430
     |  
     |  kPolyTweak = 398
     |  
     |  kPolyTweakUV = 704
     |  
     |  kPolyUVRectangle = 1065
     |  
     |  kPolyUnite = 440
     |  
     |  kPolyVertexNormalManip = 197
     |  
     |  kPolyWedgeFace = 898
     |  
     |  kPoseInterpolatorManager = 1122
     |  
     |  kPositionMarker = 285
     |  
     |  kPostProcessList = 460
     |  
     |  kPrecompExport = 783
     |  
     |  kPrimitive = 86
     |  
     |  kProjectCurve = 87
     |  
     |  kProjectTangent = 88
     |  
     |  kProjectTangentManip = 177
     |  
     |  kProjection = 461
     |  
     |  kProjectionManip = 173
     |  
     |  kProjectionMultiManip = 176
     |  
     |  kProjectionUVManip = 175
     |  
     |  kPropModManip = 178
     |  
     |  kPropMoveTriadManip = 138
     |  
     |  kProxWrap = 352
     |  
     |  kProxy = 108
     |  
     |  kProxyManager = 961
     |  
     |  kPsdFileTexture = 943
     |  
     |  kQuadPtOnLineManip = 179
     |  
     |  kQuadShadingSwitch = 920
     |  
     |  kRBFsurface = 89
     |  
     |  kRPsolver = 365
     |  
     |  kRadial = 261
     |  
     |  kRadius = 274
     |  
     |  kRamp = 500
     |  
     |  kRampBackground = 26
     |  
     |  kRampShader = 891
     |  
     |  kRbfSrfManip = 180
     |  
     |  kReForm = 1124
     |  
     |  kRebuildCurve = 90
     |  
     |  kRebuildSurface = 91
     |  
     |  kRecord = 462
     |  
     |  kReference = 750
     |  
     |  kReflect = 370
     |  
     |  kRemapColor = 933
     |  
     |  kRemapHsv = 934
     |  
     |  kRemapValue = 932
     |  
     |  kRenderBox = 863
     |  
     |  kRenderCone = 97
     |  
     |  kRenderGlobals = 519
     |  
     |  kRenderGlobalsList = 520
     |  
     |  kRenderLayer = 780
     |  
     |  kRenderLayerManager = 781
     |  
     |  kRenderPass = 778
     |  
     |  kRenderPassSet = 779
     |  
     |  kRenderQuality = 521
     |  
     |  kRenderRect = 277
     |  
     |  kRenderSetup = 518
     |  
     |  kRenderSphere = 298
     |  
     |  kRenderTarget = 784
     |  
     |  kRenderUtilityList = 463
     |  
     |  kRenderedImageSource = 785
     |  
     |  kRenderingList = 1068
     |  
     |  kReorderUVSet = 1128
     |  
     |  kResolution = 522
     |  
     |  kResultCurve = 16
     |  
     |  kResultCurveTimeToAngular = 17
     |  
     |  kResultCurveTimeToDistance = 18
     |  
     |  kResultCurveTimeToTime = 19
     |  
     |  kResultCurveTimeToUnitless = 20
     |  
     |  kReverse = 464
     |  
     |  kReverseCrvManip = 182
     |  
     |  kReverseCurve = 92
     |  
     |  kReverseCurveManip = 181
     |  
     |  kReverseSurface = 93
     |  
     |  kReverseSurfaceManip = 183
     |  
     |  kRevolve = 94
     |  
     |  kRevolveManip = 184
     |  
     |  kRevolvedPrimitive = 95
     |  
     |  kRevolvedPrimitiveManip = 185
     |  
     |  kRgbToHsv = 465
     |  
     |  kRigid = 314
     |  
     |  kRigidConstraint = 313
     |  
     |  kRigidDeform = 341
     |  
     |  kRigidSolver = 466
     |  
     |  kRock = 510
     |  
     |  kRotateBoxManip = 214
     |  
     |  kRotateLimitsManip = 217
     |  
     |  kRotateManip = 215
     |  
     |  kRotateUVManip2D = 702
     |  
     |  kRoundConstantRadius = 640
     |  
     |  kRoundConstantRadiusManip = 643
     |  
     |  kRoundRadiusCrvManip = 642
     |  
     |  kRoundRadiusManip = 641
     |  
     |  kSCsolver = 364
     |  
     |  kSPbirailSrf = 52
     |  
     |  kSamplerInfo = 474
     |  
     |  kScaleConstraint = 244
     |  
     |  kScaleLimitsManip = 218
     |  
     |  kScaleManip = 219
     |  
     |  kScalePointManip = 826
     |  
     |  kScaleUVManip2D = 703
     |  
     |  kScalingBoxManip = 220
     |  
     |  kScreenAlignedCircleManip = 127
     |  
     |  kScript = 634
     |  
     |  kScriptManip = 221
     |  
     |  kSculpt = 342
     |  
     |  kSectionManip = 813
     |  
     |  kSelectionItem = 557
     |  
     |  kSelectionList = 603
     |  
     |  kSelectionListData = 670
     |  
     |  kSelectionListOperator = 678
     |  
     |  kSequenceManager = 1044
     |  
     |  kSequencer = 1045
     |  
     |  kSet = 467
     |  
     |  kSetGroupComponent = 555
     |  
     |  kSetRange = 470
     |  
     |  kSfRevolveManip = 836
     |  
     |  kShaderGlow = 471
     |  
     |  kShaderList = 472
     |  
     |  kShadingEngine = 320
     |  
     |  kShadingMap = 473
     |  
     |  kShape = 248
     |  
     |  kShapeEditorManager = 1120
     |  
     |  kShapeFragment = 475
     |  
     |  kShot = 1046
     |  
     |  kShrinkWrapFilter = 1091
     |  
     |  kSimpleVolumeShader = 476
     |  
     |  kSingleIndexedComponent = 708
     |  
     |  kSingleShadingSwitch = 613
     |  
     |  kSketchPlane = 289
     |  
     |  kSkin = 100
     |  
     |  kSkinBinding = 1057
     |  
     |  kSkinClusterFilter = 681
     |  
     |  kSkinShader = 668
     |  
     |  kSl60 = 477
     |  
     |  kSmear = 912
     |  
     |  kSmoothCurve = 695
     |  
     |  kSmoothTangentSrf = 777
     |  
     |  kSnapUVManip2D = 1088
     |  
     |  kSnapshot = 478
     |  
     |  kSnapshotPath = 918
     |  
     |  kSnapshotShape = 854
     |  
     |  kSnow = 511
     |  
     |  kSoftMod = 252
     |  
     |  kSoftModFilter = 348
     |  
     |  kSoftModManip = 632
     |  
     |  kSolidFractal = 512
     |  
     |  kSphere = 99
     |  
     |  kSphereData = 599
     |  
     |  kSphericalProjectionManip = 222
     |  
     |  kSplineSolver = 366
     |  
     |  kSpotCylinderManip = 187
     |  
     |  kSpotLight = 310
     |  
     |  kSpotManip = 186
     |  
     |  kSpring = 315
     |  
     |  kSprite = 292
     |  
     |  kSquareSrf = 712
     |  
     |  kSquareSrfManip = 713
     |  
     |  kStateManip = 145
     |  
     |  kStencil = 501
     |  
     |  kStereoCameraMaster = 1043
     |  
     |  kStitchAsNurbsShell = 686
     |  
     |  kStitchSrf = 101
     |  
     |  kStitchSrfManip = 689
     |  
     |  kStoryBoard = 479
     |  
     |  kStringArrayData = 601
     |  
     |  kStringData = 600
     |  
     |  kStringShadingSwitch = 913
     |  
     |  kStroke = 759
     |  
     |  kStrokeGlobals = 761
     |  
     |  kStucco = 513
     |  
     |  kStudioClearCoat = 914
     |  
     |  kStyleCurve = 895
     |  
     |  kSubCurve = 102
     |  
     |  kSubSurface = 776
     |  
     |  kSubVertexComponent = 553
     |  
     |  kSubdAddTopology = 887
     |  
     |  kSubdAutoProj = 872
     |  
     |  kSubdBlindData = 797
     |  
     |  kSubdBoolean = 822
     |  
     |  kSubdCleanTopology = 888
     |  
     |  kSubdCloseBorder = 859
     |  
     |  kSubdDelFace = 853
     |  
     |  kSubdExtrudeFace = 834
     |  
     |  kSubdHierBlind = 796
     |  
     |  kSubdLayoutUV = 868
     |  
     |  kSubdMapCut = 867
     |  
     |  kSubdMapSewMove = 869
     |  
     |  kSubdMappingManip = 880
     |  
     |  kSubdMergeVert = 860
     |  
     |  kSubdModifier = 849
     |  
     |  kSubdModifyEdge = 823
     |  
     |  kSubdMoveEdge = 851
     |  
     |  kSubdMoveFace = 852
     |  
     |  kSubdMoveVertex = 850
     |  
     |  kSubdPlanProj = 877
     |  
     |  kSubdProjectionManip = 879
     |  
     |  kSubdSplitFace = 864
     |  
     |  kSubdSubdivideFace = 873
     |  
     |  kSubdTweak = 878
     |  
     |  kSubdTweakUV = 866
     |  
     |  kSubdiv = 679
     |  
     |  kSubdivCVComponent = 697
     |  
     |  kSubdivCollapse = 800
     |  
     |  kSubdivCompId = 793
     |  
     |  kSubdivData = 806
     |  
     |  kSubdivEdgeComponent = 698
     |  
     |  kSubdivFaceComponent = 699
     |  
     |  kSubdivGeom = 807
     |  
     |  kSubdivMapComponent = 855
     |  
     |  kSubdivReverseFaces = 811
     |  
     |  kSubdivSurfaceVarGroup = 835
     |  
     |  kSubdivToNurbs = 815
     |  
     |  kSubdivToPoly = 714
     |  
     |  kSummaryObject = 480
     |  
     |  kSuper = 481
     |  
     |  kSurface = 293
     |  
     |  kSurfaceCVComponent = 538
     |  
     |  kSurfaceEPComponent = 539
     |  
     |  kSurfaceEdManip = 772
     |  
     |  kSurfaceFaceComponent = 773
     |  
     |  kSurfaceInfo = 103
     |  
     |  kSurfaceKnotComponent = 540
     |  
     |  kSurfaceLuminance = 483
     |  
     |  kSurfaceRangeComponent = 543
     |  
     |  kSurfaceShader = 484
     |  
     |  kSurfaceVarGroup = 118
     |  
     |  kSymmetryConstraint = 241
     |  
     |  kSymmetryLocator = 828
     |  
     |  kSymmetryMapCurve = 830
     |  
     |  kSymmetryMapVector = 829
     |  
     |  kTangentConstraint = 245
     |  
     |  kTension = 351
     |  
     |  kTexLattice = 200
     |  
     |  kTexLatticeDeformManip = 199
     |  
     |  kTexSmoothManip = 201
     |  
     |  kTexSmudgeUVManip = 198
     |  
     |  kTextButtonManip = 646
     |  
     |  kTextCurves = 104
     |  
     |  kTextManip = 923
     |  
     |  kTexture2d = 492
     |  
     |  kTexture3d = 503
     |  
     |  kTextureBakeSet = 468
     |  
     |  kTextureDeformer = 343
     |  
     |  kTextureDeformerHandle = 344
     |  
     |  kTextureEnv = 486
     |  
     |  kTextureList = 485
     |  
     |  kTextureManip3D = 223
     |  
     |  kThreadedDevice = 1071
     |  
     |  kThreePointArcManip = 644
     |  
     |  kTime = 516
     |  
     |  kTimeAttribute = 567
     |  
     |  kTimeEditor = 1101
     |  
     |  kTimeEditorAnimSource = 1104
     |  
     |  kTimeEditorClip = 1100
     |  
     |  kTimeEditorClipBase = 1098
     |  
     |  kTimeEditorClipEvaluator = 1099
     |  
     |  kTimeEditorInterpolator = 1103
     |  
     |  kTimeEditorTracks = 1102
     |  
     |  kTimeFunction = 936
     |  
     |  kTimeToUnitConversion = 517
     |  
     |  kTimeWarp = 1075
     |  
     |  kToggleManip = 224
     |  
     |  kToggleOnLineManip = 144
     |  
     |  kToolContext = 1089
     |  
     |  kToonLineAttributes = 967
     |  
     |  kTorus = 611
     |  
     |  kTowPointManip = 139
     |  
     |  kTowPointOnCurveManip = 209
     |  
     |  kTowPointOnSurfaceManip = 771
     |  
     |  kTrackInfoManager = 1118
     |  
     |  kTransferAttributes = 987
     |  
     |  kTransform = 110
     |  
     |  kTransformBoxManip = 827
     |  
     |  kTransformGeometry = 604
     |  
     |  kTranslateBoxManip = 225
     |  
     |  kTranslateLimitsManip = 226
     |  
     |  kTranslateManip = 227
     |  
     |  kTranslateManip2D = 206
     |  
     |  kTranslateUVManip = 213
     |  
     |  kTranslateUVManip2D = 701
     |  
     |  kTriadManip = 237
     |  
     |  kTrim = 105
     |  
     |  kTrimLocator = 287
     |  
     |  kTrimManip = 228
     |  
     |  kTrimWithBoundaries = 928
     |  
     |  kTriplanarProjectionManip = 188
     |  
     |  kTripleIndexedComponent = 710
     |  
     |  kTripleShadingSwitch = 615
     |  
     |  kTrsInsertManip = 203
     |  
     |  kTrsManip = 189
     |  
     |  kTrsTransManip = 202
     |  
     |  kTrsXformManip = 204
     |  
     |  kTurbulence = 262
     |  
     |  kTweak = 345
     |  
     |  kTwoPointArcManip = 645
     |  
     |  kTxSl = 514
     |  
     |  kTypedAttribute = 570
     |  
     |  kUInt64ArrayData = 808
     |  
     |  kUVManip2D = 700
     |  
     |  kUfeProxyTransform = 1129
     |  
     |  kUint64SingleIndexedComponent = 1035
     |  
     |  kUnderWorld = 109
     |  
     |  kUniform = 263
     |  
     |  kUnitAttribute = 569
     |  
     |  kUnitConversion = 525
     |  
     |  kUnitToTimeConversion = 526
     |  
     |  kUnknown = 528
     |  
     |  kUnknownDag = 316
     |  
     |  kUnknownTransform = 246
     |  
     |  kUntrim = 106
     |  
     |  kUnused1 = 838
     |  
     |  kUnused2 = 839
     |  
     |  kUnused3 = 840
     |  
     |  kUnused4 = 841
     |  
     |  kUnused5 = 842
     |  
     |  kUnused6 = 843
     |  
     |  kUseBackground = 527
     |  
     |  kUvChooser = 792
     |  
     |  kVectorArrayData = 602
     |  
     |  kVectorProduct = 529
     |  
     |  kVertexBakeSet = 469
     |  
     |  kVertexWeightSet = 1059
     |  
     |  kViewColorManager = 666
     |  
     |  kViewManip = 924
     |  
     |  kVolumeAxis = 794
     |  
     |  kVolumeBindManip = 1058
     |  
     |  kVolumeFog = 865
     |  
     |  kVolumeLight = 892
     |  
     |  kVolumeNoise = 871
     |  
     |  kVolumeShader = 530
     |  
     |  kVortex = 264
     |  
     |  kWater = 502
     |  
     |  kWeightGeometryFilt = 346
     |  
     |  kWire = 353
     |  
     |  kWood = 515
     |  
     |  kWorld = 247
     |  
     |  kWrapFilter = 739
     |  
     |  kWriteToColorBuffer = 1039
     |  
     |  kWriteToDepthBuffer = 1041
     |  
     |  kWriteToFrameBuffer = 1038
     |  
     |  kWriteToLabelBuffer = 1042
     |  
     |  kWriteToVectorBuffer = 1040
     |  
     |  kXformManip = 925
     |  
     |  kXsectionSubdivEdit = 814
    
    class MFnAttribute(MFnBase)
     |  Base class for attribute functionsets.
     |  
     |  Method resolution order:
     |      MFnAttribute
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  accepts(...)
     |      Returns True if this attribute can accept a connection of the given type.
     |  
     |  acceptsAttribute(...)
     |      Returns True if this attribute can accept a connection with the given attribute.
     |  
     |  addToCategory(...)
     |      Adds the attribute to a category
     |  
     |  getAddAttrCmd(...)
     |      Returns a string containing a MEL 'addAttr' command capable of recreating the attribute.
     |  
     |  hasCategory(...)
     |      Checks to see if the attribute has a given category
     |  
     |  setNiceNameOverride(...)
     |      Sets a nice UI name for this attribute rather than using the default derived from it's long name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  affectsAppearance
     |      Does the attribute affect how the node is drawn in Maya's viewport?
     |  
     |  affectsWorldSpace
     |      Does the attribute affect the node's worldSpace matrix?
     |  
     |  array
     |      Is the attribute an array?
     |  
     |  cached
     |      Should the attribute's value be cached in the datablock?
     |  
     |  channelBox
     |      Should the attribute be displayed in the Channel Box?
     |  
     |  connectable
     |      Can connections be made to the attribute?
     |  
     |  disconnectBehavior
     |      What should happen when the attribute loses an incoming connection?
     |  
     |  dynamic
     |      Is the attribute a dynamic attribute?
     |  
     |  extension
     |      Is the attribute an extension attribute?
     |  
     |  hidden
     |      If True the attribute will not be displayed in the Attribute Editor.
     |  
     |  indeterminant
     |      Hint to DG that this attribute may not always be used when computing the attributes which are dependent upon it.
     |  
     |  indexMatters
     |      If False, connectAttr -nextAvailable can be used with this attribute. If True then an explicit index must be provided.
     |  
     |  internal
     |      Will the node handle the attribute's data storage itself, outside of the node's data block?
     |  
     |  isProxyAttribute
     |      Does the attribute is a proxy attribute?
     |  
     |  keyable
     |      Can keys be set on the attribute?
     |  
     |  name
     |      Attribute's long name.
     |  
     |  parent
     |      Parent attribute. MObject::kNullObj if attr has no parent.
     |  
     |  readable
     |      Is the attribute readable?
     |  
     |  renderSource
     |      Is the attribute a render source?
     |  
     |  shortName
     |      Attribute's short name.
     |  
     |  storable
     |      Should the attribute's value be preserved when the node is written to file?
     |  
     |  usedAsColor
     |      Should the attribute be treated as a color in the UI?
     |  
     |  usedAsFilename
     |      Should the attribute be treated as a file name in the UI?
     |  
     |  usesArrayDataBuilder
     |      Array attributes only: does the attribute create elements using MArrayDataBuilder?
     |  
     |  worldSpace
     |      DAG nodes only: if the node is instanced, will the attribute have separate values for each instance?
     |  
     |  writable
     |      Is the attribute writable?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kDelete = 0
     |  
     |  kNothing = 2
     |  
     |  kReset = 1
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnBase(__builtin__.object)
     |  Base class for function sets.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MFnCamera(MFnDagNode)
     |  Function set for cameras.
     |  
     |  Method resolution order:
     |      MFnCamera
     |      MFnDagNode
     |      MFnDependencyNode
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  aspectRatio(...)
     |      aspectRatio() -> float
     |      
     |      Returns the aspect ratio for the camera.
     |  
     |  centerOfInterestPoint(...)
     |      centerOfInterestPoint(space=kObject) -> MPoint
     |      
     |      Returns the center of interest point for the camera.
     |      
     |      * space (int) - Specifies the coordinate system for this operation
     |  
     |  computeDepthOfField(...)
     |      computeDepthOfField(nearLimit=None) -> self
     |      
     |      Compute the depth of field
     |      
     |      * nearLimit (float) - the near limit
     |  
     |  copyViewFrom(...)
     |      copyViewFrom(otherCamera) -> self
     |      
     |      Copy the camera settings related to the perspective from the given camera view.
     |      
     |      This method will only work when the world space information for the camera is available, i.e. when the function set has been initialized with a DAG path.
     |      
     |      * otherCamera (MDagPath) - Camera to copy view from
     |  
     |  create(...)
     |      create(parent=None) -> MObject
     |      
     |      Creates a perspective camera. A parent can be specified for the new camera, otherwise a transform is created.
     |      
     |      The camera is positioned at (0, 0, 0), its center of interest at (0, 0, -1), which implies that the view-direction is pointing in the direction of the negative z-axis, and its up-direction along the positive Y axis.
     |      
     |      * parent (MObject) - The parent of the new camera
     |  
     |  eyePoint(...)
     |      eyePoint(space=kObject) -> MPoint
     |      
     |      Returns the eye point for the camera.
     |      
     |      * space (int) - Specifies the coordinate system for this operation
     |  
     |  getAspectRatioLimits(...)
     |      getAspectRatioLimits() -> (float, float)
     |      
     |      Returns the minimum and maximum aspect ratio limits for the camera.
     |  
     |  getFilmApertureLimits(...)
     |      getFilmApertureLimits() -> (float, float)
     |      
     |      Returns the maximum and minimum film aperture limits for the camera.
     |  
     |  getFilmFrustum(...)
     |      getFilmFrustum(distance, applyPanZoom=False) -> (float, float, float, float)
     |      
     |      Returns the film frustum for the camera (horizontal size, vertical size, horizontal offset and vertical offset). The frustum defines the projective transformation.
     |      
     |      * distance (float) - Specifies the focal length
     |      * applyPanZoom (bool) - specifies whether to apply 2D pan/zoom
     |  
     |  getFilmFrustumCorners(...)
     |      getFilmFrustumCorners(distance, applyPanZoom=False) -> MPointArray
     |      
     |      Returns the film frustum for the camera. The frustum defines the projective transformation.
     |      
     |       element 0 is the bottom left
     |       element 1 is the top left
     |       element 2 is the top right
     |       element 3 is the bottom right
     |      
     |      * distance (float) - Specifies the focal length
     |      * applyPanZoom (bool) - specifies whether to apply 2D pan/zoom
     |  
     |  getFocalLengthLimits(...)
     |      getFocalLengthLimits() -> (float, float)
     |      
     |      Returns the maximum and minimum focal length limits for the camera.
     |  
     |  getPortFieldOfView(...)
     |      getPortFieldOfView(int, int) -> (float, float)
     |      
     |      Returns the horizontal and vertical field of view in radians from the given viewport width and height.
     |      
     |      * width (int) - width of viewport
     |      * height (int) - height of viewport
     |  
     |  getRenderingFrustum(...)
     |      getRenderingFrustum(windowAspect) -> (float, float, float, float)
     |      
     |      Returns the rendering frustum (left, right, bottom and top) for the camera.
     |      This is the frustum that the maya renderer uses.
     |      
     |      * windowAspect (float) - windowAspect
     |  
     |  getViewParameters(...)
     |      getViewParameters(windowAspect, applyOverscan=False, applySqueeze=False, applyPanZoom=False) -> (float, float, float, float)
     |      
     |      Returns the intermediate viewing frustum (apertureX, apertureY, offsetX and offsetY) parameters for the camera. The aperture and offset are used by getViewingFrustum() and getRenderingFrustum() to compute the extent (left, right, top, bottom) of the frustum in the following manner:
     |      
     |       left = focal_to_near * (-0.5*apertureX + offsetX)
     |       right = focal_to_near * (0.5*apertureX + offsetX)
     |       bottom = focal_to_near * (-0.5*apertureY + offsetY)
     |       top = focal_to_near * (0.5*apertureY + offsetY)
     |      
     |      Here, focal_to_near is equal to cameraScale if the camera is orthographic, or it is equal to ((nearClippingPlane / (focalLength * MM_TO_INCH)) * cameraScale) where MM_TO_INCH equals 0.03937.
     |      
     |      * windowAspect (float) - windowAspect
     |      * applyOverscan (bool) - specifies whether to apply overscan
     |      * applySqueeze (bool) - specifies whether to apply the lens squeeze ratio of the camera
     |      * applyPanZoom (bool) - specifies whether to apply 2D pan/zoom
     |  
     |  getViewingFrustum(...)
     |      getViewingFrustum(windowAspect, applyOverscan=False, applySqueeze=False, applyPanZoom=False) -> (float, float, float, float)
     |      
     |      Returns the viewing frustum (left, right, bottom and top) for the camera.
     |      
     |      * windowAspect (float) - windowAspect
     |      * applyOverscan (bool) - specifies whether to apply overscan
     |      * applySqueeze (bool) - specifies whether to apply the lens squeeze ratio of the camera
     |      * applyPanZoom (bool) - specifies whether to apply 2D pan/zoom
     |  
     |  hasSamePerspective(...)
     |      hasSamePerspective(otherCamera) -> bool
     |      
     |      Returns True if the camera has same perspective settings as the given camera.
     |      
     |      This method will only work when the world space information for the camera is available, i.e. when the function set has been initialized with a DAG path.
     |      
     |      * otherCamera (MDagPath) - Camera to compare perspective with
     |  
     |  horizontalFieldOfView(...)
     |      horizontalFieldOfView() -> float
     |      
     |      Returns the horizontal field of view for the camera.
     |  
     |  isOrtho(...)
     |      isOrtho() -> bool
     |      
     |      Returns True if the camera is in orthographic mode.
     |  
     |  postProjectionMatrix(...)
     |      postProjectionMatrix(context=None) -> MFloatMatrix
     |      
     |      Returns the post projection matrix used to compute film roll on the film back plane.
     |      
     |      * context (MDGContext) - DG time-context to specify time of evaluation
     |  
     |  projectionMatrix(...)
     |      projectionMatrix(context=None) -> MFloatMatrix
     |      
     |      Returns the orthographic or perspective projection matrix for the camera.
     |      The projection matrix that maya's software renderer uses is almost identical to the OpenGL projection matrix. The difference is that maya uses a left hand coordinate system and so the entries [2][2] and [3][2] are negated.
     |      
     |      * context (MDGContext) - DG time-context to specify time of evaluation
     |  
     |  rightDirection(...)
     |      rightDirection(space=kObject) -> MVector
     |      
     |      Returns the right direction vector for the camera.
     |      
     |      * space (int) - Specifies the coordinate system for this operation
     |  
     |  set(...)
     |      set(wsEyeLocation, wsViewDirection, wsUpDirection, horizFieldOfView, aspectRatio) -> self
     |      
     |      Convenience routine to set the camera viewing parameters. The specified values should be in world space where applicable.
     |      
     |      This method will only work when the world space information for the camera is available, i.e. when the function set has been initialized with a DAG path.
     |      
     |      * wsEyeLocation (MPoint) - Eye location to set in world space
     |      * wsViewDirection (MVector) - View direction to set in world space
     |      * wsUpDirection (MVector) - Up direction to set in world space
     |      * horizFieldOfView (float) - The horizontal field of view to set
     |      * aspectRatio (float) - The aspect ratio to set
     |  
     |  setAspectRatio(...)
     |      setAspectRatio(aspectRatio) -> self
     |      
     |      Set the aspect ratio of the View.  The aspect ratio is expressed as width/height.  This also modifies the entity's scale transformation to reflect the new aspect ratio.
     |      
     |      * aspectRatio (float) - The aspect ratio to be set
     |  
     |  setCenterOfInterestPoint(...)
     |      setCenterOfInterestPoint(centerOfInterest, space=kObject) -> self
     |      
     |      Positions the center-of-interest of the camera keeping the eye-point fixed in space. This method changed the orientation and translation of the camera's transform attributes as well as the center-of-interest distance.
     |      
     |      This method will only work when the world space information for the camera is available, i.e. when the function set has been initialized with a DAG path.
     |      
     |      * centerOfInterest (MPoint) - Center of interest point to be set
     |      * space (int) - Specifies the coordinate system for this operation
     |  
     |  setEyePoint(...)
     |      setEyePoint(eyeLocation, space=kObject) -> self
     |      
     |      Positions the eye-point of the camera keeping the center of interest fixed in space. This method changed the orientation and translation of the camera's transform attributes as well as the center-of-interest distance.
     |      
     |      This method will only work when the world space information for the camera is available, i.e. when the function set has been initialized with a DAG path.
     |      
     |      * eyeLocation (MPoint) - The eye location to set
     |      * space (int) - Specifies the coordinate system for this operation
     |  
     |  setHorizontalFieldOfView(...)
     |      setHorizontalFieldOfView(fov) -> self
     |      
     |      Sets the horizontal field of view for the camera.
     |      
     |      * fov (float) - The horizontal field of view value to be set
     |  
     |  setIsOrtho(...)
     |      setIsOrtho(orthoState, useDist=None) -> self
     |      
     |      Switch the camera in and out of orthographic mode.  When the switch happens, the camera has to calculate a new fov or ortho width, each of which is based on the other and a set distance.  The caller can specify the distance; otherwise the center of interest is used.
     |      
     |      * orthoState (bool) - If True then the camera will be orthographic
     |      * useDist (float) - distance to use.
     |  
     |  setNearFarClippingPlanes(...)
     |      setNearFarClippingPlanes(near, far) -> self
     |      
     |      Set the distances to the Near and Far Clipping Planes.
     |      
     |      * near (float) - The near clipping plane value to be set
     |      * far (float) - The far clipping plane value to be set
     |  
     |  setVerticalFieldOfView(...)
     |      setVerticalFieldOfView(fov) -> self
     |      
     |      Sets the vertical field of view for the camera.
     |      
     |      * fov (float) - The vertical field of view value to be set
     |  
     |  upDirection(...)
     |      upDirection(space=kObject) -> MVector
     |      
     |      Returns the up direction vector for the camera.
     |      
     |      * space (int) - Specifies the coordinate system for this operation
     |  
     |  verticalFieldOfView(...)
     |      verticalFieldOfView() -> float
     |      
     |      Returns the vertical field of view for the camera.
     |  
     |  viewDirection(...)
     |      viewDirection(space=kObject) -> MVector
     |      
     |      Returns the view direction for the camera
     |      
     |      * space (int) - Specifies the coordinate system for this operation
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  cameraScale
     |      The camera scale.
     |  
     |  centerOfInterest
     |      The linear distance from the camera's eye point to the center of interest.
     |  
     |  fStop
     |      The f-stop value for the camera.
     |  
     |  farClippingPlane
     |      The distance to the far clipping plane.
     |  
     |  farFocusDistance
     |      The farthest distance within the well-focus region
     |  
     |  filmFit
     |      How the digital image is to be fitted to the film back.
     |      Valid values:
     |      * kFillFilmFit           The system calculates both horizontal and vertical fits and then applies the one that makes the digital image larger than the film back.
     |      * kHorizontalFilmFit     The digital image is made to fit the film back exactly in the horizontal direction. This then gives each pixel a horizontal size = (film back width) / (horizontal resolution). The pixel height is then = (pixel width) / (pixel aspect ratio). Now that the pixel has a size, resolution gives us a complete image. That image will match the film back exactly in width. It will almost never match in height, either being too tall or too short. By playing with the numbers you can get it pretty close though.
     |      * kVerticalFilmFit       The same idea as horizontal fit, only applied vertically. Thus the digital image will match the film back exactly in height, but miss in width.
     |      * kOverscanFilmFit       Over-scanning the film gate in the camera view allows us to choreograph action outside of the frustum from within the camera view without having to resort to a dolly or zoom. This feature is also essential for animating image planes.
     |  
     |  filmFitOffset
     |      The film fit offset for the camera.
     |  
     |  filmRollOrder
     |      The order in which the film back rotation is applied with respect to the pivot point.
     |      Valid values:
     |      * kRotateTranslate      The film back is first rotated before it is translated by the pivot value.
     |      * kTranslateRotate      The film back is translated by the pivot before it is rotated.
     |  
     |  filmRollValue
     |      The film roll value for film back.
     |  
     |  filmTranslateH
     |      The horizontal film translate value.  This value corresponds to the normalized viewport.
     |  
     |  filmTranslateV
     |      The vertical film translate value. This value corresponds to the normalized viewport, [-1,1].
     |  
     |  focalLength
     |      The focal length for the camera.
     |      This is the distance along the lens axis between the lens and the film plane when "focal distance" is infinitely large. This is an optical property of the lens. Specified in millimeters.
     |  
     |  focusDistance
     |      The focus distance for the camera. This value sets the focus at a certain distance in front of the camera.
     |  
     |  horizontalFilmAperture
     |      The horizontal film aperture for the camera.
     |  
     |  horizontalFilmOffset
     |      The horizontal offset of the film. Unit used is inches.
     |  
     |  horizontalPan
     |      The camera 2D horizontal pan value. Unit is inches.
     |  
     |  horizontalRollPivot
     |      The horizontal roll pivot for film back roll.
     |  
     |  horizontalShake
     |      The horizontal offset of the film due to the shake attribute. Unit used is inches.
     |  
     |  isClippingPlanes
     |      Whether or not manual clipping planes are activated.
     |  
     |  isDepthOfField
     |      Whether or not the depth of field calculation is performed for the camera.
     |  
     |  isDisplayFilmGate
     |      Whether or not the film gate icons are displayed when looking through the camera.
     |  
     |  isDisplayGateMask
     |      Whether or not the film gate is displayed shaded.
     |  
     |  isMotionBlur
     |      Wheter or not motion blur is on/off for the camera.
     |  
     |  isVerticalLock
     |      Determines if vertical lock is turned on for the camera.
     |  
     |  lensSqueezeRatio
     |      The lens squeeze ratio for the camera
     |  
     |  nearClippingPlane
     |      The distance to the near clipping plane.
     |  
     |  nearFocusDistance
     |      The nearest distance within the well-focus region
     |  
     |  orthoWidth
     |      The orthographic projection width.
     |  
     |  overscan
     |      The percent of overscan for this camera.
     |  
     |  panZoomEnabled
     |      The toggle value for the camera 2D pan/zoom enabled attribute.
     |      If this attribute is False, the 2D pan/zoom values are ignored by the camera.
     |  
     |  postScale
     |      The post projection matrix's post-scale value.
     |  
     |  preScale
     |      The post projection matrix's pre-scale value.
     |  
     |  renderPanZoom
     |      The toggle value for the camera render 2D pan/zoom attribute.
     |      If this attribute is False, the 2D pan/zoom values will not affect the output render.
     |  
     |  shakeEnabled
     |      The toggle value for the camera shake enabled attribute.
     |      If this attribute is False, the horizontalShake and verticalShake values are ignored by the camera.
     |  
     |  shakeOverscan
     |      The camera shake overscan value. Unit is a multiplier to the film aperture.
     |  
     |  shakeOverscanEnabled
     |      The toggle value for the camera shake overscan attribute.
     |      If this attribute is False, the shakeOverscan value is ignored by the camera.
     |  
     |  shutterAngle
     |      The shutter angle which is one of the variables used to compute motion blur. The shutter angle is specified in radians.
     |  
     |  stereoHIT
     |      The camera stereo horizontal image translation (stereo HIT) value.  Unit is inches.
     |  
     |  stereoHITEnabled
     |      The toggle value for the stereo HIT enabled attribute.
     |      If this attribute is False, the stereoHIT value is ignored by the camera.
     |  
     |  tumblePivot
     |      The tumble pivot value for the camera. The pivot value will be in world space coordinates unless usePivotAsLocalSpace is True in which case the pivot is a relative offset.
     |  
     |  usePivotAsLocalSpace
     |      The local axis tumble setting for this camera.True if using local space tumbling for this camera, or False if using the current global tumble setting in Maya.
     |  
     |  verticalFilmAperture
     |      The vertical film aperture for the camera.
     |  
     |  verticalFilmOffset
     |      The vertical offset of the film. Unit used is inches.
     |  
     |  verticalPan
     |      The camera 2D vertical pan value. Unit is inches.
     |  
     |  verticalRollPivot
     |      The vertical roll pivot for film back roll.
     |  
     |  verticalShake
     |      The vertical film-based camera shake value. Unit used is inches.
     |  
     |  zoom
     |      The camera 2D zoom value, which is the percent over the film viewable frustum to display
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kFillFilmFit = 0
     |  
     |  kHorizontalFilmFit = 1
     |  
     |  kInvalid = 4
     |  
     |  kOverscanFilmFit = 3
     |  
     |  kRotateTranslate = 0
     |  
     |  kTranslateRotate = 1
     |  
     |  kVerticalFilmFit = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDagNode:
     |  
     |  addChild(...)
     |      addChild(node, index=kNextPos, keepExistingParents=False) -> self
     |      
     |      Makes a node a child of this one.
     |  
     |  child(...)
     |      child(index) -> MObject
     |      
     |      Returns the specified child of this node.
     |  
     |  childCount(...)
     |      childCount() -> int
     |      
     |      Returns the number of nodes which are children of this one.
     |  
     |  dagPath(...)
     |      dagPath() -> MDagPath
     |      
     |      Returns the DAG path to which this function set is attached. Raises a TypeError if the function set is attached to an MObject rather than a path.
     |  
     |  dagRoot(...)
     |      dagRoot() -> MObject
     |      
     |      Returns the root node of the first path leading to this node.
     |  
     |  duplicate(...)
     |      duplicate(instance=False, instanceLeaf=False) -> MObject
     |      
     |      Duplicates the DAG hierarchy rooted at the current node.
     |  
     |  fullPathName(...)
     |      fullPathName() -> string
     |      
     |      Returns the full path of the attached object, from the root of the DAG on down.
     |  
     |  getAllPaths(...)
     |      getAllPaths() -> MDagPathArray
     |      
     |      Returns all of the DAG paths which lead to the object to which this function set is attached.
     |  
     |  getConnectedSetsAndMembers(...)
     |      getConnectedSetsAndMembers(instance, renderableSetsOnly) -> (MObjectArray, MObjectArray)
     |      
     |      Returns a tuple containing an array of sets and an array of the
     |      components of the DAG object which are in those sets. If the entire object is in a set, then the corresponding entry in the comps array will have no elements in it.
     |  
     |  getPath(...)
     |      getPath() -> MDagPath
     |      
     |      Returns the DAG path to which this function set is attached, or the first path to the node if the function set is attached to an MObject.
     |  
     |  hasChild(...)
     |      hasChild(node) -> bool
     |      
     |      Returns True if the specified node is a child of this one.
     |  
     |  hasParent(...)
     |      hasParent(node) -> bool
     |      
     |      Returns True if the specified node is a parent of this one.
     |  
     |  instanceCount(...)
     |      instanceCount(indirect) -> int
     |      
     |      Returns the number of instances for this node.
     |  
     |  isChildOf(...)
     |      isChildOf(node) -> bool
     |      
     |      Returns True if the specified node is a parent of this one.
     |  
     |  isInstanced(...)
     |      isInstanced(indirect=True) -> bool
     |      
     |      Returns True if this node is instanced.
     |  
     |  isInstancedAttribute(...)
     |      isInstancedAttribute(attr) -> bool
     |      
     |      Returns True if the specified attribute is an instanced attribute of this node.
     |  
     |  isParentOf(...)
     |      isParentOf(node) -> bool
     |      
     |      Returns True if the specified node is a child of this one.
     |  
     |  parent(...)
     |      parent(index) -> MObject
     |      
     |      Returns the specified parent of this node.
     |  
     |  parentCount(...)
     |      parentCount() -> int
     |      
     |      Returns the number of parents this node has.
     |  
     |  partialPathName(...)
     |      partialPathName() -> string
     |      
     |      Returns the minimum path string necessary to uniquely identify the attached object.
     |  
     |  removeChild(...)
     |      removeChild(node) -> self
     |      
     |      Removes the child, specified by MObject, reparenting it under the world.
     |  
     |  removeChildAt(...)
     |      removeChildAt(index) -> self
     |      
     |      Removes the child, specified by index, reparenting it under the world.
     |  
     |  setObject(...)
     |      setObject(MObject or MDagPath) -> self
     |      
     |      Attaches the function set to the specified node or DAG path.
     |  
     |  transformationMatrix(...)
     |      transformationMatrix() -> MMatrix
     |      
     |      Returns the object space transformation matrix for this DAG node.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDagNode:
     |  
     |  boundingBox
     |      Node's bounding box, in object space.
     |  
     |  inModel
     |      True if the node has been added to the model.
     |  
     |  inUnderWorld
     |      True if this node is in the underworld of another node (e.g. a curve on surface is in the underworld of the surface).
     |  
     |  isInstanceable
     |      True if instancing is allowed for this node.
     |  
     |  isIntermediateObject
     |      True if this node is just an intermediate in part of a larger calculation (e.g. input to a deformer).
     |  
     |  objectColor
     |      Index from 0 to 7 indicating the color in which the node is to be drawn when inactive, assuming that it is drawable.
     |  
     |  objectColorRGB
     |      RGB value indicating the color in which the node is to be drawn when inactive, assuming that it is drawable.
     |  
     |  objectColorType
     |      Determines whether the default color, indexed object color, orRGB object color is used for this object.
     |  
     |  useObjectColor
     |      If True then the node will be drawn using its 'objectColor', otherwise it will be drawn using Maya's default color. Thismethod is deprecated, use objectColorType instead.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDagNode:
     |  
     |  kNextPos = 255
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDependencyNode:
     |  
     |  absoluteName(...)
     |      Returns the absolute name of this node.  The absolute name of a node is the full namespace path starting at (and including) the root namespace, down to (and including) the node itself.  Regardless of relative name mode, absoluteName() will always return a full namespace path prefixed with a leading colon (the root namespace).
     |  
     |  addAttribute(...)
     |      Adds a new dynamic attribute to the node.
     |  
     |  addExternalContentForFileAttr(...)
     |      Adds content info to the specified table from a file path attribute.
     |  
     |  affectsAnimation(...)
     |      Returns true if the changes to the node may affect animation.
     |  
     |  attribute(...)
     |      Returns an attribute of the node, given either its index or name.
     |  
     |  attributeClass(...)
     |      Returns the class of the specified attribute.
     |  
     |  attributeCount(...)
     |      Returns the number of attributes on the node.
     |  
     |  canBeWritten(...)
     |      Returns true if the node will be written to file.
     |  
     |  dgCallbackIds(...)
     |      Returns DG timing information for a specific callback type, broken down by callbackId.
     |  
     |  dgCallbacks(...)
     |      Returns DG timing information broken down by callback type.
     |  
     |  dgTimer(...)
     |      Returns a specific DG timer metric for a given timer type.
     |  
     |  dgTimerOff(...)
     |      Turns DG timing off for this node.
     |  
     |  dgTimerOn(...)
     |      Turns DG timing on for this node.
     |  
     |  dgTimerQueryState(...)
     |      Returns the current DG timer state for this node.
     |  
     |  dgTimerReset(...)
     |      Resets all DG timers for this node.
     |  
     |  findAlias(...)
     |      Returns the attribute which has the given alias.
     |  
     |  findPlug(...)
     |      Returns a plug for the given attribute.
     |  
     |  getAffectedAttributes(...)
     |      Returns all of the attributes which are affected by the specified attribute.
     |  
     |  getAffectingAttributes(...)
     |      Returns all of the attributes which affect the specified attribute.
     |  
     |  getAliasAttr(...)
     |      Returns the node's alias attribute, which is a special attribute used to store information about the node's attribute aliases.
     |  
     |  getAliasList(...)
     |      Returns all of the node's attribute aliases.
     |  
     |  getConnections(...)
     |      Returns all the plugs which are connected to attributes of this node.
     |  
     |  getExternalContent(...)
     |      Gets the external content (files) that this node depends on.
     |  
     |  hasAttribute(...)
     |      Returns True if the node has an attribute with the given name.
     |  
     |  hasUniqueName(...)
     |      Returns True if the node's name is unique.
     |  
     |  isFlagSet(...)
     |      Returns the state of the specified node flag.
     |  
     |  isNewAttribute(...)
     |      Returns True if the specified attribute was added in the current scene, and not by by one of its referenced files.
     |  
     |  isTrackingEdits(...)
     |      Returns True if the node is referenced or in an assembly that is tracking edits.
     |  
     |  name(...)
     |      Returns the node's name.
     |  
     |  plugsAlias(...)
     |      Returns the alias for a plug's attribute.
     |  
     |  removeAttribute(...)
     |      Removes a dynamic attribute from the node.
     |  
     |  reorderedAttribute(...)
     |      Returns one of the node's attribute, based on the order in which they are written to file.
     |  
     |  setAffectsAnimation(...)
     |      Specifies that modifications to a node could potentially affect the animation.
     |  
     |  setAlias(...)
     |      Adds or removes an attribute alias.
     |  
     |  setDoNotWrite(...)
     |      Used to prevent the node from being written to file.
     |  
     |  setExternalContent(...)
     |      Changes the location of external content.
     |  
     |  setExternalContentForFileAttr(...)
     |      Sets content info in the specified attribute from the table.
     |  
     |  setFlag(...)
     |      Sets the state of the specified node flag.
     |  
     |  setName(...)
     |      Sets the node's name.
     |  
     |  setUuid(...)
     |      Sets the node's UUID.
     |  
     |  userNode(...)
     |      Returns the MPxNode object for a plugin node.
     |  
     |  uuid(...)
     |      Returns the node's UUID.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MFnDependencyNode:
     |  
     |  allocateFlag(...)
     |      Allocates a flag on all nodes for use by the named plugin and returns the flag's index.
     |  
     |  classification(...)
     |      Returns the classification string for the named node type.
     |  
     |  deallocateAllFlags(...)
     |      Deallocates all node flags which are currently allocated to the named plugin.
     |  
     |  deallocateFlag(...)
     |      Deallocates the specified node flag, which was previously allocated by the named plugin using allocateFlag().
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDependencyNode:
     |  
     |  isDefaultNode
     |      True if this is a default node, created automatically by Maya.
     |  
     |  isFromReferencedFile
     |      True if the node is from a referenced file, False if the node is part of the main scene.
     |  
     |  isLocked
     |      True if the node is locked against changes.
     |  
     |  isShared
     |      True if the node is shared.
     |  
     |  namespace
     |      Name of the namespace which contains the node.
     |  
     |  pluginName
     |      Name of the plugin which registered the node type, if any.
     |  
     |  typeId
     |      MTypeId for the node's type.
     |  
     |  typeName
     |      Name of the node's type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDependencyNode:
     |  
     |  kExtensionAttr = 3
     |  
     |  kInvalidAttr = 4
     |  
     |  kLocalDynamicAttr = 1
     |  
     |  kNormalAttr = 2
     |  
     |  kTimerInvalidState = 3
     |  
     |  kTimerMetric_callback = 0
     |  
     |  kTimerMetric_callbackNotViaAPI = 6
     |  
     |  kTimerMetric_callbackViaAPI = 5
     |  
     |  kTimerMetric_compute = 1
     |  
     |  kTimerMetric_computeDuringCallback = 7
     |  
     |  kTimerMetric_computeNotDuringCallback = 8
     |  
     |  kTimerMetric_dirty = 2
     |  
     |  kTimerMetric_draw = 3
     |  
     |  kTimerMetric_fetch = 4
     |  
     |  kTimerMetrics = 9
     |  
     |  kTimerOff = 0
     |  
     |  kTimerOn = 1
     |  
     |  kTimerType_count = 2
     |  
     |  kTimerType_inclusive = 1
     |  
     |  kTimerType_self = 0
     |  
     |  kTimerTypes = 3
     |  
     |  kTimerUninitialized = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnComponent(MFnBase)
     |  This is the base class for all function sets which deal with
     |  component objects.
     |  
     |  __init__()
     |  Initializes a new, empty MFnComponent object
     |  __init__(MObject component)
     |  Initializes a new MFnComponent function set, attached to the specified component.
     |  
     |  Method resolution order:
     |      MFnComponent
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  isEqual(...)
     |      isEqual(MObject other) -> bool
     |      
     |      Returns True if other refers to the same component as the
     |      one to which the function set is currently attached.
     |  
     |  weight(...)
     |      weight(index) -> MWeight
     |      
     |      Returns the weight associated with the specified element,
     |      where index can range from 0 to elementCount-1.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  componentType
     |      Type of the component. (MFn Type constant)
     |  
     |  elementCount
     |      Number of elements in the component.
     |  
     |  hasWeights
     |      True if the component has weights associated with its elements.
     |  
     |  isComplete
     |      Marking a component as complete means that it represents a full set
     |      of indices from 0 to elementCount-1
     |  
     |  isEmpty
     |      True if the component contains no elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnComponentListData(MFnData)
     |  MFnComponentListData allows the creation and manipulation of component list
     |  (represented as MObjects) data objects for use in the dependency graph.
     |  
     |  __init__()
     |  Initializes a new, empty MFnComponentListData object.
     |  
     |  __init__(MObject)
     |  Initializes a new MFnComponentListData function set, attached
     |  to the specified object.
     |  
     |  Method resolution order:
     |      MFnComponentListData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  add(...)
     |      add(MObject) -> self
     |      
     |      Adds the specified component to the end of the list.
     |  
     |  clear(...)
     |      clear() -> self
     |      
     |      Removes all of the components from the list.
     |  
     |  create(...)
     |      create() -> MObject
     |      
     |      Creates a new, empty component list, attaches it to the
     |      function set and returns an MObject which references it.
     |  
     |  get(...)
     |      get(index) -> MObject
     |      
     |      Returns a copy of the component at the specified index.
     |      Raises IndexError if the index is out of range.
     |  
     |  has(...)
     |      has(MObject) -> bool
     |      
     |      Returns True if the list contains the specified
     |      component, False otherwise.
     |  
     |  length(...)
     |      length() -> int
     |      
     |      Returns the number of components in the list.
     |  
     |  remove(...)
     |      remove(MObject) -> self
     |      remove(index) -> self
     |      
     |      Removes the specified component from the list.
     |      No exception is raised if the component is not in the list,
     |      raises IndexError if index is out of range
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnCompoundAttribute(MFnAttribute)
     |  Functionset for creating and working with compound attributes.
     |  
     |  Method resolution order:
     |      MFnCompoundAttribute
     |      MFnAttribute
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addChild(...)
     |      Add a child attribute.
     |  
     |  child(...)
     |      Returns one of the attribute's children, specified by index.
     |  
     |  create(...)
     |      Creates a new compound attribute, attaches it to the function set and returns it as an MObject.
     |  
     |  getAddAttrCmds(...)
     |      Returns a list of MEL 'addAttr' commands capable of recreating the attribute and all of its children.
     |  
     |  numChildren(...)
     |      Returns number of child attributes currently parented under the compound attribute.
     |  
     |  removeChild(...)
     |      Remove a child attribute.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnAttribute:
     |  
     |  accepts(...)
     |      Returns True if this attribute can accept a connection of the given type.
     |  
     |  acceptsAttribute(...)
     |      Returns True if this attribute can accept a connection with the given attribute.
     |  
     |  addToCategory(...)
     |      Adds the attribute to a category
     |  
     |  getAddAttrCmd(...)
     |      Returns a string containing a MEL 'addAttr' command capable of recreating the attribute.
     |  
     |  hasCategory(...)
     |      Checks to see if the attribute has a given category
     |  
     |  setNiceNameOverride(...)
     |      Sets a nice UI name for this attribute rather than using the default derived from it's long name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnAttribute:
     |  
     |  affectsAppearance
     |      Does the attribute affect how the node is drawn in Maya's viewport?
     |  
     |  affectsWorldSpace
     |      Does the attribute affect the node's worldSpace matrix?
     |  
     |  array
     |      Is the attribute an array?
     |  
     |  cached
     |      Should the attribute's value be cached in the datablock?
     |  
     |  channelBox
     |      Should the attribute be displayed in the Channel Box?
     |  
     |  connectable
     |      Can connections be made to the attribute?
     |  
     |  disconnectBehavior
     |      What should happen when the attribute loses an incoming connection?
     |  
     |  dynamic
     |      Is the attribute a dynamic attribute?
     |  
     |  extension
     |      Is the attribute an extension attribute?
     |  
     |  hidden
     |      If True the attribute will not be displayed in the Attribute Editor.
     |  
     |  indeterminant
     |      Hint to DG that this attribute may not always be used when computing the attributes which are dependent upon it.
     |  
     |  indexMatters
     |      If False, connectAttr -nextAvailable can be used with this attribute. If True then an explicit index must be provided.
     |  
     |  internal
     |      Will the node handle the attribute's data storage itself, outside of the node's data block?
     |  
     |  isProxyAttribute
     |      Does the attribute is a proxy attribute?
     |  
     |  keyable
     |      Can keys be set on the attribute?
     |  
     |  name
     |      Attribute's long name.
     |  
     |  parent
     |      Parent attribute. MObject::kNullObj if attr has no parent.
     |  
     |  readable
     |      Is the attribute readable?
     |  
     |  renderSource
     |      Is the attribute a render source?
     |  
     |  shortName
     |      Attribute's short name.
     |  
     |  storable
     |      Should the attribute's value be preserved when the node is written to file?
     |  
     |  usedAsColor
     |      Should the attribute be treated as a color in the UI?
     |  
     |  usedAsFilename
     |      Should the attribute be treated as a file name in the UI?
     |  
     |  usesArrayDataBuilder
     |      Array attributes only: does the attribute create elements using MArrayDataBuilder?
     |  
     |  worldSpace
     |      DAG nodes only: if the node is instanced, will the attribute have separate values for each instance?
     |  
     |  writable
     |      Is the attribute writable?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnAttribute:
     |  
     |  kDelete = 0
     |  
     |  kNothing = 2
     |  
     |  kReset = 1
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnContainerNode(MFnDependencyNode)
     |  Function set for containers.
     |  
     |  Method resolution order:
     |      MFnContainerNode
     |      MFnDependencyNode
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  clear(...)
     |      clear()
     |      
     |      Delete all members of the container.
     |  
     |  getMembers(...)
     |      getMembers() -> MObjectArray
     |      
     |      Return an array of the nodes included in this container.
     |  
     |  getParentContainer(...)
     |      getParentContainer() -> MObject
     |      
     |      Return the parent container, if there is one. Otherwise return an empty MObject.
     |  
     |  getPublishedNames(...)
     |      getPublishedNames(unboundOnly=bool) -> [MString]
     |      
     |      Return a list of published names on the container. Depending on the arguments, either all published names or only unbound published names will be returned.
     |  
     |  getPublishedNodes(...)
     |      getPublishedNodes(publishNodeType=MPublishNodeType) -> ([MString] publishedNames, MObjectArray publishedNodes)
     |      
     |      Return a list of the published nodes of a given type. For any names that have assigned nodes, return the node at the corresponding array index. For any names that do not have assigned nodes, a NULL MObject will be at the corresponding array index.
     |  
     |  getPublishedPlugs(...)
     |      getPublishedPlugs() -> (MPlugArray publishedPlugs, [MString] publishedNames)
     |      
     |      Return a tuple of plugs that have been published on this container and the names of those plugs.
     |  
     |  getRootTransform(...)
     |      getRootTransform() -> MObject
     |      
     |      Return the root transform, if there is one. Otherwise return an empty MObject.
     |  
     |  getSubcontainers(...)
     |      getSubcontainers() -> MObjectArray
     |      
     |      Return an array of the container nodes included in this container.
     |  
     |  isCurrent(...)
     |      isCurrent() -> bool
     |      
     |      Return whether the container node managed by this function set is the current container.
     |  
     |  makeCurrent(...)
     |      makeCurrent(isCurrent) -> self
     |      
     |      Set or clear whether the container managed by this function set is denoted as the
     |      the current container.  If the flag is true and the container is allowed to be
     |      current, then the current container is set to be the container.  Otherwise, if the
     |      container managed by the function set is the current container, then the current
     |      container is cleared.
     |      
     |      * isCurrent (True/False) - Specifies whether this container shall be current.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  getCurrentAsMObject(...)
     |      getCurrentAsMObject() -> MObject
     |      
     |      Retrieve the current container node.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kChildAnchor = 1
     |  
     |  kGeneric = 2
     |  
     |  kParentAnchor = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDependencyNode:
     |  
     |  absoluteName(...)
     |      Returns the absolute name of this node.  The absolute name of a node is the full namespace path starting at (and including) the root namespace, down to (and including) the node itself.  Regardless of relative name mode, absoluteName() will always return a full namespace path prefixed with a leading colon (the root namespace).
     |  
     |  addAttribute(...)
     |      Adds a new dynamic attribute to the node.
     |  
     |  addExternalContentForFileAttr(...)
     |      Adds content info to the specified table from a file path attribute.
     |  
     |  affectsAnimation(...)
     |      Returns true if the changes to the node may affect animation.
     |  
     |  attribute(...)
     |      Returns an attribute of the node, given either its index or name.
     |  
     |  attributeClass(...)
     |      Returns the class of the specified attribute.
     |  
     |  attributeCount(...)
     |      Returns the number of attributes on the node.
     |  
     |  canBeWritten(...)
     |      Returns true if the node will be written to file.
     |  
     |  create(...)
     |      Creates a new node of the given type.
     |  
     |  dgCallbackIds(...)
     |      Returns DG timing information for a specific callback type, broken down by callbackId.
     |  
     |  dgCallbacks(...)
     |      Returns DG timing information broken down by callback type.
     |  
     |  dgTimer(...)
     |      Returns a specific DG timer metric for a given timer type.
     |  
     |  dgTimerOff(...)
     |      Turns DG timing off for this node.
     |  
     |  dgTimerOn(...)
     |      Turns DG timing on for this node.
     |  
     |  dgTimerQueryState(...)
     |      Returns the current DG timer state for this node.
     |  
     |  dgTimerReset(...)
     |      Resets all DG timers for this node.
     |  
     |  findAlias(...)
     |      Returns the attribute which has the given alias.
     |  
     |  findPlug(...)
     |      Returns a plug for the given attribute.
     |  
     |  getAffectedAttributes(...)
     |      Returns all of the attributes which are affected by the specified attribute.
     |  
     |  getAffectingAttributes(...)
     |      Returns all of the attributes which affect the specified attribute.
     |  
     |  getAliasAttr(...)
     |      Returns the node's alias attribute, which is a special attribute used to store information about the node's attribute aliases.
     |  
     |  getAliasList(...)
     |      Returns all of the node's attribute aliases.
     |  
     |  getConnections(...)
     |      Returns all the plugs which are connected to attributes of this node.
     |  
     |  getExternalContent(...)
     |      Gets the external content (files) that this node depends on.
     |  
     |  hasAttribute(...)
     |      Returns True if the node has an attribute with the given name.
     |  
     |  hasUniqueName(...)
     |      Returns True if the node's name is unique.
     |  
     |  isFlagSet(...)
     |      Returns the state of the specified node flag.
     |  
     |  isNewAttribute(...)
     |      Returns True if the specified attribute was added in the current scene, and not by by one of its referenced files.
     |  
     |  isTrackingEdits(...)
     |      Returns True if the node is referenced or in an assembly that is tracking edits.
     |  
     |  name(...)
     |      Returns the node's name.
     |  
     |  plugsAlias(...)
     |      Returns the alias for a plug's attribute.
     |  
     |  removeAttribute(...)
     |      Removes a dynamic attribute from the node.
     |  
     |  reorderedAttribute(...)
     |      Returns one of the node's attribute, based on the order in which they are written to file.
     |  
     |  setAffectsAnimation(...)
     |      Specifies that modifications to a node could potentially affect the animation.
     |  
     |  setAlias(...)
     |      Adds or removes an attribute alias.
     |  
     |  setDoNotWrite(...)
     |      Used to prevent the node from being written to file.
     |  
     |  setExternalContent(...)
     |      Changes the location of external content.
     |  
     |  setExternalContentForFileAttr(...)
     |      Sets content info in the specified attribute from the table.
     |  
     |  setFlag(...)
     |      Sets the state of the specified node flag.
     |  
     |  setName(...)
     |      Sets the node's name.
     |  
     |  setUuid(...)
     |      Sets the node's UUID.
     |  
     |  userNode(...)
     |      Returns the MPxNode object for a plugin node.
     |  
     |  uuid(...)
     |      Returns the node's UUID.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MFnDependencyNode:
     |  
     |  allocateFlag(...)
     |      Allocates a flag on all nodes for use by the named plugin and returns the flag's index.
     |  
     |  classification(...)
     |      Returns the classification string for the named node type.
     |  
     |  deallocateAllFlags(...)
     |      Deallocates all node flags which are currently allocated to the named plugin.
     |  
     |  deallocateFlag(...)
     |      Deallocates the specified node flag, which was previously allocated by the named plugin using allocateFlag().
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDependencyNode:
     |  
     |  isDefaultNode
     |      True if this is a default node, created automatically by Maya.
     |  
     |  isFromReferencedFile
     |      True if the node is from a referenced file, False if the node is part of the main scene.
     |  
     |  isLocked
     |      True if the node is locked against changes.
     |  
     |  isShared
     |      True if the node is shared.
     |  
     |  namespace
     |      Name of the namespace which contains the node.
     |  
     |  pluginName
     |      Name of the plugin which registered the node type, if any.
     |  
     |  typeId
     |      MTypeId for the node's type.
     |  
     |  typeName
     |      Name of the node's type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDependencyNode:
     |  
     |  kExtensionAttr = 3
     |  
     |  kInvalidAttr = 4
     |  
     |  kLocalDynamicAttr = 1
     |  
     |  kNormalAttr = 2
     |  
     |  kTimerInvalidState = 3
     |  
     |  kTimerMetric_callback = 0
     |  
     |  kTimerMetric_callbackNotViaAPI = 6
     |  
     |  kTimerMetric_callbackViaAPI = 5
     |  
     |  kTimerMetric_compute = 1
     |  
     |  kTimerMetric_computeDuringCallback = 7
     |  
     |  kTimerMetric_computeNotDuringCallback = 8
     |  
     |  kTimerMetric_dirty = 2
     |  
     |  kTimerMetric_draw = 3
     |  
     |  kTimerMetric_fetch = 4
     |  
     |  kTimerMetrics = 9
     |  
     |  kTimerOff = 0
     |  
     |  kTimerOn = 1
     |  
     |  kTimerType_count = 2
     |  
     |  kTimerType_inclusive = 1
     |  
     |  kTimerType_self = 0
     |  
     |  kTimerTypes = 3
     |  
     |  kTimerUninitialized = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnDagNode(MFnDependencyNode)
     |  Function set for operating on DAG nodes.
     |  
     |  __init__()
     |  Initializes a new, empty MFnDagNode functionset.
     |  
     |  __init__(MObject)
     |  Initializes a new MFnDagNode functionset and attaches it to a
     |  DAG node.
     |  
     |  __init__(MDagPath)
     |  Initializes a new MFnDagNode functionset and attaches it to a
     |  DAG path.
     |  
     |  Method resolution order:
     |      MFnDagNode
     |      MFnDependencyNode
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addChild(...)
     |      addChild(node, index=kNextPos, keepExistingParents=False) -> self
     |      
     |      Makes a node a child of this one.
     |  
     |  child(...)
     |      child(index) -> MObject
     |      
     |      Returns the specified child of this node.
     |  
     |  childCount(...)
     |      childCount() -> int
     |      
     |      Returns the number of nodes which are children of this one.
     |  
     |  create(...)
     |      create(type, name=None, parent=MObject.kNullObj) -> MObject
     |      
     |      Creates a new DAG node of the specified type, with the given name.
     |      The type may be either a type name or a type ID. If no name is given
     |      then a unique name will be generated by combining the type name with
     |      an integer.
     |      
     |      If a parent is given then the new node will be parented under it and
     |      the functionset will be attached to the newly-created node. The
     |      newly-created node will be returned.
     |      
     |      If no parent is given and the new node is a transform, it will be
     |      parented under the world and the functionset will be attached to the
     |      newly-created transform. The newly-created transform will be returned.
     |      
     |      If no parent is given and the new node is not a transform then a
     |      transform node will be created under the world, the new node will be
     |      parented under it, and the functionset will be attached to the
     |      transform. The transform will be returned.
     |  
     |  dagPath(...)
     |      dagPath() -> MDagPath
     |      
     |      Returns the DAG path to which this function set is attached. Raises a TypeError if the function set is attached to an MObject rather than a path.
     |  
     |  dagRoot(...)
     |      dagRoot() -> MObject
     |      
     |      Returns the root node of the first path leading to this node.
     |  
     |  duplicate(...)
     |      duplicate(instance=False, instanceLeaf=False) -> MObject
     |      
     |      Duplicates the DAG hierarchy rooted at the current node.
     |  
     |  fullPathName(...)
     |      fullPathName() -> string
     |      
     |      Returns the full path of the attached object, from the root of the DAG on down.
     |  
     |  getAllPaths(...)
     |      getAllPaths() -> MDagPathArray
     |      
     |      Returns all of the DAG paths which lead to the object to which this function set is attached.
     |  
     |  getConnectedSetsAndMembers(...)
     |      getConnectedSetsAndMembers(instance, renderableSetsOnly) -> (MObjectArray, MObjectArray)
     |      
     |      Returns a tuple containing an array of sets and an array of the
     |      components of the DAG object which are in those sets. If the entire object is in a set, then the corresponding entry in the comps array will have no elements in it.
     |  
     |  getPath(...)
     |      getPath() -> MDagPath
     |      
     |      Returns the DAG path to which this function set is attached, or the first path to the node if the function set is attached to an MObject.
     |  
     |  hasChild(...)
     |      hasChild(node) -> bool
     |      
     |      Returns True if the specified node is a child of this one.
     |  
     |  hasParent(...)
     |      hasParent(node) -> bool
     |      
     |      Returns True if the specified node is a parent of this one.
     |  
     |  instanceCount(...)
     |      instanceCount(indirect) -> int
     |      
     |      Returns the number of instances for this node.
     |  
     |  isChildOf(...)
     |      isChildOf(node) -> bool
     |      
     |      Returns True if the specified node is a parent of this one.
     |  
     |  isInstanced(...)
     |      isInstanced(indirect=True) -> bool
     |      
     |      Returns True if this node is instanced.
     |  
     |  isInstancedAttribute(...)
     |      isInstancedAttribute(attr) -> bool
     |      
     |      Returns True if the specified attribute is an instanced attribute of this node.
     |  
     |  isParentOf(...)
     |      isParentOf(node) -> bool
     |      
     |      Returns True if the specified node is a child of this one.
     |  
     |  parent(...)
     |      parent(index) -> MObject
     |      
     |      Returns the specified parent of this node.
     |  
     |  parentCount(...)
     |      parentCount() -> int
     |      
     |      Returns the number of parents this node has.
     |  
     |  partialPathName(...)
     |      partialPathName() -> string
     |      
     |      Returns the minimum path string necessary to uniquely identify the attached object.
     |  
     |  removeChild(...)
     |      removeChild(node) -> self
     |      
     |      Removes the child, specified by MObject, reparenting it under the world.
     |  
     |  removeChildAt(...)
     |      removeChildAt(index) -> self
     |      
     |      Removes the child, specified by index, reparenting it under the world.
     |  
     |  setObject(...)
     |      setObject(MObject or MDagPath) -> self
     |      
     |      Attaches the function set to the specified node or DAG path.
     |  
     |  transformationMatrix(...)
     |      transformationMatrix() -> MMatrix
     |      
     |      Returns the object space transformation matrix for this DAG node.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  boundingBox
     |      Node's bounding box, in object space.
     |  
     |  inModel
     |      True if the node has been added to the model.
     |  
     |  inUnderWorld
     |      True if this node is in the underworld of another node (e.g. a curve on surface is in the underworld of the surface).
     |  
     |  isInstanceable
     |      True if instancing is allowed for this node.
     |  
     |  isIntermediateObject
     |      True if this node is just an intermediate in part of a larger calculation (e.g. input to a deformer).
     |  
     |  objectColor
     |      Index from 0 to 7 indicating the color in which the node is to be drawn when inactive, assuming that it is drawable.
     |  
     |  objectColorRGB
     |      RGB value indicating the color in which the node is to be drawn when inactive, assuming that it is drawable.
     |  
     |  objectColorType
     |      Determines whether the default color, indexed object color, orRGB object color is used for this object.
     |  
     |  useObjectColor
     |      If True then the node will be drawn using its 'objectColor', otherwise it will be drawn using Maya's default color. Thismethod is deprecated, use objectColorType instead.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kNextPos = 255
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDependencyNode:
     |  
     |  absoluteName(...)
     |      Returns the absolute name of this node.  The absolute name of a node is the full namespace path starting at (and including) the root namespace, down to (and including) the node itself.  Regardless of relative name mode, absoluteName() will always return a full namespace path prefixed with a leading colon (the root namespace).
     |  
     |  addAttribute(...)
     |      Adds a new dynamic attribute to the node.
     |  
     |  addExternalContentForFileAttr(...)
     |      Adds content info to the specified table from a file path attribute.
     |  
     |  affectsAnimation(...)
     |      Returns true if the changes to the node may affect animation.
     |  
     |  attribute(...)
     |      Returns an attribute of the node, given either its index or name.
     |  
     |  attributeClass(...)
     |      Returns the class of the specified attribute.
     |  
     |  attributeCount(...)
     |      Returns the number of attributes on the node.
     |  
     |  canBeWritten(...)
     |      Returns true if the node will be written to file.
     |  
     |  dgCallbackIds(...)
     |      Returns DG timing information for a specific callback type, broken down by callbackId.
     |  
     |  dgCallbacks(...)
     |      Returns DG timing information broken down by callback type.
     |  
     |  dgTimer(...)
     |      Returns a specific DG timer metric for a given timer type.
     |  
     |  dgTimerOff(...)
     |      Turns DG timing off for this node.
     |  
     |  dgTimerOn(...)
     |      Turns DG timing on for this node.
     |  
     |  dgTimerQueryState(...)
     |      Returns the current DG timer state for this node.
     |  
     |  dgTimerReset(...)
     |      Resets all DG timers for this node.
     |  
     |  findAlias(...)
     |      Returns the attribute which has the given alias.
     |  
     |  findPlug(...)
     |      Returns a plug for the given attribute.
     |  
     |  getAffectedAttributes(...)
     |      Returns all of the attributes which are affected by the specified attribute.
     |  
     |  getAffectingAttributes(...)
     |      Returns all of the attributes which affect the specified attribute.
     |  
     |  getAliasAttr(...)
     |      Returns the node's alias attribute, which is a special attribute used to store information about the node's attribute aliases.
     |  
     |  getAliasList(...)
     |      Returns all of the node's attribute aliases.
     |  
     |  getConnections(...)
     |      Returns all the plugs which are connected to attributes of this node.
     |  
     |  getExternalContent(...)
     |      Gets the external content (files) that this node depends on.
     |  
     |  hasAttribute(...)
     |      Returns True if the node has an attribute with the given name.
     |  
     |  hasUniqueName(...)
     |      Returns True if the node's name is unique.
     |  
     |  isFlagSet(...)
     |      Returns the state of the specified node flag.
     |  
     |  isNewAttribute(...)
     |      Returns True if the specified attribute was added in the current scene, and not by by one of its referenced files.
     |  
     |  isTrackingEdits(...)
     |      Returns True if the node is referenced or in an assembly that is tracking edits.
     |  
     |  name(...)
     |      Returns the node's name.
     |  
     |  plugsAlias(...)
     |      Returns the alias for a plug's attribute.
     |  
     |  removeAttribute(...)
     |      Removes a dynamic attribute from the node.
     |  
     |  reorderedAttribute(...)
     |      Returns one of the node's attribute, based on the order in which they are written to file.
     |  
     |  setAffectsAnimation(...)
     |      Specifies that modifications to a node could potentially affect the animation.
     |  
     |  setAlias(...)
     |      Adds or removes an attribute alias.
     |  
     |  setDoNotWrite(...)
     |      Used to prevent the node from being written to file.
     |  
     |  setExternalContent(...)
     |      Changes the location of external content.
     |  
     |  setExternalContentForFileAttr(...)
     |      Sets content info in the specified attribute from the table.
     |  
     |  setFlag(...)
     |      Sets the state of the specified node flag.
     |  
     |  setName(...)
     |      Sets the node's name.
     |  
     |  setUuid(...)
     |      Sets the node's UUID.
     |  
     |  userNode(...)
     |      Returns the MPxNode object for a plugin node.
     |  
     |  uuid(...)
     |      Returns the node's UUID.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MFnDependencyNode:
     |  
     |  allocateFlag(...)
     |      Allocates a flag on all nodes for use by the named plugin and returns the flag's index.
     |  
     |  classification(...)
     |      Returns the classification string for the named node type.
     |  
     |  deallocateAllFlags(...)
     |      Deallocates all node flags which are currently allocated to the named plugin.
     |  
     |  deallocateFlag(...)
     |      Deallocates the specified node flag, which was previously allocated by the named plugin using allocateFlag().
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDependencyNode:
     |  
     |  isDefaultNode
     |      True if this is a default node, created automatically by Maya.
     |  
     |  isFromReferencedFile
     |      True if the node is from a referenced file, False if the node is part of the main scene.
     |  
     |  isLocked
     |      True if the node is locked against changes.
     |  
     |  isShared
     |      True if the node is shared.
     |  
     |  namespace
     |      Name of the namespace which contains the node.
     |  
     |  pluginName
     |      Name of the plugin which registered the node type, if any.
     |  
     |  typeId
     |      MTypeId for the node's type.
     |  
     |  typeName
     |      Name of the node's type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDependencyNode:
     |  
     |  kExtensionAttr = 3
     |  
     |  kInvalidAttr = 4
     |  
     |  kLocalDynamicAttr = 1
     |  
     |  kNormalAttr = 2
     |  
     |  kTimerInvalidState = 3
     |  
     |  kTimerMetric_callback = 0
     |  
     |  kTimerMetric_callbackNotViaAPI = 6
     |  
     |  kTimerMetric_callbackViaAPI = 5
     |  
     |  kTimerMetric_compute = 1
     |  
     |  kTimerMetric_computeDuringCallback = 7
     |  
     |  kTimerMetric_computeNotDuringCallback = 8
     |  
     |  kTimerMetric_dirty = 2
     |  
     |  kTimerMetric_draw = 3
     |  
     |  kTimerMetric_fetch = 4
     |  
     |  kTimerMetrics = 9
     |  
     |  kTimerOff = 0
     |  
     |  kTimerOn = 1
     |  
     |  kTimerType_count = 2
     |  
     |  kTimerType_inclusive = 1
     |  
     |  kTimerType_self = 0
     |  
     |  kTimerTypes = 3
     |  
     |  kTimerUninitialized = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnData(MFnBase)
     |  Base class for dependency graph data function sets.
     |  
     |  Method resolution order:
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnDependencyNode(MFnBase)
     |  Function set for operating on dependency nodes.
     |  
     |  Method resolution order:
     |      MFnDependencyNode
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  absoluteName(...)
     |      Returns the absolute name of this node.  The absolute name of a node is the full namespace path starting at (and including) the root namespace, down to (and including) the node itself.  Regardless of relative name mode, absoluteName() will always return a full namespace path prefixed with a leading colon (the root namespace).
     |  
     |  addAttribute(...)
     |      Adds a new dynamic attribute to the node.
     |  
     |  addExternalContentForFileAttr(...)
     |      Adds content info to the specified table from a file path attribute.
     |  
     |  affectsAnimation(...)
     |      Returns true if the changes to the node may affect animation.
     |  
     |  attribute(...)
     |      Returns an attribute of the node, given either its index or name.
     |  
     |  attributeClass(...)
     |      Returns the class of the specified attribute.
     |  
     |  attributeCount(...)
     |      Returns the number of attributes on the node.
     |  
     |  canBeWritten(...)
     |      Returns true if the node will be written to file.
     |  
     |  create(...)
     |      Creates a new node of the given type.
     |  
     |  dgCallbackIds(...)
     |      Returns DG timing information for a specific callback type, broken down by callbackId.
     |  
     |  dgCallbacks(...)
     |      Returns DG timing information broken down by callback type.
     |  
     |  dgTimer(...)
     |      Returns a specific DG timer metric for a given timer type.
     |  
     |  dgTimerOff(...)
     |      Turns DG timing off for this node.
     |  
     |  dgTimerOn(...)
     |      Turns DG timing on for this node.
     |  
     |  dgTimerQueryState(...)
     |      Returns the current DG timer state for this node.
     |  
     |  dgTimerReset(...)
     |      Resets all DG timers for this node.
     |  
     |  findAlias(...)
     |      Returns the attribute which has the given alias.
     |  
     |  findPlug(...)
     |      Returns a plug for the given attribute.
     |  
     |  getAffectedAttributes(...)
     |      Returns all of the attributes which are affected by the specified attribute.
     |  
     |  getAffectingAttributes(...)
     |      Returns all of the attributes which affect the specified attribute.
     |  
     |  getAliasAttr(...)
     |      Returns the node's alias attribute, which is a special attribute used to store information about the node's attribute aliases.
     |  
     |  getAliasList(...)
     |      Returns all of the node's attribute aliases.
     |  
     |  getConnections(...)
     |      Returns all the plugs which are connected to attributes of this node.
     |  
     |  getExternalContent(...)
     |      Gets the external content (files) that this node depends on.
     |  
     |  hasAttribute(...)
     |      Returns True if the node has an attribute with the given name.
     |  
     |  hasUniqueName(...)
     |      Returns True if the node's name is unique.
     |  
     |  isFlagSet(...)
     |      Returns the state of the specified node flag.
     |  
     |  isNewAttribute(...)
     |      Returns True if the specified attribute was added in the current scene, and not by by one of its referenced files.
     |  
     |  isTrackingEdits(...)
     |      Returns True if the node is referenced or in an assembly that is tracking edits.
     |  
     |  name(...)
     |      Returns the node's name.
     |  
     |  plugsAlias(...)
     |      Returns the alias for a plug's attribute.
     |  
     |  removeAttribute(...)
     |      Removes a dynamic attribute from the node.
     |  
     |  reorderedAttribute(...)
     |      Returns one of the node's attribute, based on the order in which they are written to file.
     |  
     |  setAffectsAnimation(...)
     |      Specifies that modifications to a node could potentially affect the animation.
     |  
     |  setAlias(...)
     |      Adds or removes an attribute alias.
     |  
     |  setDoNotWrite(...)
     |      Used to prevent the node from being written to file.
     |  
     |  setExternalContent(...)
     |      Changes the location of external content.
     |  
     |  setExternalContentForFileAttr(...)
     |      Sets content info in the specified attribute from the table.
     |  
     |  setFlag(...)
     |      Sets the state of the specified node flag.
     |  
     |  setName(...)
     |      Sets the node's name.
     |  
     |  setUuid(...)
     |      Sets the node's UUID.
     |  
     |  userNode(...)
     |      Returns the MPxNode object for a plugin node.
     |  
     |  uuid(...)
     |      Returns the node's UUID.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  allocateFlag(...)
     |      Allocates a flag on all nodes for use by the named plugin and returns the flag's index.
     |  
     |  classification(...)
     |      Returns the classification string for the named node type.
     |  
     |  deallocateAllFlags(...)
     |      Deallocates all node flags which are currently allocated to the named plugin.
     |  
     |  deallocateFlag(...)
     |      Deallocates the specified node flag, which was previously allocated by the named plugin using allocateFlag().
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  isDefaultNode
     |      True if this is a default node, created automatically by Maya.
     |  
     |  isFromReferencedFile
     |      True if the node is from a referenced file, False if the node is part of the main scene.
     |  
     |  isLocked
     |      True if the node is locked against changes.
     |  
     |  isShared
     |      True if the node is shared.
     |  
     |  namespace
     |      Name of the namespace which contains the node.
     |  
     |  pluginName
     |      Name of the plugin which registered the node type, if any.
     |  
     |  typeId
     |      MTypeId for the node's type.
     |  
     |  typeName
     |      Name of the node's type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kExtensionAttr = 3
     |  
     |  kInvalidAttr = 4
     |  
     |  kLocalDynamicAttr = 1
     |  
     |  kNormalAttr = 2
     |  
     |  kTimerInvalidState = 3
     |  
     |  kTimerMetric_callback = 0
     |  
     |  kTimerMetric_callbackNotViaAPI = 6
     |  
     |  kTimerMetric_callbackViaAPI = 5
     |  
     |  kTimerMetric_compute = 1
     |  
     |  kTimerMetric_computeDuringCallback = 7
     |  
     |  kTimerMetric_computeNotDuringCallback = 8
     |  
     |  kTimerMetric_dirty = 2
     |  
     |  kTimerMetric_draw = 3
     |  
     |  kTimerMetric_fetch = 4
     |  
     |  kTimerMetrics = 9
     |  
     |  kTimerOff = 0
     |  
     |  kTimerOn = 1
     |  
     |  kTimerType_count = 2
     |  
     |  kTimerType_inclusive = 1
     |  
     |  kTimerType_self = 0
     |  
     |  kTimerTypes = 3
     |  
     |  kTimerUninitialized = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnDoubleArrayData(MFnData)
     |  Function set for node data consisting of an array of doubles.
     |  
     |  Method resolution order:
     |      MFnDoubleArrayData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  array(...)
     |      Returns the encapsulated array as an MDoubleArray.
     |  
     |  copyTo(...)
     |      Replaces the elements of an array with those in the encapsulated array.
     |  
     |  create(...)
     |      Creates a new double array data object.
     |  
     |  set(...)
     |      Sets values in the encapsulated array.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnDoubleIndexedComponent(MFnComponent)
     |  This function set allows you to create, edit, and query double indexed
     |  components. Double indexed components store 2 dimensional index values.
     |  
     |  __init__()
     |  Initializes a new, empty MFnDoubleIndexedComponent object
     |  
     |  __init__(MObject component)
     |  Initializes a new MFnDoubleIndexedComponent function set, attached
     |  to the specified component.
     |  
     |  Method resolution order:
     |      MFnDoubleIndexedComponent
     |      MFnComponent
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addElement(...)
     |      addElement(uIndex, vIndex) -> self
     |      addElement([uIndex, vIndex]) -> self
     |      
     |      Adds the element identified by (uIndex, vIndex) to the component.
     |  
     |  addElements(...)
     |      addElements(sequence of [uIndex, vIndex]) -> self
     |      
     |      Adds the specified elements to the component. Each item in the
     |      elements sequence is itself a sequence of two ints which are the U and
     |      V indices of an element to be added.
     |  
     |  create(...)
     |      create(MFn Type constant) -> MObject
     |      
     |      Creates a new, empty component, attaches it to the function set and
     |      returns an MObject which references it.
     |  
     |  getCompleteData(...)
     |      getCompleteData() -> (numU, numV)
     |      
     |      Returns a tuple containing the number of U and V indices in the complete
     |      component, or (0,0) if the component is not complete.
     |  
     |  getElement(...)
     |      getElement(index) -> (uIndex, vIndex)
     |      
     |      Returns the index'th element of the component as a tuple containing the
     |      element's U and V indices.
     |  
     |  getElements(...)
     |      getElements() -> list of (uIndex, vIndex)
     |      
     |      Returns all of the component's elements as a list of tuples with each
     |      tuple containing the U and V indices of a single element.
     |  
     |  setCompleteData(...)
     |      setCompleteData(numU, numV) -> self
     |      
     |      Marks the component as complete (i.e. contains all possible elements).
     |      numU and numV indicate the number of U and V indices in the complete
     |      component (i.e. the max U index is numU-1 and the max V index is numV-1).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnComponent:
     |  
     |  isEqual(...)
     |      isEqual(MObject other) -> bool
     |      
     |      Returns True if other refers to the same component as the
     |      one to which the function set is currently attached.
     |  
     |  weight(...)
     |      weight(index) -> MWeight
     |      
     |      Returns the weight associated with the specified element,
     |      where index can range from 0 to elementCount-1.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnComponent:
     |  
     |  componentType
     |      Type of the component. (MFn Type constant)
     |  
     |  elementCount
     |      Number of elements in the component.
     |  
     |  hasWeights
     |      True if the component has weights associated with its elements.
     |  
     |  isComplete
     |      Marking a component as complete means that it represents a full set
     |      of indices from 0 to elementCount-1
     |  
     |  isEmpty
     |      True if the component contains no elements.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnEnumAttribute(MFnAttribute)
     |  Functionset for creating and working with enumeration attributes.
     |  
     |  Method resolution order:
     |      MFnEnumAttribute
     |      MFnAttribute
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addField(...)
     |      Add an item to the enumeration with a specified UI name and corresponding attribute value.
     |  
     |  create(...)
     |      Creates a new enumeration attribute, attaches it to the function set and returns it as an MObject.
     |  
     |  fieldName(...)
     |      Returns the name of the enumeration item which has a given value.
     |  
     |  fieldValue(...)
     |      Returns the value of the enumeration item which has a given name.
     |  
     |  getMax(...)
     |      Returns the maximum value of all the enumeration items.
     |  
     |  getMin(...)
     |      Returns the minimum value of all the enumeration items.
     |  
     |  setDefaultByName(...)
     |      Set the default value using the name of an enumeration item. Equivalent to: attr.default = attr.fieldValue(name)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  default
     |      Default value
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnAttribute:
     |  
     |  accepts(...)
     |      Returns True if this attribute can accept a connection of the given type.
     |  
     |  acceptsAttribute(...)
     |      Returns True if this attribute can accept a connection with the given attribute.
     |  
     |  addToCategory(...)
     |      Adds the attribute to a category
     |  
     |  getAddAttrCmd(...)
     |      Returns a string containing a MEL 'addAttr' command capable of recreating the attribute.
     |  
     |  hasCategory(...)
     |      Checks to see if the attribute has a given category
     |  
     |  setNiceNameOverride(...)
     |      Sets a nice UI name for this attribute rather than using the default derived from it's long name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnAttribute:
     |  
     |  affectsAppearance
     |      Does the attribute affect how the node is drawn in Maya's viewport?
     |  
     |  affectsWorldSpace
     |      Does the attribute affect the node's worldSpace matrix?
     |  
     |  array
     |      Is the attribute an array?
     |  
     |  cached
     |      Should the attribute's value be cached in the datablock?
     |  
     |  channelBox
     |      Should the attribute be displayed in the Channel Box?
     |  
     |  connectable
     |      Can connections be made to the attribute?
     |  
     |  disconnectBehavior
     |      What should happen when the attribute loses an incoming connection?
     |  
     |  dynamic
     |      Is the attribute a dynamic attribute?
     |  
     |  extension
     |      Is the attribute an extension attribute?
     |  
     |  hidden
     |      If True the attribute will not be displayed in the Attribute Editor.
     |  
     |  indeterminant
     |      Hint to DG that this attribute may not always be used when computing the attributes which are dependent upon it.
     |  
     |  indexMatters
     |      If False, connectAttr -nextAvailable can be used with this attribute. If True then an explicit index must be provided.
     |  
     |  internal
     |      Will the node handle the attribute's data storage itself, outside of the node's data block?
     |  
     |  isProxyAttribute
     |      Does the attribute is a proxy attribute?
     |  
     |  keyable
     |      Can keys be set on the attribute?
     |  
     |  name
     |      Attribute's long name.
     |  
     |  parent
     |      Parent attribute. MObject::kNullObj if attr has no parent.
     |  
     |  readable
     |      Is the attribute readable?
     |  
     |  renderSource
     |      Is the attribute a render source?
     |  
     |  shortName
     |      Attribute's short name.
     |  
     |  storable
     |      Should the attribute's value be preserved when the node is written to file?
     |  
     |  usedAsColor
     |      Should the attribute be treated as a color in the UI?
     |  
     |  usedAsFilename
     |      Should the attribute be treated as a file name in the UI?
     |  
     |  usesArrayDataBuilder
     |      Array attributes only: does the attribute create elements using MArrayDataBuilder?
     |  
     |  worldSpace
     |      DAG nodes only: if the node is instanced, will the attribute have separate values for each instance?
     |  
     |  writable
     |      Is the attribute writable?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnAttribute:
     |  
     |  kDelete = 0
     |  
     |  kNothing = 2
     |  
     |  kReset = 1
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnGenericAttribute(MFnAttribute)
     |  Functionset for creating and working with attributes which can accept several different types of data.
     |  
     |  Method resolution order:
     |      MFnGenericAttribute
     |      MFnAttribute
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addDataType(...)
     |      Adds the specified Maya data type to the list of those accepted by the attribute.
     |  
     |  addNumericType(...)
     |      Adds the specified numeric type to the list of those accepted by the attribute.
     |  
     |  addTypeId(...)
     |      Adds the specified data typeId to the list of those accepted by the attribute.
     |  
     |  create(...)
     |      Creates a new generic attribute, attaches it to the function set and returns it as an MObject.
     |  
     |  removeDataType(...)
     |      Removes the specified Maya data type from the list of those accepted by the attribute.
     |  
     |  removeNumericType(...)
     |      Removes the specified numeric type from the list of those accepted by the attribute.
     |  
     |  removeTypeId(...)
     |      Removes the specified data typeId from the list of those accepted by the attribute.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnAttribute:
     |  
     |  accepts(...)
     |      Returns True if this attribute can accept a connection of the given type.
     |  
     |  acceptsAttribute(...)
     |      Returns True if this attribute can accept a connection with the given attribute.
     |  
     |  addToCategory(...)
     |      Adds the attribute to a category
     |  
     |  getAddAttrCmd(...)
     |      Returns a string containing a MEL 'addAttr' command capable of recreating the attribute.
     |  
     |  hasCategory(...)
     |      Checks to see if the attribute has a given category
     |  
     |  setNiceNameOverride(...)
     |      Sets a nice UI name for this attribute rather than using the default derived from it's long name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnAttribute:
     |  
     |  affectsAppearance
     |      Does the attribute affect how the node is drawn in Maya's viewport?
     |  
     |  affectsWorldSpace
     |      Does the attribute affect the node's worldSpace matrix?
     |  
     |  array
     |      Is the attribute an array?
     |  
     |  cached
     |      Should the attribute's value be cached in the datablock?
     |  
     |  channelBox
     |      Should the attribute be displayed in the Channel Box?
     |  
     |  connectable
     |      Can connections be made to the attribute?
     |  
     |  disconnectBehavior
     |      What should happen when the attribute loses an incoming connection?
     |  
     |  dynamic
     |      Is the attribute a dynamic attribute?
     |  
     |  extension
     |      Is the attribute an extension attribute?
     |  
     |  hidden
     |      If True the attribute will not be displayed in the Attribute Editor.
     |  
     |  indeterminant
     |      Hint to DG that this attribute may not always be used when computing the attributes which are dependent upon it.
     |  
     |  indexMatters
     |      If False, connectAttr -nextAvailable can be used with this attribute. If True then an explicit index must be provided.
     |  
     |  internal
     |      Will the node handle the attribute's data storage itself, outside of the node's data block?
     |  
     |  isProxyAttribute
     |      Does the attribute is a proxy attribute?
     |  
     |  keyable
     |      Can keys be set on the attribute?
     |  
     |  name
     |      Attribute's long name.
     |  
     |  parent
     |      Parent attribute. MObject::kNullObj if attr has no parent.
     |  
     |  readable
     |      Is the attribute readable?
     |  
     |  renderSource
     |      Is the attribute a render source?
     |  
     |  shortName
     |      Attribute's short name.
     |  
     |  storable
     |      Should the attribute's value be preserved when the node is written to file?
     |  
     |  usedAsColor
     |      Should the attribute be treated as a color in the UI?
     |  
     |  usedAsFilename
     |      Should the attribute be treated as a file name in the UI?
     |  
     |  usesArrayDataBuilder
     |      Array attributes only: does the attribute create elements using MArrayDataBuilder?
     |  
     |  worldSpace
     |      DAG nodes only: if the node is instanced, will the attribute have separate values for each instance?
     |  
     |  writable
     |      Is the attribute writable?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnAttribute:
     |  
     |  kDelete = 0
     |  
     |  kNothing = 2
     |  
     |  kReset = 1
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnGeometryData(MFnData)
     |  This class is the function set for geometry data.
     |  
     |  Geometry data adds matrix and grouping (set) information to regular
     |  data and is used to pass geometry types such as mesh, lattice, and
     |  NURBS shape data through DG connections.
     |  
     |  __init__()
     |  Initializes a new, empty MFnGeometryData object
     |  
     |  __init__(MObject)
     |  Initializes a new MFnGeometryData function set, attached
     |  to the specified object.
     |  
     |  Method resolution order:
     |      MFnGeometryData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addObjectGroup(...)
     |      addObjectGroup(id) -> self
     |      
     |      Adds an object group with the given id to the object.
     |  
     |  addObjectGroupComponent(...)
     |      addObjectGroupComponent(id, MObject component) -> self
     |      
     |      Adds the members of the given component to the object group
     |      with the given id.
     |  
     |  changeObjectGroupId(...)
     |      changeObjectGroupId(sourceId, destId) -> self
     |      
     |      Changes the id of the object group with the given id to the new id.
     |  
     |  copyObjectGroups(...)
     |      copyObjectGroups(MObject inGeom) -> self
     |      
     |      Copies the object groups from the given geometry data object.
     |  
     |  hasObjectGroup(...)
     |      hasObjectGroup(id) -> self
     |      
     |      Returns True if an object group with the given id is
     |      contained in the data.
     |  
     |  objectGroup(...)
     |      objectGroup(index) -> int
     |      
     |      Returns the id of the index'th object group contained by the object.
     |  
     |  objectGroupComponent(...)
     |      objectGroupComponent(id) -> MObject
     |      
     |      Returns a component which contains the members of the object group
     |      with the given id.
     |  
     |  objectGroupType(...)
     |      objectGroupType(id) -> MFn Type constant
     |      
     |      Returns the type of the component that the object group with the
     |      given id contains.
     |  
     |  removeObjectGroup(...)
     |      removeObjectGroup(id) -> self
     |      
     |      Removes an object group with the given id from the object.
     |  
     |  removeObjectGroupComponent(...)
     |      removeObjectGroupComponent(id, MObject component) -> self
     |      
     |      Removes the members of the given component from the object group
     |      with the given id.
     |  
     |  setObjectGroupComponent(...)
     |      setObjectGroupComponent(id, MObject component) -> self
     |      
     |      Sets the members of the object group with the given id
     |      to be only those in the given component.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  isIdentity
     |      True if the matrix for the geometry is the identity.
     |  
     |  isNotIdentity
     |      True if the matrix for the geometry is not the identity.
     |  
     |  matrix
     |      MMatrix used to convert the object into local space.
     |  
     |  objectGroupCount
     |      The number of object groups contained by the object.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnIntArrayData(MFnData)
     |  Function set for node data consisting of an array of ints.
     |  
     |  Method resolution order:
     |      MFnIntArrayData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  array(...)
     |      Returns the encapsulated array as an MIntArray.
     |  
     |  copyTo(...)
     |      Replaces the elements of an array with those in the encapsulated array.
     |  
     |  create(...)
     |      Creates a new int array data object.
     |  
     |  set(...)
     |      Sets values in the encapsulated array.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnLightDataAttribute(MFnAttribute)
     |  Functionset for creating and working with light data attributes.
     |  
     |  Method resolution order:
     |      MFnLightDataAttribute
     |      MFnAttribute
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  child(...)
     |      Returns one of the attribute's children, specified by index.
     |  
     |  create(...)
     |      Creates a new light data attribute, attaches it to the function set and returns it as an MObject.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  default
     |      Default values for the light data attribute's child attributes.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnAttribute:
     |  
     |  accepts(...)
     |      Returns True if this attribute can accept a connection of the given type.
     |  
     |  acceptsAttribute(...)
     |      Returns True if this attribute can accept a connection with the given attribute.
     |  
     |  addToCategory(...)
     |      Adds the attribute to a category
     |  
     |  getAddAttrCmd(...)
     |      Returns a string containing a MEL 'addAttr' command capable of recreating the attribute.
     |  
     |  hasCategory(...)
     |      Checks to see if the attribute has a given category
     |  
     |  setNiceNameOverride(...)
     |      Sets a nice UI name for this attribute rather than using the default derived from it's long name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnAttribute:
     |  
     |  affectsAppearance
     |      Does the attribute affect how the node is drawn in Maya's viewport?
     |  
     |  affectsWorldSpace
     |      Does the attribute affect the node's worldSpace matrix?
     |  
     |  array
     |      Is the attribute an array?
     |  
     |  cached
     |      Should the attribute's value be cached in the datablock?
     |  
     |  channelBox
     |      Should the attribute be displayed in the Channel Box?
     |  
     |  connectable
     |      Can connections be made to the attribute?
     |  
     |  disconnectBehavior
     |      What should happen when the attribute loses an incoming connection?
     |  
     |  dynamic
     |      Is the attribute a dynamic attribute?
     |  
     |  extension
     |      Is the attribute an extension attribute?
     |  
     |  hidden
     |      If True the attribute will not be displayed in the Attribute Editor.
     |  
     |  indeterminant
     |      Hint to DG that this attribute may not always be used when computing the attributes which are dependent upon it.
     |  
     |  indexMatters
     |      If False, connectAttr -nextAvailable can be used with this attribute. If True then an explicit index must be provided.
     |  
     |  internal
     |      Will the node handle the attribute's data storage itself, outside of the node's data block?
     |  
     |  isProxyAttribute
     |      Does the attribute is a proxy attribute?
     |  
     |  keyable
     |      Can keys be set on the attribute?
     |  
     |  name
     |      Attribute's long name.
     |  
     |  parent
     |      Parent attribute. MObject::kNullObj if attr has no parent.
     |  
     |  readable
     |      Is the attribute readable?
     |  
     |  renderSource
     |      Is the attribute a render source?
     |  
     |  shortName
     |      Attribute's short name.
     |  
     |  storable
     |      Should the attribute's value be preserved when the node is written to file?
     |  
     |  usedAsColor
     |      Should the attribute be treated as a color in the UI?
     |  
     |  usedAsFilename
     |      Should the attribute be treated as a file name in the UI?
     |  
     |  usesArrayDataBuilder
     |      Array attributes only: does the attribute create elements using MArrayDataBuilder?
     |  
     |  worldSpace
     |      DAG nodes only: if the node is instanced, will the attribute have separate values for each instance?
     |  
     |  writable
     |      Is the attribute writable?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnAttribute:
     |  
     |  kDelete = 0
     |  
     |  kNothing = 2
     |  
     |  kReset = 1
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnMatrixArrayData(MFnData)
     |  Function set for node data consisting of an array of MMatrix.
     |  
     |  Method resolution order:
     |      MFnMatrixArrayData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  array(...)
     |      Returns the encapsulated array as an MMatrixArray.
     |  
     |  copyTo(...)
     |      Replaces the elements of an array with those in the encapsulated array.
     |  
     |  create(...)
     |      Creates a new MMatrix array data object.
     |  
     |  set(...)
     |      Sets values in the encapsulated array.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnMatrixAttribute(MFnAttribute)
     |  Functionset for creating and working with matrix attributes.
     |  
     |  Method resolution order:
     |      MFnMatrixAttribute
     |      MFnAttribute
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  create(...)
     |      Creates a new matrix attribute, attaches it to the function set and returns it as an MObject.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  default
     |      Default value
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kDouble = 1
     |  
     |  kFloat = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnAttribute:
     |  
     |  accepts(...)
     |      Returns True if this attribute can accept a connection of the given type.
     |  
     |  acceptsAttribute(...)
     |      Returns True if this attribute can accept a connection with the given attribute.
     |  
     |  addToCategory(...)
     |      Adds the attribute to a category
     |  
     |  getAddAttrCmd(...)
     |      Returns a string containing a MEL 'addAttr' command capable of recreating the attribute.
     |  
     |  hasCategory(...)
     |      Checks to see if the attribute has a given category
     |  
     |  setNiceNameOverride(...)
     |      Sets a nice UI name for this attribute rather than using the default derived from it's long name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnAttribute:
     |  
     |  affectsAppearance
     |      Does the attribute affect how the node is drawn in Maya's viewport?
     |  
     |  affectsWorldSpace
     |      Does the attribute affect the node's worldSpace matrix?
     |  
     |  array
     |      Is the attribute an array?
     |  
     |  cached
     |      Should the attribute's value be cached in the datablock?
     |  
     |  channelBox
     |      Should the attribute be displayed in the Channel Box?
     |  
     |  connectable
     |      Can connections be made to the attribute?
     |  
     |  disconnectBehavior
     |      What should happen when the attribute loses an incoming connection?
     |  
     |  dynamic
     |      Is the attribute a dynamic attribute?
     |  
     |  extension
     |      Is the attribute an extension attribute?
     |  
     |  hidden
     |      If True the attribute will not be displayed in the Attribute Editor.
     |  
     |  indeterminant
     |      Hint to DG that this attribute may not always be used when computing the attributes which are dependent upon it.
     |  
     |  indexMatters
     |      If False, connectAttr -nextAvailable can be used with this attribute. If True then an explicit index must be provided.
     |  
     |  internal
     |      Will the node handle the attribute's data storage itself, outside of the node's data block?
     |  
     |  isProxyAttribute
     |      Does the attribute is a proxy attribute?
     |  
     |  keyable
     |      Can keys be set on the attribute?
     |  
     |  name
     |      Attribute's long name.
     |  
     |  parent
     |      Parent attribute. MObject::kNullObj if attr has no parent.
     |  
     |  readable
     |      Is the attribute readable?
     |  
     |  renderSource
     |      Is the attribute a render source?
     |  
     |  shortName
     |      Attribute's short name.
     |  
     |  storable
     |      Should the attribute's value be preserved when the node is written to file?
     |  
     |  usedAsColor
     |      Should the attribute be treated as a color in the UI?
     |  
     |  usedAsFilename
     |      Should the attribute be treated as a file name in the UI?
     |  
     |  usesArrayDataBuilder
     |      Array attributes only: does the attribute create elements using MArrayDataBuilder?
     |  
     |  worldSpace
     |      DAG nodes only: if the node is instanced, will the attribute have separate values for each instance?
     |  
     |  writable
     |      Is the attribute writable?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnAttribute:
     |  
     |  kDelete = 0
     |  
     |  kNothing = 2
     |  
     |  kReset = 1
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnMatrixData(MFnData)
     |  Function set for matrix node data.
     |  
     |  Method resolution order:
     |      MFnMatrixData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  create(...)
     |      Creates a new matrix data object.
     |  
     |  isTransformation(...)
     |      Returns True if the attached object is an MTransformationMatrix, False if it is an MMatrix.
     |  
     |  matrix(...)
     |      Returns the encapsulated matrix as an MMatrix.
     |  
     |  set(...)
     |      Sets the value of the encapsulated matrix.
     |  
     |  transformation(...)
     |      Returns the encapsulated matrix as an MTransformationMatrix.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnMesh(MFnDagNode)
     |  Function set for operation on meshes (polygonal surfaces).
     |  
     |  __init__()
     |  Initializes a new, empty MFnMesh object.
     |  
     |  __init__(MDagPath path)
     |  Initializes a new MFnMesh object and attaches it to the DAG path
     |  of a mesh node.
     |  
     |  __init__(MObject nodeOrData)
     |  Initializes a new MFnMesh object and attaches it to a mesh
     |  node or mesh data object.
     |  
     |  Method resolution order:
     |      MFnMesh
     |      MFnDagNode
     |      MFnDependencyNode
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addHoles(...)
     |      addHoles(faceIndex, vertices, loopCounts, mergeVertices=True, pointTolerance=kPointTolerance) -> self
     |      
     |      Adds holes to a mesh polygon.
     |      loopCounts is an array of vertex counts.
     |      The first entry gives the count of vertices that make up the
     |      first hole to add to the polygon (using that many entries in vertexArray). The following
     |      entries in loopCounts give the count of vertices that make up each remaining hole,
     |      using the following entries in vertexArray.
     |      Therefore the sum of the entries of loopCounts should equal the total
     |      length of vertexArray.
     |      Note that holes should normally be specified with the opposite winding order
     |      to the exterior polygon.
     |  
     |  addPolygon(...)
     |      addPolygon(vertices, mergeVertices=True, pointTolerance=kPointTolerance, loopCounts=None) -> faceId
     |      
     |      Adds a new polygon to the mesh, returning the index of the new
     |      polygon. If mergeVertices is True and a new vertex is within
     |      pointTolerance of an existing one, then they are 'merged' by reusing
     |      the existing vertex and discarding the new one.
     |      
     |      loopCounts allows for polygons with holes. If supplied, it is an array of integer vertex
     |      counts. The first entry gives the count of vertices that make up the
     |      exterior of the polygon (using that many entries in vertexArray). The following
     |      entries in loopCounts give the count of vertices that make up each hole,
     |      using the following entries in vertexArray.
     |      Therefore the sum of the entries of loopCounts should equal the total
     |      length of vertexArray.
     |      Note that holes should normally be specified with the opposite winding order
     |      to the exterior polygon.
     |  
     |  allIntersections(...)
     |      allIntersections(raySource, rayDirection, space, maxParam,
     |          testBothDirections, faceIds=None, triIds=None, idsSorted=False,
     |          accelParams=None, tolerance=kIntersectTolerance, sortHits=False)
     |        -> (hitPoints, hitRayParams, hitFaces, hitTriangles, hitBary1s, hitBary2s)
     |      
     |      Finds all intersection of a ray starting at raySource and travelling
     |      in rayDirection with the mesh.
     |      
     |      If faceIds is specified, then only those faces will be considered
     |      for intersection. If both faceIds and triIds are given, then the
     |      triIds will be interpreted as face-relative and each pair of entries
     |      will be taken as a (face, triangle) pair to be considered for
     |      intersection. Thus, the face-triangle pair (10, 0) means the first
     |      triangle on face 10. If neither faceIds nor triIds is given, then
     |      all face-triangles in the mesh will be considered.
     |      
     |      The maxParam and testBothDirections flags can be used to control the
     |      radius of the search around the raySource point.
     |      
     |      The search proceeds by testing all applicable face-triangles looking
     |      for intersections. If the accelParams parameter is given then the
     |      mesh builds an intersection acceleration structure based on it. This
     |      acceleration structure is used to speed up the intersection
     |      operation, sometimes by a factor of several hundred over the non-
     |      accelerated case. Once created, the acceleration structure is cached
     |      and will be reused the next time this method (or anyIntersection()
     |      or allIntersections()) is called with an identically-configured
     |      MMeshIsectAccelParams object. If a different MMeshIsectAccelParams
     |      object is used, then the acceleration structure will be deleted and
     |      re-created according to the new settings. Once created, the
     |      acceleration structure will persist until either the object is
     |      destroyed (or rebuilt by a construction history operation), or the
     |      freeCachedIntersectionAccelerator() method is called. The
     |      cachedIntersectionAcceleratorInfo() and
     |      globalIntersectionAcceleratorsInfo() methods provide useful
     |      information about the resource usage of individual acceleration
     |      structures, and of all such structures in the system.
     |      If the ray hits the mesh, the details of the intersection points
     |      will be returned as a tuple containing the following:
     |      * hitPoints (MFloatPointArray) - coordinates of the points hit, in
     |        the space specified by the caller.* hitRayParams (MFloatArray) - parametric distances along the ray to
     |        the points hit.* hitFaces (MIntArray) - IDs of the faces hit
     |      * hitTriangles (MIntArray) - face-relative IDs of the triangles hit
     |      * hitBary1s (MFloatArray) - first barycentric coordinate of the
     |        points hit. If the vertices of the hitTriangle are (v1, v2, v3)
     |        then the barycentric coordinates are such that the hitPoint =
     |        (*hitBary1)*v1 + (*hitBary2)*v2 + (1-*hitBary1-*hitBary2)*v3.* hitBary2s (MFloatArray) - second barycentric coordinate of the
     |        points hit.
     |      If no point was hit then the arrays will all be empty.
     |  
     |  anyIntersection(...)
     |      anyIntersection(raySource, rayDirection, space, maxParam,
     |          testBothDirections, faceIds=None, triIds=None, idsSorted=False,
     |          accelParams=None, tolerance=kIntersectTolerance)
     |        -> (hitPoint, hitRayParam, hitFace, hitTriangle, hitBary1, hitBary2)
     |      
     |      Finds any intersection of a ray starting at raySource and travelling
     |      in rayDirection with the mesh.
     |      
     |      If faceIds is specified, then only those faces will be considered
     |      for intersection. If both faceIds and triIds are given, then the
     |      triIds will be interpreted as face-relative and each pair of entries
     |      will be taken as a (face, triangle) pair to be considered for
     |      intersection. Thus, the face-triangle pair (10, 0) means the first
     |      triangle on face 10. If neither faceIds nor triIds is given, then
     |      all face-triangles in the mesh will be considered.
     |      
     |      The maxParam and testBothDirections flags can be used to control the
     |      radius of the search around the raySource point.
     |      
     |      The search proceeds by testing all applicable face-triangles looking
     |      for intersections. If the accelParams parameter is given then the
     |      mesh builds an intersection acceleration structure based on it. This
     |      acceleration structure is used to speed up the intersection
     |      operation, sometimes by a factor of several hundred over the non-
     |      accelerated case. Once created, the acceleration structure is cached
     |      and will be reused the next time this method (or anyIntersection()
     |      or allIntersections()) is called with an identically-configured
     |      MMeshIsectAccelParams object. If a different MMeshIsectAccelParams
     |      object is used, then the acceleration structure will be deleted and
     |      re-created according to the new settings. Once created, the
     |      acceleration structure will persist until either the object is
     |      destroyed (or rebuilt by a construction history operation), or the
     |      freeCachedIntersectionAccelerator() method is called. The
     |      cachedIntersectionAcceleratorInfo() and
     |      globalIntersectionAcceleratorsInfo() methods provide useful
     |      information about the resource usage of individual acceleration
     |      structures, and of all such structures in the system.
     |      If the ray hits the mesh, the details of the intersection point
     |      will be returned as a tuple containing the following:
     |      * hitPoint (MFloatPoint) - coordinates of the point hit, in
     |        the space specified by the caller.* hitRayParam (float) - parametric distance along the ray to
     |        the point hit.* hitFace (int) - ID of the face hit
     |      * hitTriangle (int) - face-relative ID of the triangle hit
     |      * hitBary1 (float) - first barycentric coordinate of the
     |        point hit. If the vertices of the hitTriangle are (v1, v2, v3)
     |        then the barycentric coordinates are such that the hitPoint =
     |        (*hitBary1)*v1 + (*hitBary2)*v2 + (1-*hitBary1-*hitBary2)*v3.* hitBary2 (float) - second barycentric coordinate of the point hit.
     |      If no point was hit then the arrays will all be empty.
     |  
     |  assignColor(...)
     |      assignColor(faceId, vertexIndex, colorId, colorSet='') -> self
     |      
     |      Assigns a color from a colorSet to a specified vertex of a face.
     |  
     |  assignColors(...)
     |      assignColors(colorIds, colorSet=') -> self
     |      
     |      Assigns colors to all of the mesh's face-vertices. The colorIds
     |      sequence must contain an entry for every vertex of every face, in
     |      face order, meaning that the entries for all the vertices of face 0
     |      come first, followed by the entries for the vertices of face 1, etc.
     |  
     |  assignUV(...)
     |      assignUV(faceId, vertexIndex, uvId, uvSet='') -> self
     |      
     |      Assigns a UV coordinate from a uvSet to a specified vertex of a face.
     |  
     |  assignUVs(...)
     |      assignUVs(uvCounts, uvIds, uvSet='') -> self
     |      
     |      Assigns UV coordinates to the mesh's face-vertices.
     |      
     |      uvCounts contains the number of UVs to assign for each of the mesh's
     |      faces. That number must equal the number of vertices in the
     |      corresponding face or be 0 to indicate that no UVs will be assigned
     |      to that face.
     |  
     |  booleanOp(...)
     |      (Deprecated: Please use booleanOps instead) booleanOp(Boolean Operation constant, MFnMesh, MFnMesh) -> self
     |      
     |      Replaces this mesh's geometry with the result of a boolean operation
     |      on the two specified meshes.
     |  
     |  booleanOps(...)
     |      booleanOps(Boolean Operation constant, MObjectArray, bool) -> self
     |      
     |      Replaces this mesh's geometry with the result of a boolean operation
     |      on the specified meshes.
     |  
     |  cachedIntersectionAcceleratorInfo(...)
     |      cachedIntersectionAcceleratorInfo() -> string
     |      
     |      Retrieves a string that describes the intersection acceleration
     |      structure for this object, if any. The string will be of the
     |      following form:
     |      
     |        10x10x10 uniform grid, (build time 0.5s), (memory footprint 2000KB)
     |      
     |      It describes the configuration of the cached intersection
     |      accelerator, as well as how long it took to build it, and how much
     |      memory it is currently occupying. If the mesh has no cached
     |      intersection accelerator, the empty string is returned.
     |  
     |  cleanupEdgeSmoothing(...)
     |      cleanupEdgeSmoothing() -> self
     |      
     |      Updates the mesh after setEdgeSmoothing has been done. This should
     |      be called only once, after all the desired edges have been had their
     |      smoothing set. If you don't call this method, the normals may not be
     |      correct, and the object will look odd in shaded mode.
     |  
     |  clearBlindData(...)
     |      clearBlindData(compType) -> self
     |      clearBlindData(compType, blindDataId, compId=None, attr='') -> self
     |      
     |      
     |      The first version deletes all blind data from all the mesh's
     |      components of the given type (an MFn Type constant).
     |      
     |      The second version deletes values of the specified blind data type
     |      from the mesh's components of a given type. If a component ID is
     |      provided then the data is only deleted from that component,
     |      otherwise it is deleted from all of the mesh's components of the
     |      specified type. If a blind data attribute name is provided then only
     |      data for that attribute is deleted, otherwise data for all of the
     |      blind data type's attributes is deleted.
     |  
     |  clearColors(...)
     |      clearColors(colorSet='') -> self
     |      
     |      Clears out all colors from a colorSet, and leaves behind an empty
     |      colorset. This method should be used if it is needed to shrink the
     |      actual size of the color set. In this case, the user should call
     |      clearColors(), setColors() and then assignColors() to rebuild the
     |      mapping info.
     |      
     |      When called on mesh data, the colors are removed. When called on a
     |      shape with no history, the colors are removed and the attributes are
     |      set on the shape. When called on a shape with history, the
     |      polyColorDel command is invoked and a polyColorDel node is created.
     |      
     |      If no colorSet is specified the mesh's current color set will be used.
     |  
     |  clearUVs(...)
     |      clearUVs(uvSet='') -> self
     |      
     |      Clears out all uvs from a uvSet, and leaves behind an empty
     |      uvset. This method should be used if it is needed to shrink the
     |      actual size of the uv set. In this case, the user should call
     |      clearUVs(), setUVs() and then assignUVs() to rebuild the
     |      mapping info.
     |      
     |      When called on mesh data, the uvs are removed. When called on a
     |      shape with no history, the uvs are removed and the attributes are
     |      set on the shape. When called on a shape with history, the
     |      polyMapDel command is invoked and a polyMapDel node is created.
     |      
     |      If no uvSet is specified the mesh's current uv set will be used.
     |  
     |  closestIntersection(...)
     |      closestIntersection(raySource, rayDirection, space, maxParam,
     |          testBothDirections, faceIds=None, triIds=None, idsSorted=False,
     |          accelParams=None, tolerance=kIntersectTolerance)
     |        -> (hitPoint, hitRayParam, hitFace, hitTriangle, hitBary1, hitBary2)
     |      
     |      Finds the closest intersection of a ray starting at raySource and
     |      travelling in rayDirection with the mesh.
     |      
     |      If faceIds is specified, then only those faces will be considered
     |      for intersection. If both faceIds and triIds are given, then the
     |      triIds will be interpreted as face-relative and each pair of entries
     |      will be taken as a (face, triangle) pair to be considered for
     |      intersection. Thus, the face-triangle pair (10, 0) means the first
     |      triangle on face 10. If neither faceIds nor triIds is given, then
     |      all face-triangles in the mesh will be considered.
     |      
     |      The maxParam and testBothDirections flags can be used to control the
     |      radius of the search around the raySource point.
     |      
     |      The search proceeds by testing all applicable face-triangles looking
     |      for intersections. If the accelParams parameter is given then the
     |      mesh builds an intersection acceleration structure based on it. This
     |      acceleration structure is used to speed up the intersection
     |      operation, sometimes by a factor of several hundred over the non-
     |      accelerated case. Once created, the acceleration structure is cached
     |      and will be reused the next time this method (or anyIntersection()
     |      or allIntersections()) is called with an identically-configured
     |      MMeshIsectAccelParams object. If a different MMeshIsectAccelParams
     |      object is used, then the acceleration structure will be deleted and
     |      re-created according to the new settings. Once created, the
     |      acceleration structure will persist until either the object is
     |      destroyed (or rebuilt by a construction history operation), or the
     |      freeCachedIntersectionAccelerator() method is called. The
     |      cachedIntersectionAcceleratorInfo() and
     |      globalIntersectionAcceleratorsInfo() methods provide useful
     |      information about the resource usage of individual acceleration
     |      structures, and of all such structures in the system.
     |      If the ray hits the mesh, the details of the intersection point
     |      will be returned as a tuple containing the following:
     |      * hitPoint (MFloatPoint) - coordinates of the point hit, in
     |        the space specified by the caller.* hitRayParam (float) - parametric distance along the ray to
     |        the point hit.* hitFace (int) - ID of the face hit
     |      * hitTriangle (int) - face-relative ID of the triangle hit
     |      * hitBary1 (float) - first barycentric coordinate of the
     |        point hit. If the vertices of the hitTriangle are (v1, v2, v3)
     |        then the barycentric coordinates are such that the hitPoint =
     |        (*hitBary1)*v1 + (*hitBary2)*v2 + (1-*hitBary1-*hitBary2)*v3.* hitBary2 (float) - second barycentric coordinate of the point hit.
     |      If no point was hit then the arrays will all be empty.
     |  
     |  collapseEdges(...)
     |      collapseEdges(seq of int) -> self
     |      
     |      Collapses edges into vertices. The two vertices that create each
     |      given edge are replaced in turn by one vertex placed at the average
     |      of the two initial vertex.
     |  
     |  collapseFaces(...)
     |      collapseFaces(seq of int) -> self
     |      
     |      Collapses faces into vertices. Adjacent faces will be collapsed
     |      together into a single vertex. Non-adjacent faces will be collapsed
     |      into their own, separate vertices.
     |  
     |  copy(...)
     |      copy(MObject, parent=kNullObj) -> MObject
     |      
     |      Creates a new mesh with the same geometry as the source. Raises
     |      TypeError if the source is not a mesh node or mesh data object or it
     |      contains an empty mesh.
     |      
     |      If the parent is a kMeshData wrapper (e.g. from MFnMeshData.create())
     |      then a mesh data object will be created and returned and the wrapper
     |      will be set to reference it.
     |      
     |      If the parent is a transform type node then a mesh node will be
     |      created and parented beneath it and the return value will be the
     |      mesh node.
     |      
     |      If the parent is any other type of node a TypeError will be raised.
     |      
     |      If no parent is provided then a transform node will be created and
     |      returned and a mesh node will be created and parented under the
     |      transform.
     |  
     |  copyInPlace(...)
     |      copyInPlace(MObject) -> self
     |      
     |      Replaces the current mesh's geometry with that from the source.
     |      Raises TypeError if the source is not a mesh node or mesh data
     |      object or it contains an empty mesh.
     |  
     |  copyUVSet(...)
     |      copyUVSet(fromName, toName, modifier=None) -> string
     |      
     |      Copies the contents of one UV set into another.
     |      
     |      If the source UV set does not exist, or if it has the same name as
     |      the destination, then no copy will be made.
     |      
     |      If the destination UV set exists then its contents will be replace
     |      by a copy of the source UV set.
     |      
     |      If the destination UV set does not exist then a new UV set will be
     |      created and the source UV set will be copied into it. The name of
     |      the UV set will be that provided with a number appended to the end
     |      to ensure uniqueness.
     |      The final name of the destination UV set will be returned.
     |      
     |      This method is only valid for functionsets which are attached to
     |      mesh nodes, not mesh data.
     |  
     |  create(...)
     |      create(vertices, polygonCounts, polygonConnects, uValues=None, vValues=None, parent=kNullObj) -> MObject
     |      create(vertices, edges, edgeConnectsCount, edgeFaceConnects, edgeFaceDesc, storeDoubles=False, parent=kNullObj) -> MObject
     |      
     |      Creates a new polygonal mesh and sets this function set to operate
     |      on it. This method is meant to be as efficient as possible and thus
     |      assumes that all the given data is topologically correct.
     |      If UV values are supplied both parameters must be given and they
     |      must contain the same number of values, otherwise IndexError will be
     |      raised. Note that the UVs are simply stored in the mesh, not
     |      assigned to any vertices. To assign them use assignUVs().
     |      If the parent is a kMeshData wrapper (e.g. from MFnMeshData.create())
     |      then a mesh data object will be created and returned and the wrapper
     |      will be set to reference it.
     |      If the parent is a transform type node then a mesh node will be
     |      created and parented beneath it and the return value will be the
     |      mesh node.
     |      If the parent is any other type of node a TypeError will be raised.
     |      
     |      If no parent is provided then a transform node will be created and
     |      returned and a mesh node will be created and parented under the
     |      transform.
     |  
     |  createBlindDataType(...)
     |      createBlindDataType(blindDataId, ((longName, shortName, typeName), ...)) -> self
     |      
     |      Create a new blind data type with the specified attributes.
     |      
     |      Each element of the attrs sequence is a tuple containing the long
     |      name, short name and type name of the attribute. Valid type names
     |      are 'int', 'float', 'double', 'boolean', 'string' or 'binary'.
     |      
     |      Raises RuntimeError if the blind data id is already in use or an
     |      invalid format was specified.
     |  
     |  createColorSet(...)
     |      createColorSet(name, clamped, rep=kRGBA, modifier=None, instances=None) -> string
     |      
     |      Creates a new, empty color set for this mesh.
     |      
     |      If no name is provided 'colorSet#' will be used, where # is a number
     |      that makes the name unique for this mesh. If a name is provided but
     |      it conflicts with that of an existing color set then a number will
     |      be appended to the proposed name to make it unique.
     |      The return value is the final name used for the new color set.
     |      
     |      This method will only work when the functionset is attached to a
     |      mesh node, not mesh data.
     |  
     |  createInPlace(...)
     |      createInPlace(vertices, polygonCounts, polygonConnects) -> self
     |      
     |      Replaces the existing polygonal mesh with a new one. This method is
     |      meant to be as efficient as possible and thus assumes that all the
     |      given data is topologically correct.
     |      
     |      The vertices may be given as a sequence of MFloatPoint's or a
     |      sequence of MPoint's, but not a mix of the two.
     |  
     |  createUVSet(...)
     |      createUVSet(name, modifier=None, instances=None) -> string
     |      
     |      Creates a new, empty UV set for this mesh.
     |      
     |      If a UV set with proposed name already exists then a number will be
     |      appended to the proposed name to name it unique.
     |      
     |      If the proposed name is empty then a name of the form uvSet# will be
     |      used where '#' is a number chosen to ensure that the name is unique.
     |      
     |      The name used for the UV set will be returned.
     |      
     |      This method is only valid for functionsets which are attached to
     |      mesh nodes, not mesh data.
     |  
     |  currentColorSetName(...)
     |      currentColorSetName(instance=kInstanceUnspecified) -> string
     |      
     |      Get the name of the 'current' color set. The current color set is
     |      the one used for color operations when no color set is explicitly
     |      specified.
     |      On instanced meshes, color sets may be applied on a per-instance
     |      basis or may be shared across all instances. When the color sets are
     |      per-instance, the concept of the current color set has two levels of
     |      granularity. Namely, the current color set applies to one or more
     |      instances, plus there are other color sets in the same color set
     |      family that apply to different instances. The instance arguement is
     |      used to indicate that if this is a per-instance color set, you are
     |      interested in the name of the color set that applies to the
     |      specified instance. When the index is not specified, the current
     |      color set will be returned regardless of which instance it is for.
     |      If there is no current color set, then an empty string will be
     |      returned.
     |  
     |  currentUVSetName(...)
     |      currentUVSetName(instance=kInstanceUnspecified) -> string
     |      
     |      Get the name of the 'current' uv set. The current uv set is
     |      the one used for uv operations when no uv set is explicitly
     |      specified.
     |      On instanced meshes, uv sets may be applied on a per-instance
     |      basis or may be shared across all instances. When the uv sets are
     |      per-instance, the concept of the current uv set has two levels of
     |      granularity. Namely, the current uv set applies to one or more
     |      instances, plus there are other uv sets in the same uv set
     |      family that apply to different instances. The instance arguement is
     |      used to indicate that if this is a per-instance uv set, you are
     |      interested in the name of the uv set that applies to the
     |      specified instance. When the index is not specified, the current
     |      uv set will be returned regardless of which instance it is for.
     |      If there is no current uv set, then an empty string will be
     |      returned.
     |  
     |  deleteColorSet(...)
     |      deleteColorSet(colorSet, modifier=None, currentSelection=None) -> self
     |      
     |      Deletes a color set from the mesh.
     |      
     |      This method is only valid for functionsets which are attached to
     |      mesh nodes, not mesh data.
     |  
     |  deleteEdge(...)
     |      deleteEdge(edgeId, modifier=None) -> self
     |      
     |      Deletes the specified edge.
     |  
     |  deleteFace(...)
     |      deleteFace(faceId, modifier=None) -> self
     |      
     |      Deletes the specified face.
     |  
     |  deleteUVSet(...)
     |      deleteUVSet(uvSet, modifier=None, currentSelection=None) -> self
     |      
     |      Deletes a uv set from the mesh.
     |      
     |      This method is only valid for functionsets which are attached to
     |      mesh nodes, not mesh data.
     |  
     |  deleteVertex(...)
     |      deleteVertex(vertexId, modifier=None) -> self
     |      
     |      Deletes the specified vertex.
     |  
     |  duplicateFaces(...)
     |      duplicateFaces(faces, translation=None) -> self
     |      
     |      Duplicates a set of faces and detaches them from the rest of the
     |      mesh. The resulting mesh will contain one more independant piece of
     |      geometry.
     |  
     |  extractFaces(...)
     |      extractFaces(faces, translation=None) -> self
     |      
     |      Detaches a set of faces from the rest of the mesh. The resulting
     |      mesh will contain one more independant piece of geometry.
     |  
     |  extrudeEdges(...)
     |      extrudeEdges(edges, extrusionCount=1, translation=None, extrudeTogether=True, thickness=0.0, offset=0.0) -> self
     |      
     |      Extrude the given edges along a vector. The resulting mesh will have
     |      extra parallelograms coming out of the given edges and going to the
     |      new extruded edges. The length of the new polygon is determined by
     |      the length of the vector. The extrusionCount parameter is the number
     |      of subsequent extrusions per edges and represents the number of
     |      polygons that will be created from each given edge to the extruded
     |      edges.
     |      The difference between using thickness or offset instead of providing
     |      a vector with the translation variable is that the translation will
     |      be applied to each vertex in the extrusion along its local direction.  This
     |      can result in vertices being moved the same distance, but the angles between
     |      the original components are not maintained so the overall shape is not the
     |      same.
     |      Both the thickness and offset variables will attempt to move the components
     |      a distance that will maintain angles between edges at the border of the
     |      extrusion.
     |  
     |  extrudeFaces(...)
     |      extrudeFaces(faces, extrusionCount=1, translation=None, extrudeTogether=True, thickness=0.0, offset=0.0) -> self
     |      
     |      Extrude the given faces along a vector. The resulting mesh will have
     |      extra parallelograms coming out of the given faces and going to the
     |      new extruded faces. The length of the new polygon is determined by
     |      the length of the vector. The extrusionCount parameter is the number
     |      of subsequent extrusions per faces and represents the number of
     |      polygons that will be created from each given face to the extruded
     |      faces.
     |      The difference between using thickness or offset instead of providing
     |      a vector with the translation variable is that the translation will
     |      be applied to each vertex in the extrusion along its local direction.  This
     |      can result in vertices being moved the same distance, but the angles between
     |      the original components are not maintained so the overall shape is not the
     |      same.
     |      Both the thickness and offset variables will attempt to move the components
     |      a distance that will maintain angles between edges at the border of the
     |      extrusion.
     |  
     |  freeCachedIntersectionAccelerator(...)
     |      freeCachedIntersectionAccelerator() -> self
     |      
     |      If the mesh has a cached intersection accelerator structure, then
     |      this routine forces it to be deleted. Ordinarily, these structures
     |      are cached so that series of calls to the closestIntersection(),
     |      allIntersections(), and anyIntersection() methods can reuse the same
     |      structure. Once the client is finished with these intersection
     |      operations, however, they are responsible for freeing the acceleration
     |      structure, which is what this method does.
     |  
     |  generateSmoothMesh(...)
     |      generateSmoothMesh(parent=kNullObj, options=None) -> MObject
     |      
     |      Creates a new polygonal mesh which is a smoothed version of the one
     |      to which the functionset is attached. If an options object is supplied
     |      it will be used to direct the smoothing operation, otherwise the
     |      mesh's Smooth Mesh Preview attributes will be used.
     |      
     |      If the parent is a kMeshData wrapper (e.g. from MFnMeshData.create())
     |      then a mesh data object will be created and returned.
     |      If the parent is a transform type node then a mesh node will be
     |      created and parented beneath it and the return value will be the
     |      mesh node.
     |      If the parent is any other type of node a TypeError will be raised.
     |      
     |      If no parent is provided then a transform node will be created and
     |      returned and a mesh node will be created and parented under the
     |      transform.
     |      
     |      Note that, unlike the create functions, this function does not set
     |      the functionset to operate on the new mesh, but leaves it attached
     |      to the original mesh.
     |  
     |  getAssignedUVs(...)
     |      getAssignedUVs(uvSet='') -> (counts, uvIds)
     |      
     |      Returns a tuple containing all of the UV assignments for the specified
     |      UV set. The first element of the tuple is an array of counts giving
     |      the number of UVs assigned to each face of the mesh. The count will
     |      either be zero, indicating that that face's vertices do not have UVs
     |      assigned, or else it will equal the number of the face's vertices.
     |      The second element of the tuple is an array of UV IDs for all of the
     |      face-vertices which have UVs assigned.
     |  
     |  getAssociatedColorSetInstances(...)
     |      getAssociatedColorSetInstances(colorSet) -> MIntArray
     |      
     |      Returns the instance numbers associated with the specified Color set.
     |      If the color map is shared across all instances, an empty array will
     |      be returned.
     |      
     |      This method will only work if the functionset is attached to a mesh
     |      node. It will raise RuntimeError if the functionset is attached to
     |      mesh data.
     |  
     |  getAssociatedUVSetInstances(...)
     |      getAssociatedUVSetInstances(uvSet) -> MIntArray
     |      
     |      Returns the instance numbers associated with the specified UV set.
     |      If the uv map is shared across all instances, an empty array will be
     |      returned.
     |      
     |      This method will only work if the functionset is attached to a mesh
     |      node. It will raise RuntimeError if the functionset is attached to
     |      mesh data.
     |  
     |  getAssociatedUVSetTextures(...)
     |      getAssociatedUVSetTextures(uvSet) -> MObjectArray
     |      
     |      Returns the texture nodes which are using the specified UV set. If
     |      the texture has a 2d texture placement, the texture, and not the
     |      placement will be returned.
     |      
     |      This method will only work if the functionset is attached to a mesh
     |      node. It will raise RuntimeError if the functionset is attached to
     |      mesh data.
     |  
     |  getBinaryBlindData(...)
     |      getBinaryBlindData(compId, compType, blindDataId, attr) -> string
     |      getBinaryBlindData(compType, blindDataId, attr)
     |        -> (MIntArray, [string, string, ...])
     |      
     |      The first version returns the value of the specified blind data
     |      attribute from the specified mesh component.
     |      
     |      The second version returns a tuple containing an array of component
     |      IDs and an array of values for the specified blind data attribute
     |      for all of the mesh's components of the specified type.
     |      
     |      Both versions raise RuntimeError if the attribute is not of 'binary'
     |      type.
     |  
     |  getBinormals(...)
     |      getBinormals(space=MSpace.kObject, uvSet='') -> MFloatVectorArray
     |      
     |      Returns the binormal vectors for all face-vertices.
     |      
     |      This method is not threadsafe.
     |  
     |  getBlindDataAttrNames(...)
     |      getBlindDataAttrNames(blindDataId) -> ((longName, shortName, typeName), ...)
     |      
     |      Returns a tuple listing the attributes of the given blind data type.
     |      Each element of the tuple is itself a tuple containing the long
     |      name, short name and type name of the attribute. Type names can be
     |      'int', 'float', 'double', 'boolean', 'string' or 'binary'.
     |  
     |  getBlindDataTypes(...)
     |      getBlindDataTypes(MFn Type constant) -> MIntArray
     |      
     |      Returns all the blind data ID's associated with the given component
     |      type on this mesh.
     |  
     |  getBoolBlindData(...)
     |      getBoolBlindData(compId, compType, blindDataId, attr) -> bool
     |      getBoolBlindData(compType, blindDataId, attr) -> (MIntArray, MIntArray)
     |      
     |      The first version returns the value of the specified blind data
     |      attribute from the specified mesh component.
     |      
     |      The second version returns a tuple containing an array of component
     |      IDs and an array of values for the specified blind data attribute
     |      for all of the mesh's components of the specified type.
     |      
     |      Both versions raise RuntimeError if the attribute is not of
     |      'boolean' type.
     |  
     |  getClosestNormal(...)
     |      getClosestNormal(MPoint, space=MSpace.kObject) -> (MVector, int)
     |      
     |      Returns a tuple containing the normal at the closest point on the
     |      mesh to the given point and the ID of the face in which that closest
     |      point lies.
     |  
     |  getClosestPoint(...)
     |      getClosestPoint(MPoint, space=MSpace.kObject) -> (MPoint, int)
     |      
     |      Returns a tuple containing the closest point on the mesh to the
     |      given point and the ID of the face in which that closest point lies.
     |      
     |      This method is not threadsafe.
     |  
     |  getClosestPointAndNormal(...)
     |      getClosestPointAndNormal(MPoint, space=MSpace.kObject)
     |        -> (MPoint, MVector, int)
     |      
     |      Returns a tuple containing the closest point on the mesh to the
     |      given point, the normal at that point, and the ID of the face in
     |      which that point lies.
     |      
     |      This method is not threadsafe.
     |  
     |  getClosestUVs(...)
     |      getClosestUVs(u, v, uvSet='') -> MIntArray
     |      
     |      Returns the IDs of the UVs which are nearest in uv space to the
     |      given texture coordinate in the specified UV set. All these UVs
     |      locate at the same distance to the given coordinate.
     |  
     |  getColor(...)
     |      getColor(colorId, colorSet='') -> MColor
     |      
     |      Returns a color from a colorSet. Raises IndexError if the colorId is
     |      out of range.
     |  
     |  getColorIndex(...)
     |      getColorIndex(faceId, localVertexId, colorSet='') -> int
     |      
     |      Returns the index into the specified colorSet of the color used by a
     |      specific face-vertex. This can be used to index into the sequence
     |      returned by getColors().
     |  
     |  getColorRepresentation(...)
     |      getColorRepresentation(colorSet) -> Color Representation constant
     |      
     |      Returns the Color Representation used by the specified color set.
     |  
     |  getColorSetFamilyNames(...)
     |      getColorSetFamilyNames() -> (string, ...)
     |      
     |      Returns the names of all of the color set families on this object. A
     |      color set family is a set of per-instance sets with the same name
     |      with each individual set applying to one or more instances. A set
     |      which is shared across all instances will be the sole member of its
     |      family.
     |      
     |      Given a color set family name, getColorSetsInFamily() may be used to
     |      determine the names of the associated individual sets.
     |  
     |  getColorSetNames(...)
     |      getColorSetNames() -> (string, ...)
     |      
     |      Returns the names of all the color sets on this object.
     |  
     |  getColorSetsInFamily(...)
     |      getColorSetsInFamily(familyName) -> (string, ...)
     |      
     |      Returns the names of all of the color sets that belong to the
     |      specified family. Per-instance sets will have multiple sets in a
     |      family, with each individual set applying to one or more instances.
     |      A set which is shared across all instances will be the sole member
     |      of its family and will share the same name as its family.
     |  
     |  getColors(...)
     |      getColors(colorSet='') -> MColorArray
     |      
     |      Returns all of the colors in a colorSet. If no colorSet is specified
     |      then the default colorSet is used.
     |      
     |      Use the index returned by getColorIndex() to access the returned
     |      array.
     |  
     |  getConnectedShaders(...)
     |      getConnectedShaders(instance) -> (MObjectArray, MIntArray)
     |      
     |      Returns a tuple containing an array of shaders (sets) and an array
     |      of ints mapping the mesh's polygons onto those shaders. For each
     |      polygon in the mesh there will be corresponding value in the second
     |      array. If it is -1 that means that the polygon is not assigned to a
     |      shader, otherwise it indicates the index into the first array of the
     |      shader to which that polygon is assigned.
     |      
     |      This method will only work if the functionset is attached to a mesh
     |      node. It will raise RuntimeError if the functionset is attached to
     |      mesh data.
     |  
     |  getCreaseEdges(...)
     |      getCreaseEdges() -> (MUintArray, MDoubleArray)
     |      
     |      Returns a tuple containing two arrays. The first contains the mesh-
     |      relative/global IDs of the mesh's creased edges and the second
     |      contains the associated crease data.
     |      
     |      Please note that to make effective use of the creasing variable in
     |      software outside of Maya may require a license under patents owned
     |      by Pixar(R).
     |  
     |  getCreaseVertices(...)
     |      getCreaseVertices() -> (MUintArray, MDoubleArray)
     |      
     |      Returns a tuple containing two arrays. The first contains the mesh-
     |      relative/global IDs of the mesh's creased vertices and the second
     |      contains the associated crease data.
     |      
     |      Please note that to make effective use of the creasing variable in
     |      software outside of Maya may require a license under patents owned
     |      by Pixar(R).
     |  
     |  getDoubleBlindData(...)
     |      getDoubleBlindData(compId, compType, blindDataId, attr) -> float
     |      getDoubleBlindData(compType, blindDataId, attr) -> (MIntArray, MDoubleArray)
     |      
     |      The first version returns the value of the specified blind data
     |      attribute from the specified mesh component.
     |      
     |      The second version returns a tuple containing an array of component
     |      IDs and an array of values for the specified blind data attribute
     |      for all of the mesh's components of the specified type.
     |      
     |      Both versions raise RuntimeError if the attribute is not of
     |      'double' type.
     |  
     |  getEdgeVertices(...)
     |      getEdgeVertices(edgeId) -> (int, int)
     |      
     |      Returns a tuple containing the mesh-relative/global IDs of the
     |      edge's two vertices. The indices can be used to refer to the
     |      elements in the array returned by the getPoints() method.
     |  
     |  getFaceAndVertexIndices(...)
     |      getFaceAndVertexIndices(faceVertexIndex, localVertex=True) -> (int, int)
     |      
     |      Returns a tuple containg the faceId and vertexIndex represented by
     |      the given face-vertex index. This is the reverse of the operation
     |      performed by getFaceVertexIndex().
     |      
     |      If localVertex is True then the returned vertexIndex is the face-
     |      relative/local index, otherwise it is the mesh-relative/global index.
     |  
     |  getFaceNormalIds(...)
     |      getFaceNormalIds(faceId) -> MIntArray
     |      
     |      Returns the IDs of the normals for all the vertices of a given face.
     |      These IDs can be used to index into the arrays returned by getNormals().
     |  
     |  getFaceUVSetNames(...)
     |      getFaceUVSetNames(faceId) -> (string, ...)
     |      
     |      Returns the names of all of the uv sets mapped to the specified face.
     |      
     |      This method is not threadsafe.
     |  
     |  getFaceVertexBinormal(...)
     |      getFaceVertexBinormal(faceId, vertexId, space=MSpace.kObject, uvSet='') -> MVector
     |      
     |      Returns the binormal vector at a given face vertex.
     |      
     |      This method is not threadsafe.
     |  
     |  getFaceVertexBinormals(...)
     |      getFaceVertexBinormals(faceId, space=MSpace.kObject, uvSet='') -> MFloatVectorArray
     |      
     |      Returns all the per-vertex-per-face binormals for a given face.
     |      
     |      This method is not threadsafe.
     |  
     |  getFaceVertexColors(...)
     |      getFaceVertexColors(colorSet='', defaultUnsetColor=None) -> MColorArray
     |      
     |      Returns colors for all the mesh's face-vertices.
     |      
     |      The colors are returned in face order: e.g. F0V0, F0V1.. F0Vn, F1V0,
     |      etc... Use the index returned by getFaceVertexIndex() if you wish to
     |      index directly into the returned color array.
     |      
     |      If no face has color for that vertex, the entry returned will be
     |      defaultUnsetColor. If a color was set for some but not all the faces
     |      for that vertex, the ones where the color has not been explicitly set
     |      will return (0,0,0). If a vertex has shared color, the same value
     |      will be set for all its vertes/faces.
     |      
     |      If the colorSet is not specified, the default color set will be used.
     |      If the defaultUnsetColor is not given, then (-1, -1, -1, -1) will be
     |      used.
     |  
     |  getFaceVertexIndex(...)
     |      getFaceVertexIndex(faceId, vertexIndex, localVertex=True) -> int
     |      
     |      Returns the index for a specific face-vertex into an array of face-
     |      vertex values, such as those returned by getFaceVertexBinormals(),
     |      getFaceVertexColors(), getFaceVertexNormals(), etc.
     |      
     |      The values in the target arrays are presumed to be in face order:
     |      F0V0, F0V1.. F0Vn, F1V0, etc...
     |      If localVertex is True then vertexIndex must be a face-relative/local
     |      index. If localVertex is False then vertexIndex must be a mesh-
     |      relative/global index.
     |      
     |      The opposite operation is performed by the getFaceAndVertexIndices()
     |      method.
     |  
     |  getFaceVertexNormal(...)
     |      getFaceVertexNormal(faceId, vertexId, space=MSpace.kObject) -> MVector
     |      
     |      Returns the per-vertex-per-face normal for a given face and vertex.
     |      
     |      This method is not threadsafe.
     |  
     |  getFaceVertexNormals(...)
     |      getFaceVertexNormals(faceId, space=MSpace.kObject) -> MFloatVectorArray
     |      
     |      Returns the normals for a given face.
     |      
     |      This method is not threadsafe.
     |  
     |  getFaceVertexTangent(...)
     |      getFaceVertexTangent(faceId, vertexId, space=MSpace.kObject, uvSet='') -> MVector
     |      
     |      Return the normalized tangent vector at a given face vertex.
     |      
     |      The tangent is defined as the surface tangent of the polygon running
     |      in the U direction defined by the uv map.
     |      This method is not threadsafe.
     |  
     |  getFaceVertexTangents(...)
     |      getFaceVertexTangents(faceId, space=MSpace.kObject, uvSet='') -> MFloatVectorArray
     |      
     |      Returns all the per-vertex-per-face tangents for a given face.
     |      
     |      The tangent is defined as the surface tangent of the polygon running
     |      in the U direction defined by the uv map.
     |      
     |      This method is not threadsafe.
     |  
     |  getFloatBlindData(...)
     |      getFloatBlindData(compId, compType, blindDataId, attr) -> float
     |      getFloatBlindData(compType, blindDataId, attr) -> (MIntArray, MFloatArray)
     |      
     |      The first version returns the value of the specified blind data
     |      attribute from the specified mesh component.
     |      
     |      The second version returns a tuple containing an array of component
     |      IDs and an array of values for the specified blind data attribute
     |      for all of the mesh's components of the specified type.
     |      
     |      Both versions raise RuntimeError if the attribute is not of
     |      'float' type.
     |  
     |  getFloatPoints(...)
     |      getFloatPoints(space=MSpace.kObject) -> MFloatPointArray
     |      
     |      Returns an MFloatPointArray containing the mesh's vertices.
     |  
     |  getHoles(...)
     |      getHoles() -> ((face, (v1, v2, ...)), (face, (v1, v2, ...)), ...)
     |      
     |      Returns a tuple describing the holes in the mesh. Each element of the
     |      tuple is itself a tuple. The first element of the sub-tuple is the
     |      integer ID of the face in which the hole occurs. The second element
     |      of the sub-tuple is another tuple containing the mesh-relative/global
     |      IDs of the vertices which make up the hole.
     |      
     |      Take the following return value as an example:
     |      
     |          ((3, (7, 2, 6)), (5, (11, 10, 3, 4)))
     |      
     |      This says that the mesh has two holes. The first hole is in face 3
     |      and consists of vertices 7, 2 and 6. The second hole is in face 5 and
     |      consists of vertices 11, 10, 3 and 4.
     |  
     |  getIntBlindData(...)
     |      getIntBlindData(compId, compType, blindDataId, attr) -> int
     |      getIntBlindData(compType, blindDataId, attr) -> (MIntArray, MIntArray)
     |      
     |      The first version returns the value of the specified blind data
     |      attribute from the specified mesh component.
     |      
     |      The second version returns a tuple containing an array of component
     |      IDs and an array of values for the specified blind data attribute
     |      for all of the mesh's components of the specified type.
     |      
     |      Both versions raise RuntimeError if the attribute is not of
     |      'int' type.
     |  
     |  getInvisibleFaces(...)
     |      getInvisibleFaces() -> MUintArray
     |      
     |      Returns the invisible faces of the mesh. Invisible faces are like
     |      lightweight holes in that they are not rendered but do not require
     |      additional geometry the way that holes do. They have the advantage
     |      over holes that if the mesh is smoothed then their edges will be
     |      smoothed as well, while holes will retain their hard edges.
     |      
     |      Invisible faces can be set using the setInvisibleFaces() method or
     |      the polyHole command.
     |  
     |  getNormalIds(...)
     |      getNormalIds() -> (MIntArray, MIntArray)
     |      
     |      Returns the normal IDs for all of the mesh's polygons as a tuple of
     |      two int arrays. The first array contains the number of vertices for
     |      each polygon and the second contains the normal IDs for each polygon-
     |      vertex. These IDs can be used to index into the array returned by
     |      getNormals().
     |  
     |  getNormals(...)
     |      getNormals(space=MSpace.kObject) -> MFloatVectorArray
     |      
     |      Returns a copy of the mesh's normals. The normals are the per-polygon
     |      per-vertex normals. To find the normal for a particular vertex-face,
     |      use getFaceNormalIds() to get the index into the array.
     |      
     |      This method is not threadsafe.
     |  
     |  getPoint(...)
     |      getPoint(vertexId, space=MSpace.kObject) -> MPoint
     |      
     |      Returns the position of specified vertex.
     |  
     |  getPointAtUV(...)
     |      getPointAtUV(faceId, u, v, space=MSpace.kObject, uvSet='', tolerance=0.0) -> MPoint
     |      
     |      Returns the position of the point at the give UV value in the
     |      specified face.
     |      
     |      This method is not threadsafe.
     |  
     |  getPoints(...)
     |      getPoints(space=MSpace.kObject) -> MPointArray
     |      
     |      Returns a copy of the mesh's vertex positions as an MPointArray.
     |  
     |  getPointsAtUV(...)
     |      getPointsAtUV(u, v, space=MSpace.kObject, uvSet='', tolerance=0.0) -> MPoint
     |      
     |      Returns the position of the point at the give UV value
     |  
     |  getPolygonNormal(...)
     |      getPolygonNormal(polygonId, space=MSpace.kObject) -> MVector
     |      
     |      Returns the per-polygon normal for the given polygon.
     |      
     |      This method is not threadsafe.
     |  
     |  getPolygonTriangleVertices(...)
     |      getPolygonTriangleVertices(polygonId, triangleId) -> (int, int, int)
     |      
     |      Returns the mesh-relative/global IDs of the 3 vertices of the
     |      specified triangle of the specified polygon. These IDs can be used
     |      to index into the arrays returned by getPoints() and getFloatPoints().
     |  
     |  getPolygonUV(...)
     |      getPolygonUV(polygonId, vertexId, uvSet='') -> (float, float)
     |      
     |      Returns a tuple containing the U and V values at a specified vertex
     |      of a specified polygon.
     |      
     |      This method is not threadsafe.
     |  
     |  getPolygonUVid(...)
     |      getPolygonUVid(polygonId, vertexId, uvSet='') -> int
     |      
     |      Returns the ID of the UV at a specified vertex of a specified polygon.
     |      
     |      This method is not threadsafe.
     |  
     |  getPolygonVertices(...)
     |      getPolygonVertices(polygonId) -> MIntArray
     |      
     |      Returns the mesh-relative/global vertex IDs the specified polygon.
     |      These IDs can be used to index into the arrays returned by getPoints()
     |      and getFloatPoints().
     |  
     |  getSmoothMeshDisplayOptions(...)
     |      getSmoothMeshDisplayOptions() -> MMeshSmoothOptions
     |      
     |      Returns the options currently in use when smoothing the mesh for display.
     |  
     |  getStringBlindData(...)
     |      getStringBlindData(compId, compType, blindDataId, attr) -> string
     |      getStringBlindData(compType, blindDataId, attr)
     |        -> (MIntArray, [string, string, ...])
     |      
     |      The first version returns the value of the specified blind data
     |      attribute from the specified mesh component.
     |      
     |      The second version returns a tuple containing an array of component
     |      IDs and an array of values for the specified blind data attribute
     |      for all of the mesh's components of the specified type.
     |      
     |      Both versions raise RuntimeError if the attribute is not of 'string'
     |      type.
     |  
     |  getTangentId(...)
     |      getTangentId(faceId, vertexId) -> int
     |      
     |      Returns the ID of the tangent for a given face and vertex.
     |  
     |  getTangents(...)
     |      getTangents(space=MSpace.kObject, uvSet='') -> MFloatVectorArray
     |      
     |      Return the tangent vectors for all face vertices. The tangent is
     |      defined as the surface tangent of the polygon running in the U
     |      direction defined by the uv map.
     |      
     |      This method is not threadsafe.
     |  
     |  getTriangleOffsets(...)
     |      getTriangleOffsets() -> (MIntArray, MIntArray)
     |      
     |      Returns the number of triangles for every polygon face and the
     |      offset into the vertex indices array for each triangle vertex (see getVertices()).
     |      The triangleVertices array holds each vertex for each triangle in sequence,
     |      so it has three times as many elements as there are triangles.
     |      (i.e. three times the sum of the elements of the triangleCounts array)
     |  
     |  getTriangles(...)
     |      getTriangles() -> (MIntArray, MIntArray)
     |      
     |      Returns a tuple describing the mesh's triangulation. The first
     |      element of the tuple is an array giving the number of triangles for
     |      each of the mesh's polygons. The second tuple gives the ids of the
     |      vertices of all the triangles.
     |  
     |  getUV(...)
     |      getUV(uvId, uvSet='') -> (float, float)
     |      
     |      Returns a tuple containing the u and v values of the specified UV.
     |  
     |  getUVAtPoint(...)
     |      getUVAtPoint(point, space=MSpace.kObject, uvSet='') -> (float, float, int)
     |      
     |      Returns a tuple containing the u and v coordinates of the point on
     |      the mesh closest to the given point, and the ID of the face
     |      containing that closest point.
     |      
     |      This method is not threadsafe.
     |  
     |  getUVSetFamilyNames(...)
     |      getUVSetFamilyNames() -> (string, ...)
     |      
     |      Returns the names of all of the uv set families on this object. A
     |      uv set family is a set of per-instance sets with the same name
     |      with each individual set applying to one or more instances. A set
     |      which is shared across all instances will be the sole member of its
     |      family.
     |      
     |      Given a uv set family name, getUVSetsInFamily() may be used to
     |      determine the names of the associated individual sets.
     |  
     |  getUVSetNames(...)
     |      getUVSetNames() -> (string, ...)
     |      
     |      Returns the names of all the uv sets on this object.
     |  
     |  getUVSetsInFamily(...)
     |      getUVSetsInFamily(familyName) -> (string, ...)
     |      
     |      Returns the names of all of the uv sets that belong to the
     |      specified family. Per-instance sets will have multiple sets in a
     |      family, with each individual set applying to one or more instances.
     |      A set which is shared across all instances will be the sole member
     |      of its family and will share the same name as its family.
     |  
     |  getUVs(...)
     |      getUVs(uvSet='') -> (MFloatArray, MFloatArray)
     |      
     |      Returns a tuple containing an array of U values and an array of V
     |      values, representing all of the UVs for the given UV set.
     |  
     |  getUvShellsIds(...)
     |      getUvShellsIds(uvSet='') -> (int, MIntArray)
     |      
     |      Returns a tuple containing describing how the specified UV set's UVs
     |      are grouped into shells. The first element of the tuple is the number
     |      of distinct shells. The second element of the tuple is an array of
     |      shell indices, one per uv, indicating which shell that uv is part of.
     |  
     |  getVertexColors(...)
     |      getVertexColors(colorSet='', defaultUnsetColor=None) -> MColorArray
     |      
     |      Gets colors for all vertices of the given colorSet. If no face has
     |      color for that vertex, the entry returned will be defaultUnsetColor.
     |      If a color was set for some or all the faces for that vertex, an
     |      average of those vertex/face values where the color has been set will
     |      be returned.
     |      
     |      If the colorSet is not specified, the default color set will be used.
     |      If the defaultUnsetColor is not given, then (-1, -1, -1, -1) will be
     |      used.
     |  
     |  getVertexNormal(...)
     |      getVertexNormal(vertexId, angleWeighted, space=MSpace.kObject) -> MVector
     |      
     |      Returns the normal at the given vertex. The returned normal is a
     |      single per-vertex normal, so unshared normals at a vertex will be
     |      averaged.
     |      
     |      If angleWeighted is set to true, the normals are computed by an
     |      average of surrounding face normals weighted by the angle subtended
     |      by the face at the vertex. If angleWeighted is set to false, a simple
     |      average of surround face normals is returned.
     |      
     |      The simple average evaluation is significantly faster than the angle-
     |      weighted average.
     |      
     |      This method is not threadsafe.
     |  
     |  getVertexNormals(...)
     |      getVertexNormals(angleWeighted, space=MSpace.kObject) -> MFloatVectorArray
     |      
     |      Returns all the vertex normals. The returned normals are per-vertex
     |      normals, so unshared normals at a vertex will be averaged.
     |      
     |      If angleWeighted is set to True, the normals are computed by an
     |      average of surrounding face normals weighted by the angle subtended
     |      by the face at the vertex. If angleWeighted is set to false, a simple
     |      average of surround face normals is returned.
     |      
     |      The simple average evaluation is significantly faster than the angle-
     |      weighted average.
     |      
     |      This method is not threadsafe.
     |  
     |  getVertices(...)
     |      getVertices() -> (MIntArray, MIntArray)
     |      
     |      Returns the mesh-relative/global vertex IDs for all of the mesh's
     |      polygons as a tuple of two int arrays. The first array contains the
     |      number of vertices for each polygon and the second contains the mesh-
     |      relative IDs for each polygon-vertex. These IDs can be used to index
     |      into the arrays returned by getPoints() and getFloatPoints().
     |  
     |  hasAlphaChannels(...)
     |      hasAlphaChannels(colorSet) -> bool
     |      
     |      Returns True if the color set has an alpha channel.
     |  
     |  hasBlindData(...)
     |      hasBlindData(compType, compId=None, blindDataId=None) -> bool
     |      
     |      Returns true if any component of the given type on this mesh has
     |      blind data. If a component ID is provided then only that particular
     |      component is checked. If a blind data ID is provided then only blind
     |      data of that type is checked.
     |  
     |  hasColorChannels(...)
     |      hasColorChannels(colorSet) -> bool
     |      
     |      Returns True if the color set has RGB channels.
     |  
     |  intersectFaceAtUV(...)
     |      intersectFaceAtUV(u, v, uvSet='') -> int
     |      
     |      Returns the IDs of the UVs on this surface which are nearest
     |      in uv space to the given uv set and coordinate.All these UVs
     |      locate at the same distance to the given coordinate.
     |      
     |      This method is not threadsafe.
     |  
     |  isBlindDataTypeUsed(...)
     |      isBlindDataTypeUsed(blindDataId) -> bool
     |      
     |      Returns True if the blind data type is already in use anywhere in the scene.
     |  
     |  isColorClamped(...)
     |      isColorClamped(colorSet) -> bool
     |      
     |      Returns True if the color sets RGBA components are clamped to the
     |      range 0 to 1.
     |  
     |  isColorSetPerInstance(...)
     |      isColorSetPerInstance(colorSet) -> bool
     |      
     |      Returns True if the color set is per-instance, and False if it is
     |      shared across all instances.
     |  
     |  isEdgeSmooth(...)
     |      isEdgeSmooth(edgeId) -> bool
     |      
     |      Returns True if the edge is smooth, False if it is hard.
     |  
     |  isNormalLocked(...)
     |      isNormalLocked(normalId) -> bool
     |      
     |      Returns True if the normal is locked, False otherwise.
     |  
     |  isPolygonConvex(...)
     |      isPolygonConvex(faceId) -> bool
     |      
     |      Returns True if the polygon is convex, False if it is concave.
     |  
     |  isPolygonUVReversed(...)
     |      isPolygonUVReversed(faceId) -> bool
     |      
     |      Returns True if the texture coordinates (uv's) for specified polygon are
     |      reversed (clockwise), False if they are not reversed (counter clockwise).
     |  
     |  isRightHandedTangent(...)
     |      isRightHandedTangent(tangentId, uvSet='') -> bool
     |      
     |      Returns True if the normal, tangent, and binormal form a right handed
     |      coordinate system, False otherwise.
     |  
     |  isUVSetPerInstance(...)
     |      isUVSetPerInstance(uvSet) -> bool
     |      
     |      Returns True if the UV set is per-instance, and False if it is shared
     |      across all instances.
     |  
     |  lockFaceVertexNormals(...)
     |      lockFaceVertexNormals(seq of faceIds, seq of vertIds) -> self
     |      
     |      Locks the normals for the given face/vertex pairs.
     |  
     |  lockVertexNormals(...)
     |      lockVertexNormals(sequence of vertIds) -> self
     |      
     |      Locks the shared normals for the specified vertices.
     |  
     |  numColors(...)
     |      numColors(colorSet='') -> int
     |      
     |      Returns the number of colors in the given color set. If no color set
     |      is specified then the mesh's current color set will be used.
     |  
     |  numUVs(...)
     |      numUVs(uvSet='') -> int
     |      
     |      Returns the number of UVs (texture coordinates) in the given UV set.
     |      If no UV set is specified then the mesh's current UV set will be used.
     |  
     |  onBoundary(...)
     |      onBoundary(faceId) -> bool
     |      
     |      Returns true if the face is on the border of the mesh, meaning that
     |      one or more of its edges is a border edge.
     |  
     |  polygonVertexCount(...)
     |      polygonVertexCount(faceId) -> int
     |      
     |      Returns the number of vertices in the given polygon. Raises
     |      ValueError if the polygon ID is invalid.
     |  
     |  removeFaceColors(...)
     |      removeFaceColors(seq of faceIds) -> self
     |      
     |      Removes colors from all vertices of the specified faces.
     |  
     |  removeFaceVertexColors(...)
     |      removeFaceVertexColors(seq of faceIds, seq of vertexIds) -> self
     |      
     |      Removes colors from the specified face/vertex pairs.
     |  
     |  removeVertexColors(...)
     |      removeVertexColors(seq of vertexIds) -> self
     |      
     |      Removes colors from the specified vertices in all of the faces which
     |      share those vertices.
     |  
     |  renameUVSet(...)
     |      renameUVSet(origName, newName, modifier=None) -> self
     |      
     |      Renames a UV set. The set must exist and the new name cannot be the
     |      same as that of an existing set.
     |      
     |      This method is only valid for functionsets which are attached to mesh
     |      nodes, not mesh data.
     |  
     |  setBinaryBlindData(...)
     |      setBinaryBlindData(compId, compType, blindDataId, attr, data) -> self
     |      setBinaryBlindData(seq of compId, compType, blindDataId, attr, data) -> self
     |      
     |      The first version sets the value of a 'binary' blind data attribute
     |      on a single component of the mesh. The data must be a single string.
     |      
     |      The second version sets the value of a 'binary' blind data attribute
     |      on multiple components of the mesh. If the data is a sequence of
     |      strings then it must provide a value for each component in compIds.
     |      If it is a single string then all of the specified components will
     |      have their blind data set to that value.
     |  
     |  setBoolBlindData(...)
     |      setBoolBlindData(compId, compType, blindDataId, attr, data) -> self
     |      setBoolBlindData(seq of compId, compType, blindDataId, attr, data) -> self
     |      
     |      The first version sets the value of a 'boolean' blind data attribute
     |      on a single component of the mesh. The data must be a single boolean.
     |      
     |      The second version sets the value of a 'boolean' blind data attribute
     |      on multiple components of the mesh. If the data is a sequence of
     |      booleans then it must provide a value for each component in compIds.
     |      If it is a single boolean then all of the specified components will
     |      have their blind data set to that value.
     |  
     |  setColor(...)
     |      setColor(colorId, MColor, colorSet='', rep=kRGBA) -> self
     |      
     |      Sets a color in the specified colorSet. If no colorSet is given the
     |      current colorSet will be used. If the colorId is greater than or
     |      equal to numColors() then the colorSet will be grown to accommodate
     |      the specified color.
     |  
     |  setColors(...)
     |      setColors(seq of MColor, colorSet='', rep=kRGBA) -> self
     |      
     |      Sets all the colors of the specified colorSet. If no colorSet is
     |      given the current colorSet will be used. After using this method to
     |      set the color values, you can call assignColors() to assign the
     |      corresponding color ids to the geometry.
     |      
     |      The color sequence must be at least as large as the current color set
     |      size. You can determine the color set size by calling numColors() for
     |      the default color set, or numColors(colorSet) for a named color set.
     |      If the sequence is larger than the color set size, then the color set
     |      for this mesh will be expanded to accommodate the new color values.
     |      
     |      In order to shrink the colorSet you have to clear its existing
     |      colors. E.g: clearColors(), setColors( ... ), assignColors()
     |  
     |  setCreaseEdges(...)
     |      setCreaseEdges(edgeIds, seq of float) -> self
     |      
     |      
     |      Sets the specified edges of the mesh as crease edges.
     |      
     |      Please note that to make effective use of the creasing variable in
     |      software outside of Maya may require a license under patents owned by
     |      Pixar(R).
     |  
     |  setCreaseVertices(...)
     |      setCreaseVertices(edgeIds, seq of float) -> self
     |      
     |      
     |      Sets the specified edges of the mesh as crease edges.
     |      
     |      Please note that to make effective use of the creasing variable in
     |      software outside of Maya may require a license under patents owned by
     |      Pixar(R).
     |  
     |  setCurrentColorSetName(...)
     |      setCurrentColorSetName(colorSet, modifier=None, currentSelection=None) -> self
     |      
     |      Sets the 'current' color set for this object. The current color set
     |      is the one used when no color set name is specified for a color
     |      operation. If the specified color set does not exist then the current
     |      color set will not be changed.
     |      
     |      If 'modifier' (MDGModifier) is provided then the operation will be
     |      added to the modifier and will not take effect until the modifier's
     |      doIt() is called. Otherwise it will take effect immediately.
     |      
     |      This method may change the current selection. If the 'currentSelection'
     |      (MSelectionList) parameter is provided then the current selection
     |      will be saved to it prior to the change. This is useful for
     |      supporting full undo of the change.
     |      
     |      This method is only valid for functionsets which are attached to mesh
     |      nodes, not mesh data.
     |  
     |  setCurrentUVSetName(...)
     |      setCurrentUVSetName(uvSet, modifier=None, currentSelection=None) -> self
     |      
     |      Sets the 'current' uv set for this object. The current uv set is the
     |      one used when no uv set name is specified for a uv operation. If the
     |      specified uv set does not exist then the current uv set will not be
     |      changed.
     |      
     |      If 'modifier' (MDGModifier) is provided then the operation will be
     |      added to the modifier and will not take effect until the modifier's
     |      doIt() is called. Otherwise it will take effect immediately.
     |      
     |      This method may change the current selection. If the 'currentSelection'
     |      (MSelectionList) parameter is provided then the current selection
     |      will be saved to it prior to the change. This is useful for
     |      supporting full undo of the change.
     |      
     |      This method is only valid for functionsets which are attached to mesh
     |      nodes, not mesh data.
     |  
     |  setDoubleBlindData(...)
     |      setDoubleBlindData(compId, compType, blindDataId, attr, data) -> self
     |      setDoubleBlindData(seq of compId, compType, blindDataId, attr, data) -> self
     |      
     |      The first version sets the value of a 'double' blind data attribute
     |      on a single component of the mesh. The data must be a single float.
     |      
     |      The second version sets the value of a 'double' blind data attribute
     |      on multiple components of the mesh. If the data is a sequence of
     |      floats then it must provide a value for each component in compIds.
     |      If it is a single float then all of the specified components will
     |      have their blind data set to that value.
     |  
     |  setEdgeSmoothing(...)
     |      setEdgeSmoothing(edgeId, smooth=True) -> self
     |      
     |      Sets the specified edge to be hard or smooth. You must use the
     |      cleanupEdgeSmoothing() method after all the desired edges on your
     |      mesh have had setEdgeSmoothing() done. Use the updateSurface() method
     |      to indicate the mesh needs to be redrawn.
     |  
     |  setEdgeSmoothings(...)
     |      setEdgeSmoothings(edgeIds, smooths) -> self
     |      
     |      Sets the specified edges to be hard or smooth. You must use the
     |      cleanupEdgeSmoothing() method after all the desired edges on your
     |      mesh have had setEdgeSmoothings() done. Use the updateSurface() method
     |      to indicate the mesh needs to be redrawn.
     |  
     |  setFaceColor(...)
     |      setFaceColor(color, faceId, rep=kRGBA) -> self
     |      
     |      Sets the face-vertex color for all vertices on this face.
     |  
     |  setFaceColors(...)
     |      setFaceColors(colors, faceIds, rep=kRGBA) -> self
     |      
     |      Sets the colors of the specified faces. For each face in the faceIds
     |      sequence the corresponding color from the colors sequence will be
     |      applied to all of its vertices.
     |  
     |  setFaceVertexColor(...)
     |      setFaceVertexColor(color, faceId, vertexId, modifier=None, rep=kRGBA) -> self
     |      
     |      Sets a face-specific normal at a vertex.
     |      
     |      If 'modifier' (MDGModifier) is provided then the operation will be
     |      added to the modifier and will not take effect until the modifier's
     |      doIt() is called. Otherwise it will take effect immediately.
     |  
     |  setFaceVertexColors(...)
     |      setFaceVertexColors(colors, faceIds, vertexIds, modifier=None, rep=kRGBA) -> self
     |      
     |      Sets the colors of the specified face/vertex pairs.
     |      
     |      If 'modifier' (MDGModifier) is provided then the operation will be
     |      added to the modifier and will not take effect until the modifier's
     |      doIt() is called. Otherwise it will take effect immediately.
     |  
     |  setFaceVertexNormal(...)
     |      setFaceVertexNormal(normal, faceId, vertexId, space=MSpace.kObject, modifier=None) -> self
     |      
     |      Sets a face-specific normal at a vertex.
     |      
     |      If 'modifier' (MDGModifier) is provided then the operation will be
     |      added to the modifier and will not take effect until the modifier's
     |      doIt() is called. Otherwise it will take effect immediately.
     |  
     |  setFaceVertexNormals(...)
     |      setFaceVertexNormal(normals, faceIds, vertexIds, space=MSpace.kObject) -> self
     |      
     |      Sets normals for the given face/vertex pairs.
     |  
     |  setFloatBlindData(...)
     |      setFloatBlindData(compId, compType, blindDataId, attr, data) -> self
     |      setFloatBlindData(seq of compId, compType, blindDataId, attr, data) -> self
     |      
     |      The first version sets the value of a 'float' blind data attribute
     |      on a single component of the mesh. The data must be a single float.
     |      
     |      The second version sets the value of a 'float' blind data attribute
     |      on multiple components of the mesh. If the data is a sequence of
     |      floats then it must provide a value for each component in compIds.
     |      If it is a single float then all of the specified components will
     |      have their blind data set to that value.
     |  
     |  setIntBlindData(...)
     |      setIntBlindData(compId, compType, blindDataId, attr, data) -> self
     |      setIntBlindData(seq of compId, compType, blindDataId, attr, data) -> self
     |      
     |      The first version sets the value of a 'int' blind data attribute
     |      on a single component of the mesh. The data must be a single int.
     |      
     |      The second version sets the value of a 'int' blind data attribute
     |      on multiple components of the mesh. If the data is a sequence of
     |      ints then it must provide a value for each component in compIds.
     |      If it is a single int then all of the specified components will
     |      have their blind data set to that value.
     |  
     |  setInvisibleFaces(...)
     |      setInvisibleFaces(faceIds, makeVisible=False) -> self
     |      
     |      Sets the specified faces of the mesh to be visible or invisible. See
     |      the getInvisibleFaces() method for a description of invisible faces.
     |  
     |  setIsColorClamped(...)
     |      setIsColorClamped(colorSet, clamped) -> self
     |      
     |      Sets whether the color set's RGBA components should be clamped to the
     |      range 0 to 1.
     |  
     |  setNormals(...)
     |      setNormals(normals, space=MSpace.kObject) -> self
     |      
     |      Sets the mesh's normals (user normals).
     |  
     |  setPoint(...)
     |      setPoint(vertexId, MPoint, space=MSpace.kObject) -> self
     |      
     |      Sets the position of specified vertex.
     |      
     |      Note that if you modify the position of a vertex for a mesh node (as
     |      opposed to mesh data), a tweak will be created. If you have a node
     |      with no history, the first time that a tweak is created, the
     |      underlying pointers under the MFnMesh object may change. You will
     |      need to call syncObject() to make sure that the object is valid.
     |      Subsequent calls to setPoint() on the same object do not require a
     |      syncObject() call.
     |  
     |  setPoints(...)
     |      setPoints(points, space=MSpace.kObject) -> self
     |      
     |      Sets the positions of the mesh's vertices. The positions may be
     |      given as a sequence of MFloatPoint's or a sequence of MPoint's, but
     |      not a mix of the two.
     |  
     |  setSmoothMeshDisplayOptions(...)
     |      setSmoothMeshDisplayOptions(MMeshSmoothOptions) -> self
     |      
     |      Sets the options to use when smoothing the mesh for display.
     |  
     |  setSomeColors(...)
     |      setSomeColors(colorIds, colors, colorSet='', rep=kRGBA) -> self
     |      
     |      Sets specific colors in a colorSet.
     |      
     |      If the largest colorId in the sequence is larger than numColors()
     |      then the colorSet will be grown to accommodate the new color values.
     |      If you have added new colorIds, you can call assignColors to assign
     |      the colorIds to the geometry. If you are modifying existing colors,
     |      they will already be referenced by the existing mesh data.
     |  
     |  setSomeUVs(...)
     |      setSomeUVs(uvIds, uValues, vValues, uvSet='') -> self
     |      
     |      Sets the specified texture coordinates (uv's) for this mesh. The uv
     |      value sequences and the uvIds sequence must all be of equal size. If
     |      the largest uvId in the array is larger than numUVs() then the uv
     |      list for this mesh will be grown to accommodate the new uv values.
     |      If a named uv set is given, the array will be grown when the largest
     |      uvId is larger than numUVs(uvSet).
     |      
     |      If you have added new uvIds, you must call one of the assignUV
     |      methods to assign the uvIds to the geometry. If you are modifying
     |      existing UVs, you do not need to call one of the assignUV methods.
     |  
     |  setStringBlindData(...)
     |      setStringBlindData(compId, compType, blindDataId, attr, data) -> self
     |      setStringBlindData(seq of compId, compType, blindDataId, attr, data) -> self
     |      
     |      The first version sets the value of a 'string' blind data attribute
     |      on a single component of the mesh. The data must be a single string.
     |      
     |      The second version sets the value of a 'string' blind data attribute
     |      on multiple components of the mesh. If the data is a sequence of
     |      strings then it must provide a value for each component in compIds.
     |      If it is a single string then all of the specified components will
     |      have their blind data set to that value.
     |  
     |  setUV(...)
     |      setUV(uvId, u, v, uvSet='') -> self
     |      
     |      Sets the specified texture coordinate.
     |      
     |      The uvId is the element in the uv list that will be set. If the uvId
     |      is greater than or equal to numUVs() then the uv list will be grown
     |      to accommodate the specified uv. If the UV being added is new, thenyou must call one of the assignUV methods in order to update the
     |      geometry.
     |  
     |  setUVs(...)
     |      setUVs(uValues, vValues, uvSet='') -> self
     |      
     |      Sets all of the texture coordinates (uv's) for this mesh. The uv
     |      value sequences must be of equal size and must be at least as large
     |      as the current UV set size. You can determine the UV set size by
     |      calling numUVs() for the default UV set, or numUVs(uvSet) for a
     |      named UV set.
     |      
     |      If the sequences are larger than the UV set size, then the uv list
     |      for this mesh will be grown to accommodate the new uv values.
     |      
     |      After using this method to set the UV values, you must call one of
     |      the assignUV methods to assign the corresponding UV ids to the
     |      geometry.
     |      
     |      In order to shrink the uvs array, do the following: clearUVs(),
     |      setUVs(...), assignUVs(). These steps will let you to create an
     |      array of uvs which is smaller than the original one.
     |  
     |  setVertexColor(...)
     |      setVertexColor(color, vertexId, modifier=None, rep=kRGBA) -> self
     |      
     |      Sets the color for a vertex in all the faces which share it.
     |      
     |      If 'modifier' (MDGModifier) is provided then the operation will be
     |      added to the modifier and will not take effect until the modifier's
     |      doIt() is called. Otherwise it will take effect immediately.
     |  
     |  setVertexColors(...)
     |      setVertexColors(colors, vertexIds, modifier=None, rep=kRGBA) -> self
     |      
     |      Sets the colors of the specified vertices. For each vertex in the
     |      vertexIds sequence, the corresponding color from the colors sequence
     |      will be applied to the vertex in all of the faces which share it.
     |      
     |      If 'modifier' (MDGModifier) is provided then the operation will be
     |      added to the modifier and will not take effect until the modifier's
     |      doIt() is called. Otherwise it will take effect immediately.
     |  
     |  setVertexNormal(...)
     |      setVertexNormal(normal, vertexId, space=MSpace.kObject, modifier=None) -> self
     |      
     |      Sets the shared normal at a vertex.
     |      
     |      If 'modifier' (MDGModifier) is provided then the operation will be
     |      added to the modifier and will not take effect until the modifier's
     |      doIt() is called. Otherwise it will take effect immediately.
     |  
     |  setVertexNormals(...)
     |      setVertexNormal(normals, vertexIds, space=MSpace.kObject) -> self
     |      
     |      Sets the shared normals for the given vertices.
     |  
     |  sortIntersectionFaceTriIds(...)
     |      sortIntersectionFaceTriIds(faceIds, triIds=none) -> self
     |      
     |      Convenience routine for sorting faceIds or face/triangle ids before
     |      passing them into the closestIntersection(), allIntersections(), or
     |      anyIntersection() methods. When using an acceleration structure with
     |      an intersection operation it is essential that any faceId or
     |      faceId/triId arrays be sorted properly to ensure optimal performance.
     |      
     |      Both arguments must be MIntArray's.
     |  
     |  split(...)
     |      split(((kOnEdge, int, float), (kInternalPoint, MFloatPoint), ...)) -> self
     |      
     |      Each tuple in the placements sequence consists of a Split Placement
     |      constant followed by one or two parameters.
     |      
     |      If the Split Placement is kOnEdge then the tuple will contain two
     |      more elements giving the int id of the edge to split, and a float
     |      value between 0 and 1 indicating how far along the edge to do the
     |      split. The same edge cannot be split more than once per call.
     |      
     |      If the Split Placement is kInternalPoint then the tuple will contain
     |      just one more element giving an MFloatPoint within the face.
     |      
     |      All splits must begin and end on an edge meaning that the first and
     |      last tuples in the placements sequence must be kOnEdge placements.
     |  
     |  subdivideEdges(...)
     |      subdivideEdges(edges, numDivisions) -> self
     |      
     |      Subdivides edges at regular intervals. For example, if numDivisions
     |      is 2 then two equally-spaced vertices will be added to each of the
     |      specified edges: one 1/3 of the way along the edge and a second 2/3
     |      of the way along the edge.
     |  
     |  subdivideFaces(...)
     |      subdivideFaces(faces, numDivisions) -> self
     |      
     |      Subdivides each specified face into a grid of smaller faces.
     |      Triangles are subdivided into a grid of smaller triangles and quads
     |      are subdivided into a grid of smaller quads. Faces with more than
     |      four edges are ignored.
     |      
     |      The numDivisions parameter tells how many times to subdivide each
     |      edge of the face. Internal points and edges are introduced as needed
     |      to create a grid of smaller faces.
     |  
     |  syncObject(...)
     |      syncObject() -> self
     |      
     |      If a non-api operation happens that many have changed the
     |      underlying Maya object attached to this functionset, calling this
     |      method will make sure that the functionset picks up those changes.
     |      In particular this call should be used after calling mel commands
     |      which might affect the mesh. Note that this only applies when the
     |      functionset is attached to a mesh node. If it's attached to mesh
     |      data the it is not necessary to call this method.
     |  
     |  unlockFaceVertexNormals(...)
     |      unlockFaceVertexNormals(seq of faceIds, seq of vertIds) -> self
     |      
     |      Unlocks the normals for the given face/vertex pairs.
     |  
     |  unlockVertexNormals(...)
     |      unlockVertexNormals(sequence of vertIds) -> self
     |      
     |      Unlocks the shared normals for the specified vertices.
     |  
     |  updateSurface(...)
     |      updateSurface() -> self
     |      
     |      Signal that this polygonal mesh has changed and needs to be redrawn.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  autoUniformGridParams(...)
     |      autoUniformGridParams() -> MMeshIsectAccelParams
     |      
     |      Creates an object which specifies a uniform voxel grid structure
     |      which can be used by the intersection routines to speed up their
     |      operation. The number of voxel cells to use will be determined
     |      automatically based on the density of triangles in the mesh. The
     |      grid acceleration structure will be cached with the mesh, so that
     |      if the same MMeshIsectAccelParams configuration is used on the next
     |      intersect call, the acceleration structure will not need to be rebuilt.
     |  
     |  clearGlobalIntersectionAcceleratorInfo(...)
     |      clearGlobalIntersectionAcceleratorInfo()
     |      
     |      Clears the 'total count', 'total build time', and 'peak memory'
     |      fields from the information string returned by
     |      globalIntersectionAcceleratorsInfo(). It will not cause information
     |      about currently existing accelerators to be lost.
     |  
     |  globalIntersectionAcceleratorsInfo(...)
     |      globalIntersectionAcceleratorsInfo() -> string
     |      
     |      Returns a string that describes the system-wide resource usage for
     |      cached mesh intersection accelerators. The string will be of the
     |      following form:
     |        total 10 accelerators created (2 currently active - total current memory = 10000KB), total build time = 10.2s, peak memory = 14567.1KB
     |      
     |      This means that:
     |      
     |      * a total of 10 intersection accelerators have been created as
     |        instructed by calls to closestIntersection(), allIntersections(),
     |        or anyIntersection() with non-NULL accelParams values. Thesen  structures are destroyed and re-created when intersection requests
     |        with differing acceleration parameters are passed in for the same
     |        mesh, so it is useful to see this value, which is the total count
     |        of how many have been created. In this case, 8 of the 10 created
     |        have been destroyed, either automatically or via calls to the
     |        freeCachedIntersectionAccelerator() method
     |      
     |      * the total memory footprint for the 2 accelerators currently in
     |        existence is 10,000KB
     |      
     |      * the total build time for all 10 structures that have been created
     |        is 10.2 seconds
     |      * the peak of total memory usage for all accelerators in the system
     |        was 14567.1KB
     |      Calling clearGlobalIntersectionAcceleratorInfo() will clear the
     |      'total count', 'total build time', and 'peak memory' fields from
     |      this information. It will not cause information about currently
     |      existing accelerators to be lost.
     |  
     |  uniformGridParams(...)
     |      uniformGridParams(xDiv, yDiv, zDiv) -> MMeshIsectAccelParams
     |      
     |      Creates an object which specifies a uniform voxel grid structure
     |      which can be used by the intersection routines to speed up their
     |      operation. This object specifies the number of voxel cells to be
     |      used in the x, y, and z dimensions. The grid acceleration structure
     |      will be cached with the mesh, so that if the same MMeshIsectAccelParams
     |      configuration is used on the next intersect call, the acceleration
     |      structure will not need to be rebuilt.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  checkSamePointTwice
     |      Controls whether polygons created or added through the functionset
     |      are checked for duplicate points.
     |  
     |  displayColors
     |      Determines if the mesh's colors are displayed. Attempting to turn
     |      color display on when the functionset is attached to mesh data (as
     |      opposed to a mesh node) will raise TypeError.
     |  
     |  numColorSets
     |      Number of color sets.
     |  
     |  numEdges
     |      Number of edges.
     |  
     |  numFaceVertices
     |      Total number of vertices within faces. Shared vertices are counted
     |      for each face which uses them.
     |  
     |  numNormals
     |      Number of per-polygon per-vertex normals.
     |  
     |  numPolygons
     |      Number of polygons (faces).
     |  
     |  numUVSets
     |      Number of UV (texture coordinate) sets.
     |  
     |  numVertices
     |      Number of distinct vertices. Shared vertices are only counted once.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kAlpha = 1
     |  
     |  kDifference = 2
     |  
     |  kInstanceUnspecified = -1
     |  
     |  kInternalPoint = 1
     |  
     |  kIntersectTolerance = 1e-06
     |  
     |  kIntersection = 3
     |  
     |  kInvalid = 2
     |  
     |  kOnEdge = 0
     |  
     |  kPointTolerance = 1e-10
     |  
     |  kRGB = 3
     |  
     |  kRGBA = 4
     |  
     |  kUnion = 1
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDagNode:
     |  
     |  addChild(...)
     |      addChild(node, index=kNextPos, keepExistingParents=False) -> self
     |      
     |      Makes a node a child of this one.
     |  
     |  child(...)
     |      child(index) -> MObject
     |      
     |      Returns the specified child of this node.
     |  
     |  childCount(...)
     |      childCount() -> int
     |      
     |      Returns the number of nodes which are children of this one.
     |  
     |  dagPath(...)
     |      dagPath() -> MDagPath
     |      
     |      Returns the DAG path to which this function set is attached. Raises a TypeError if the function set is attached to an MObject rather than a path.
     |  
     |  dagRoot(...)
     |      dagRoot() -> MObject
     |      
     |      Returns the root node of the first path leading to this node.
     |  
     |  duplicate(...)
     |      duplicate(instance=False, instanceLeaf=False) -> MObject
     |      
     |      Duplicates the DAG hierarchy rooted at the current node.
     |  
     |  fullPathName(...)
     |      fullPathName() -> string
     |      
     |      Returns the full path of the attached object, from the root of the DAG on down.
     |  
     |  getAllPaths(...)
     |      getAllPaths() -> MDagPathArray
     |      
     |      Returns all of the DAG paths which lead to the object to which this function set is attached.
     |  
     |  getConnectedSetsAndMembers(...)
     |      getConnectedSetsAndMembers(instance, renderableSetsOnly) -> (MObjectArray, MObjectArray)
     |      
     |      Returns a tuple containing an array of sets and an array of the
     |      components of the DAG object which are in those sets. If the entire object is in a set, then the corresponding entry in the comps array will have no elements in it.
     |  
     |  getPath(...)
     |      getPath() -> MDagPath
     |      
     |      Returns the DAG path to which this function set is attached, or the first path to the node if the function set is attached to an MObject.
     |  
     |  hasChild(...)
     |      hasChild(node) -> bool
     |      
     |      Returns True if the specified node is a child of this one.
     |  
     |  hasParent(...)
     |      hasParent(node) -> bool
     |      
     |      Returns True if the specified node is a parent of this one.
     |  
     |  instanceCount(...)
     |      instanceCount(indirect) -> int
     |      
     |      Returns the number of instances for this node.
     |  
     |  isChildOf(...)
     |      isChildOf(node) -> bool
     |      
     |      Returns True if the specified node is a parent of this one.
     |  
     |  isInstanced(...)
     |      isInstanced(indirect=True) -> bool
     |      
     |      Returns True if this node is instanced.
     |  
     |  isInstancedAttribute(...)
     |      isInstancedAttribute(attr) -> bool
     |      
     |      Returns True if the specified attribute is an instanced attribute of this node.
     |  
     |  isParentOf(...)
     |      isParentOf(node) -> bool
     |      
     |      Returns True if the specified node is a child of this one.
     |  
     |  parent(...)
     |      parent(index) -> MObject
     |      
     |      Returns the specified parent of this node.
     |  
     |  parentCount(...)
     |      parentCount() -> int
     |      
     |      Returns the number of parents this node has.
     |  
     |  partialPathName(...)
     |      partialPathName() -> string
     |      
     |      Returns the minimum path string necessary to uniquely identify the attached object.
     |  
     |  removeChild(...)
     |      removeChild(node) -> self
     |      
     |      Removes the child, specified by MObject, reparenting it under the world.
     |  
     |  removeChildAt(...)
     |      removeChildAt(index) -> self
     |      
     |      Removes the child, specified by index, reparenting it under the world.
     |  
     |  setObject(...)
     |      setObject(MObject or MDagPath) -> self
     |      
     |      Attaches the function set to the specified node or DAG path.
     |  
     |  transformationMatrix(...)
     |      transformationMatrix() -> MMatrix
     |      
     |      Returns the object space transformation matrix for this DAG node.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDagNode:
     |  
     |  boundingBox
     |      Node's bounding box, in object space.
     |  
     |  inModel
     |      True if the node has been added to the model.
     |  
     |  inUnderWorld
     |      True if this node is in the underworld of another node (e.g. a curve on surface is in the underworld of the surface).
     |  
     |  isInstanceable
     |      True if instancing is allowed for this node.
     |  
     |  isIntermediateObject
     |      True if this node is just an intermediate in part of a larger calculation (e.g. input to a deformer).
     |  
     |  objectColor
     |      Index from 0 to 7 indicating the color in which the node is to be drawn when inactive, assuming that it is drawable.
     |  
     |  objectColorRGB
     |      RGB value indicating the color in which the node is to be drawn when inactive, assuming that it is drawable.
     |  
     |  objectColorType
     |      Determines whether the default color, indexed object color, orRGB object color is used for this object.
     |  
     |  useObjectColor
     |      If True then the node will be drawn using its 'objectColor', otherwise it will be drawn using Maya's default color. Thismethod is deprecated, use objectColorType instead.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDagNode:
     |  
     |  kNextPos = 255
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDependencyNode:
     |  
     |  absoluteName(...)
     |      Returns the absolute name of this node.  The absolute name of a node is the full namespace path starting at (and including) the root namespace, down to (and including) the node itself.  Regardless of relative name mode, absoluteName() will always return a full namespace path prefixed with a leading colon (the root namespace).
     |  
     |  addAttribute(...)
     |      Adds a new dynamic attribute to the node.
     |  
     |  addExternalContentForFileAttr(...)
     |      Adds content info to the specified table from a file path attribute.
     |  
     |  affectsAnimation(...)
     |      Returns true if the changes to the node may affect animation.
     |  
     |  attribute(...)
     |      Returns an attribute of the node, given either its index or name.
     |  
     |  attributeClass(...)
     |      Returns the class of the specified attribute.
     |  
     |  attributeCount(...)
     |      Returns the number of attributes on the node.
     |  
     |  canBeWritten(...)
     |      Returns true if the node will be written to file.
     |  
     |  dgCallbackIds(...)
     |      Returns DG timing information for a specific callback type, broken down by callbackId.
     |  
     |  dgCallbacks(...)
     |      Returns DG timing information broken down by callback type.
     |  
     |  dgTimer(...)
     |      Returns a specific DG timer metric for a given timer type.
     |  
     |  dgTimerOff(...)
     |      Turns DG timing off for this node.
     |  
     |  dgTimerOn(...)
     |      Turns DG timing on for this node.
     |  
     |  dgTimerQueryState(...)
     |      Returns the current DG timer state for this node.
     |  
     |  dgTimerReset(...)
     |      Resets all DG timers for this node.
     |  
     |  findAlias(...)
     |      Returns the attribute which has the given alias.
     |  
     |  findPlug(...)
     |      Returns a plug for the given attribute.
     |  
     |  getAffectedAttributes(...)
     |      Returns all of the attributes which are affected by the specified attribute.
     |  
     |  getAffectingAttributes(...)
     |      Returns all of the attributes which affect the specified attribute.
     |  
     |  getAliasAttr(...)
     |      Returns the node's alias attribute, which is a special attribute used to store information about the node's attribute aliases.
     |  
     |  getAliasList(...)
     |      Returns all of the node's attribute aliases.
     |  
     |  getConnections(...)
     |      Returns all the plugs which are connected to attributes of this node.
     |  
     |  getExternalContent(...)
     |      Gets the external content (files) that this node depends on.
     |  
     |  hasAttribute(...)
     |      Returns True if the node has an attribute with the given name.
     |  
     |  hasUniqueName(...)
     |      Returns True if the node's name is unique.
     |  
     |  isFlagSet(...)
     |      Returns the state of the specified node flag.
     |  
     |  isNewAttribute(...)
     |      Returns True if the specified attribute was added in the current scene, and not by by one of its referenced files.
     |  
     |  isTrackingEdits(...)
     |      Returns True if the node is referenced or in an assembly that is tracking edits.
     |  
     |  name(...)
     |      Returns the node's name.
     |  
     |  plugsAlias(...)
     |      Returns the alias for a plug's attribute.
     |  
     |  removeAttribute(...)
     |      Removes a dynamic attribute from the node.
     |  
     |  reorderedAttribute(...)
     |      Returns one of the node's attribute, based on the order in which they are written to file.
     |  
     |  setAffectsAnimation(...)
     |      Specifies that modifications to a node could potentially affect the animation.
     |  
     |  setAlias(...)
     |      Adds or removes an attribute alias.
     |  
     |  setDoNotWrite(...)
     |      Used to prevent the node from being written to file.
     |  
     |  setExternalContent(...)
     |      Changes the location of external content.
     |  
     |  setExternalContentForFileAttr(...)
     |      Sets content info in the specified attribute from the table.
     |  
     |  setFlag(...)
     |      Sets the state of the specified node flag.
     |  
     |  setName(...)
     |      Sets the node's name.
     |  
     |  setUuid(...)
     |      Sets the node's UUID.
     |  
     |  userNode(...)
     |      Returns the MPxNode object for a plugin node.
     |  
     |  uuid(...)
     |      Returns the node's UUID.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MFnDependencyNode:
     |  
     |  allocateFlag(...)
     |      Allocates a flag on all nodes for use by the named plugin and returns the flag's index.
     |  
     |  classification(...)
     |      Returns the classification string for the named node type.
     |  
     |  deallocateAllFlags(...)
     |      Deallocates all node flags which are currently allocated to the named plugin.
     |  
     |  deallocateFlag(...)
     |      Deallocates the specified node flag, which was previously allocated by the named plugin using allocateFlag().
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDependencyNode:
     |  
     |  isDefaultNode
     |      True if this is a default node, created automatically by Maya.
     |  
     |  isFromReferencedFile
     |      True if the node is from a referenced file, False if the node is part of the main scene.
     |  
     |  isLocked
     |      True if the node is locked against changes.
     |  
     |  isShared
     |      True if the node is shared.
     |  
     |  namespace
     |      Name of the namespace which contains the node.
     |  
     |  pluginName
     |      Name of the plugin which registered the node type, if any.
     |  
     |  typeId
     |      MTypeId for the node's type.
     |  
     |  typeName
     |      Name of the node's type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDependencyNode:
     |  
     |  kExtensionAttr = 3
     |  
     |  kInvalidAttr = 4
     |  
     |  kLocalDynamicAttr = 1
     |  
     |  kNormalAttr = 2
     |  
     |  kTimerInvalidState = 3
     |  
     |  kTimerMetric_callback = 0
     |  
     |  kTimerMetric_callbackNotViaAPI = 6
     |  
     |  kTimerMetric_callbackViaAPI = 5
     |  
     |  kTimerMetric_compute = 1
     |  
     |  kTimerMetric_computeDuringCallback = 7
     |  
     |  kTimerMetric_computeNotDuringCallback = 8
     |  
     |  kTimerMetric_dirty = 2
     |  
     |  kTimerMetric_draw = 3
     |  
     |  kTimerMetric_fetch = 4
     |  
     |  kTimerMetrics = 9
     |  
     |  kTimerOff = 0
     |  
     |  kTimerOn = 1
     |  
     |  kTimerType_count = 2
     |  
     |  kTimerType_inclusive = 1
     |  
     |  kTimerType_self = 0
     |  
     |  kTimerTypes = 3
     |  
     |  kTimerUninitialized = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnMeshData(MFnGeometryData)
     |  MFnMeshData allows the creation and manipulation of Mesh
     |  data objects for use in the dependency graph.
     |  
     |  __init__()
     |  Initializes a new, empty MFnMeshData object
     |  
     |  __init__(MObject)
     |  Initializes a new MFnMeshData function set, attached
     |  to the specified object.
     |  
     |  Method resolution order:
     |      MFnMeshData
     |      MFnGeometryData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  create(...)
     |      create() -> MObject
     |      
     |      Creates a new mesh data object, attaches it to this function set
     |      and returns an MObject which references it.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnGeometryData:
     |  
     |  addObjectGroup(...)
     |      addObjectGroup(id) -> self
     |      
     |      Adds an object group with the given id to the object.
     |  
     |  addObjectGroupComponent(...)
     |      addObjectGroupComponent(id, MObject component) -> self
     |      
     |      Adds the members of the given component to the object group
     |      with the given id.
     |  
     |  changeObjectGroupId(...)
     |      changeObjectGroupId(sourceId, destId) -> self
     |      
     |      Changes the id of the object group with the given id to the new id.
     |  
     |  copyObjectGroups(...)
     |      copyObjectGroups(MObject inGeom) -> self
     |      
     |      Copies the object groups from the given geometry data object.
     |  
     |  hasObjectGroup(...)
     |      hasObjectGroup(id) -> self
     |      
     |      Returns True if an object group with the given id is
     |      contained in the data.
     |  
     |  objectGroup(...)
     |      objectGroup(index) -> int
     |      
     |      Returns the id of the index'th object group contained by the object.
     |  
     |  objectGroupComponent(...)
     |      objectGroupComponent(id) -> MObject
     |      
     |      Returns a component which contains the members of the object group
     |      with the given id.
     |  
     |  objectGroupType(...)
     |      objectGroupType(id) -> MFn Type constant
     |      
     |      Returns the type of the component that the object group with the
     |      given id contains.
     |  
     |  removeObjectGroup(...)
     |      removeObjectGroup(id) -> self
     |      
     |      Removes an object group with the given id from the object.
     |  
     |  removeObjectGroupComponent(...)
     |      removeObjectGroupComponent(id, MObject component) -> self
     |      
     |      Removes the members of the given component from the object group
     |      with the given id.
     |  
     |  setObjectGroupComponent(...)
     |      setObjectGroupComponent(id, MObject component) -> self
     |      
     |      Sets the members of the object group with the given id
     |      to be only those in the given component.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnGeometryData:
     |  
     |  isIdentity
     |      True if the matrix for the geometry is the identity.
     |  
     |  isNotIdentity
     |      True if the matrix for the geometry is not the identity.
     |  
     |  matrix
     |      MMatrix used to convert the object into local space.
     |  
     |  objectGroupCount
     |      The number of object groups contained by the object.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnMessageAttribute(MFnAttribute)
     |  Functionset for creating and working with message attributes.
     |  
     |  Method resolution order:
     |      MFnMessageAttribute
     |      MFnAttribute
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  create(...)
     |      Creates a new message attribute, attaches it to the function set and returns it as an MObject.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnAttribute:
     |  
     |  accepts(...)
     |      Returns True if this attribute can accept a connection of the given type.
     |  
     |  acceptsAttribute(...)
     |      Returns True if this attribute can accept a connection with the given attribute.
     |  
     |  addToCategory(...)
     |      Adds the attribute to a category
     |  
     |  getAddAttrCmd(...)
     |      Returns a string containing a MEL 'addAttr' command capable of recreating the attribute.
     |  
     |  hasCategory(...)
     |      Checks to see if the attribute has a given category
     |  
     |  setNiceNameOverride(...)
     |      Sets a nice UI name for this attribute rather than using the default derived from it's long name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnAttribute:
     |  
     |  affectsAppearance
     |      Does the attribute affect how the node is drawn in Maya's viewport?
     |  
     |  affectsWorldSpace
     |      Does the attribute affect the node's worldSpace matrix?
     |  
     |  array
     |      Is the attribute an array?
     |  
     |  cached
     |      Should the attribute's value be cached in the datablock?
     |  
     |  channelBox
     |      Should the attribute be displayed in the Channel Box?
     |  
     |  connectable
     |      Can connections be made to the attribute?
     |  
     |  disconnectBehavior
     |      What should happen when the attribute loses an incoming connection?
     |  
     |  dynamic
     |      Is the attribute a dynamic attribute?
     |  
     |  extension
     |      Is the attribute an extension attribute?
     |  
     |  hidden
     |      If True the attribute will not be displayed in the Attribute Editor.
     |  
     |  indeterminant
     |      Hint to DG that this attribute may not always be used when computing the attributes which are dependent upon it.
     |  
     |  indexMatters
     |      If False, connectAttr -nextAvailable can be used with this attribute. If True then an explicit index must be provided.
     |  
     |  internal
     |      Will the node handle the attribute's data storage itself, outside of the node's data block?
     |  
     |  isProxyAttribute
     |      Does the attribute is a proxy attribute?
     |  
     |  keyable
     |      Can keys be set on the attribute?
     |  
     |  name
     |      Attribute's long name.
     |  
     |  parent
     |      Parent attribute. MObject::kNullObj if attr has no parent.
     |  
     |  readable
     |      Is the attribute readable?
     |  
     |  renderSource
     |      Is the attribute a render source?
     |  
     |  shortName
     |      Attribute's short name.
     |  
     |  storable
     |      Should the attribute's value be preserved when the node is written to file?
     |  
     |  usedAsColor
     |      Should the attribute be treated as a color in the UI?
     |  
     |  usedAsFilename
     |      Should the attribute be treated as a file name in the UI?
     |  
     |  usesArrayDataBuilder
     |      Array attributes only: does the attribute create elements using MArrayDataBuilder?
     |  
     |  worldSpace
     |      DAG nodes only: if the node is instanced, will the attribute have separate values for each instance?
     |  
     |  writable
     |      Is the attribute writable?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnAttribute:
     |  
     |  kDelete = 0
     |  
     |  kNothing = 2
     |  
     |  kReset = 1
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnNumericAttribute(MFnAttribute)
     |  Functionset for creating and working with numeric attributes.
     |  
     |  Method resolution order:
     |      MFnNumericAttribute
     |      MFnAttribute
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  child(...)
     |      Returns the specified child attribute of the parent attribute currently attached to the function set.
     |  
     |  create(...)
     |      Creates a new simple or compound numeric attribute, attaches it to the function set and returns it in an MObject.
     |  
     |  createAddr(...)
     |      Creates a new address attribute, attaches it to the function set and returns it in an MObject.
     |  
     |  createColor(...)
     |      Creates a new color attribute, attaches it to the function set and returns it in an MObject.
     |  
     |  createPoint(...)
     |      Creates a new 3D point attribute, attaches it to the function set and returns it in an MObject.
     |  
     |  getMax(...)
     |      Returns the attribute's hard maximum value(s).
     |  
     |  getMin(...)
     |      Returns the attribute's hard minimum value(s).
     |  
     |  getSoftMax(...)
     |      Returns the attribute's soft maximum value.
     |  
     |  getSoftMin(...)
     |      Returns the attribute's soft minimum value.
     |  
     |  hasMax(...)
     |      Returns True if a hard maximum value has been specified for the attribute.
     |  
     |  hasMin(...)
     |      Returns True if a hard minimum value has been specified for the attribute.
     |  
     |  hasSoftMax(...)
     |      Returns True if a soft maximum value has been specified for the attribute.
     |  
     |  hasSoftMin(...)
     |      Returns True if a soft minimum value has been specified for the attribute.
     |  
     |  numericType(...)
     |      Returns the numeric type of the attribute currently attached to the function set.
     |  
     |  setMax(...)
     |      Sets the attribute's hard maximum value(s).
     |  
     |  setMin(...)
     |      Sets the attribute's hard minimum value(s).
     |  
     |  setSoftMax(...)
     |      Sets the attribute's soft maximum value.
     |  
     |  setSoftMin(...)
     |      Sets the attribute's soft minimum value.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  default
     |      Default value
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnAttribute:
     |  
     |  accepts(...)
     |      Returns True if this attribute can accept a connection of the given type.
     |  
     |  acceptsAttribute(...)
     |      Returns True if this attribute can accept a connection with the given attribute.
     |  
     |  addToCategory(...)
     |      Adds the attribute to a category
     |  
     |  getAddAttrCmd(...)
     |      Returns a string containing a MEL 'addAttr' command capable of recreating the attribute.
     |  
     |  hasCategory(...)
     |      Checks to see if the attribute has a given category
     |  
     |  setNiceNameOverride(...)
     |      Sets a nice UI name for this attribute rather than using the default derived from it's long name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnAttribute:
     |  
     |  affectsAppearance
     |      Does the attribute affect how the node is drawn in Maya's viewport?
     |  
     |  affectsWorldSpace
     |      Does the attribute affect the node's worldSpace matrix?
     |  
     |  array
     |      Is the attribute an array?
     |  
     |  cached
     |      Should the attribute's value be cached in the datablock?
     |  
     |  channelBox
     |      Should the attribute be displayed in the Channel Box?
     |  
     |  connectable
     |      Can connections be made to the attribute?
     |  
     |  disconnectBehavior
     |      What should happen when the attribute loses an incoming connection?
     |  
     |  dynamic
     |      Is the attribute a dynamic attribute?
     |  
     |  extension
     |      Is the attribute an extension attribute?
     |  
     |  hidden
     |      If True the attribute will not be displayed in the Attribute Editor.
     |  
     |  indeterminant
     |      Hint to DG that this attribute may not always be used when computing the attributes which are dependent upon it.
     |  
     |  indexMatters
     |      If False, connectAttr -nextAvailable can be used with this attribute. If True then an explicit index must be provided.
     |  
     |  internal
     |      Will the node handle the attribute's data storage itself, outside of the node's data block?
     |  
     |  isProxyAttribute
     |      Does the attribute is a proxy attribute?
     |  
     |  keyable
     |      Can keys be set on the attribute?
     |  
     |  name
     |      Attribute's long name.
     |  
     |  parent
     |      Parent attribute. MObject::kNullObj if attr has no parent.
     |  
     |  readable
     |      Is the attribute readable?
     |  
     |  renderSource
     |      Is the attribute a render source?
     |  
     |  shortName
     |      Attribute's short name.
     |  
     |  storable
     |      Should the attribute's value be preserved when the node is written to file?
     |  
     |  usedAsColor
     |      Should the attribute be treated as a color in the UI?
     |  
     |  usedAsFilename
     |      Should the attribute be treated as a file name in the UI?
     |  
     |  usesArrayDataBuilder
     |      Array attributes only: does the attribute create elements using MArrayDataBuilder?
     |  
     |  worldSpace
     |      DAG nodes only: if the node is instanced, will the attribute have separate values for each instance?
     |  
     |  writable
     |      Is the attribute writable?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnAttribute:
     |  
     |  kDelete = 0
     |  
     |  kNothing = 2
     |  
     |  kReset = 1
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnNumericData(MFnData)
     |  Function set for non-simple numeric node data.
     |  
     |  Method resolution order:
     |      MFnNumericData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  create(...)
     |      Creates a new numeric data object.
     |  
     |  getData(...)
     |      Returns a list containing the attached data object's data.
     |  
     |  numericType(...)
     |      Returns the type of data in the attached data object.
     |  
     |  setData(...)
     |      Sets the value of the data in the attached data object.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  k2Double = 15
     |  
     |  k2Float = 12
     |  
     |  k2Int = 8
     |  
     |  k2Long = 8
     |  
     |  k2Short = 5
     |  
     |  k3Double = 16
     |  
     |  k3Float = 13
     |  
     |  k3Int = 9
     |  
     |  k3Long = 9
     |  
     |  k3Short = 6
     |  
     |  k4Double = 17
     |  
     |  kAddr = 18
     |  
     |  kBoolean = 1
     |  
     |  kByte = 2
     |  
     |  kChar = 3
     |  
     |  kDouble = 14
     |  
     |  kFloat = 11
     |  
     |  kInt = 7
     |  
     |  kInt64 = 10
     |  
     |  kInvalid = 0
     |  
     |  kLast = 19
     |  
     |  kLong = 7
     |  
     |  kShort = 4
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnNurbsCurve(MFnDagNode)
     |  NURBS (Non-Uniform Rational B-Spline) curve function set.
     |  
     |  The shape of a NURBS curve is defined by an array of CVs
     |  (control vertices), an array of knot values, a degree, and a
     |  form.  There are 3 possible 'forms' for the curve: open,
     |  closed and periodic.
     |  
     |  The open and closed forms are quite similar, and in fact a
     |  closed curve will become an open curve if either the first
     |  or last CV is moved so that they are no longer coincident.
     |  To create an open or closed curve of degree N with M spans,
     |  you must provide M+N CVs.  This implies that for a degree N
     |  curve, you must specify at least N+1 CVs to get a curve with
     |  a single span.
     |  
     |  The number of knots required for a curve is M + 2N - 1. If
     |  you want the curve to start exactly at the first CV and end
     |  exactly at the last CV, then the knot vector must be
     |  structured to have degree N 'multiplicity' at the beginning
     |  and end.  This means that the first N knots must be
     |  identical, and the last N knots must be identical.
     |  
     |  A periodic curve is a special case of a closed curve.
     |  Instead of having just the first and last CVs coincident,
     |  the last N CVs in the curve must overlap the first N CVs.
     |  This results in a curve with no tangent break at the seam
     |  where the ends meet.  The last N CVs in a periodic curve are
     |  permanently bound to the first N CVs, and Maya will not
     |  allow those last N CVs to be repositioned.  If one or more
     |  of the first N CVs of the curve are repositioned, the
     |  overlapping CV's will remain bound, and will also be moved.
     |  
     |  In order to create a periodic curve, you must specify at
     |  least 2N+1 CVs, so that that last N can overlap the first N
     |  and you still have 1 non-overlapping CV left.  The number of
     |  CVs required to create a periodic curve is still N+M (with a
     |  lower limit of 2N+1), but you must ensure that the positions
     |  of the last N CVs are identical to the positions of the
     |  first N.
     |  
     |  You still need M + 2N - 1 knots for a periodic curve, but
     |  the knot values required are more restrictive than for open
     |  or closed curves because of the overlap at the ends, The
     |  difference between the first N pairs of knots values should
     |  be equal to the difference between the last N pairs.
     |  Additionally there can be no knot multiplicity at the ends
     |  of the curve, because that would compromise the tangent
     |  continuity property. So an example knot sequence could begin
     |  with knots at { -(N-2), -(N-1), ... , 0}.
     |  
     |  Note that some third party applications use a different
     |  format for knots, where the number of knots required for a
     |  curve is M+2N+1 rather than M+2N-1 as used in Maya. Both
     |  knot representations are equivalent mathematically. To
     |  convert from one of these external representations into the
     |  Maya representation, simply omit the first and last knots
     |  from the external representation when creating the Maya
     |  representation. To convert from the Maya representation into
     |  the external representation, add two new knots at the
     |  beginning and end of the Maya knot sequence. The value of
     |  these new knots depends on the existing knot sequence. For a
     |  knot sequence with multiple end knots, simply duplicate the
     |  existing first and last knots once more, for example:
     |  
     |  Maya representation: {0,0,0,...,N,N,N}
     |  External representation: {0,0,0,0,...,N,N,N,N}
     |  
     |  For a knot sequence with uniform end knots, create the new
     |  knots offset at an interval equal to the existing first and
     |  last knot intervals, for example:
     |  
     |  Maya representation: {0,1,2,...,N,N+1,N+2}
     |  External representation: {-1,0,1,2,...,N,N+1,N+2,N+3}
     |  
     |  Method resolution order:
     |      MFnNurbsCurve
     |      MFnDagNode
     |      MFnDependencyNode
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  area(...)
     |      area(tolerance=kPointTolerance) -> float
     |      
     |      Returns the area bounded by the curve. The curve must be closed and
     |      planar. A value of 0.0 will be returned if area cannot be determined.
     |      
     |      * tolerance (float) - Amount of error allowed in the calculation
     |  
     |  closestPoint(...)
     |      closestPoint(testPoint, guess=None, tolerance=kPointTolerance,
     |          space=kObject) -> (MPoint, float)
     |      
     |      Returns a tuple containing the point on the curve which is closest
     |      to 'testPoint', and the parameter value at which that point occurs.
     |      
     |      * testPoint (MPoint) - point to get closest to
     |      * guess      (float) - a guess as to roughly where on the curve the
     |                             closest point will be. If the guess is in the
     |                             correct span than it can significantly speed
     |                             up the search. If not then it may slow down
     |                             the search a bit. If no guess is supplied
     |                             then the search will begin at the start of
     |                             the curve.
     |      * tolerance  (float) - maximum allowed distance between the curve
     |                             and the returned point.
     |      * space (MSpace constant) - coordinate space to use for the points
     |  
     |  copy(...)
     |      copy(source, parent=MObject.kNullObj) -> MObject
     |      
     |      Returns a new NURBS curve which is a copy of 'source' and resets
     |      the functionset to operate on it.
     |      
     |      * parent (MObject)
     |                   - the parent/owner of the new curve. If it's a NURBS
     |                     curve data wrapper (MFn.kNurbsCurveData) then the
     |                     created curve will be returned as a geometry object
     |                     (MFn.kNurbsCurveGeom) owned by the wrapper. If
     |                     'parent' is a DAG node then the new curve will be
     |                     returned as nurbsCurve node parented under it. If
     |                     'parent' is not provided then a new top-level
     |                     transform will be created with the new curve parented
     |                     beneath it as a nurbsCurve node. In this last case it
     |                     will be the transform node which is returned.
     |  
     |  create(...)
     |      create(cvs, knots, degree, form, is2D, rational, parent=kNullObj)
     |          -> self
     |      create(subCurves, parent=kNullObj) -> self
     |      
     |      Returns a newly created curve and resets the functionset to operate
     |      on it. The first version creates the curve based on the control
     |      vertices and knots provided while the second creates the curve as a
     |      copy of the provided subCurves, all joined together.
     |      
     |      * cvs (MPointArray or seq of MPoint)
     |                   - positions of the control vertices
     |      * knots (MDoubleArray seq of float)
     |                   - parameter values of the knots. There must be
     |                     (# spans + 2*degree - 1) knots provided and they must
     |                     appear in non-decreasing order.
     |      * degree (int) - degree of the curve to create
     |      * form (int) - one of kOpen, kClosed or kPeriodic
     |      * is2d (bool)- if True the Z-coordinates of 'cvs' will be ignored,
     |                     giving a curve in the local XY plane.
     |      * rational (bool)
     |                   - set True if you want the new curve to be rational
     |      * parent (MObject)
     |                   - the parent/owner of the new curve. If it's a NURBS
     |                     curve data wrapper (MFn.kNurbsCurveData) then the
     |                     created curve will be returned as a geometry object
     |                     (MFn.kNurbsCurveGeom) owned by the wrapper. If
     |                     'parent' is a DAG node then the new curve will be
     |                     returned as nurbsCurve node parented under it. If
     |                     'parent' is not provided then a new top-level
     |                     transform will be created with the new curve parented
     |                     beneath it as a nurbsCurve node. In this last case it
     |                     will be the transform node which is returned.
     |      * subCurves (MObjectArray or seq of MObject)
     |                   - array of curves from which the new curve will be built
     |                     The curves must all be in the same direction, must not
     |                     intersect themselves or each other, the start of each
     |                     curve in the array must be coincident with the end of
     |                     the previous curve in the array, and the curves must be
     |                     be at least C0 continuous (i.e. tangent breaks are okay).
     |  
     |  createWithEditPoints(...)
     |      createWithEditPoints(eps, degree, form, is2D, rational, uniform,
     |          parent=kNullObj) -> MObject
     |      
     |      Returns a new curve based on the given edit points (i.e. points
     |      which lie on the curve) and resets the functionset to operate on it.
     |      
     |      * eps (MPointArray or seq of MPoint)
     |                   - positions of the edit points
     |      * degree (int) - degree of the curve to create
     |      * form (int) - one of kOpen, kClosed or kPeriodic
     |      * is2d (bool)- if True the Z-coordinates of 'eps' will be ignored,
     |                     giving a curve in the local XY plane.
     |      * rational (bool)
     |                   - set True if you want the new curve to be rational
     |      * uniform (bool)
     |                   - if True then parameter values of the knots will be
     |                     uniformly spaced, otherwise they will be based on
     |                     chord length.
     |      * parent (MObject)
     |                   - the parent/owner of the new curve. If it's a NURBS
     |                     curve data wrapper (MFn.kNurbsCurveData) then the
     |                     created curve will be returned as a geometry object
     |                     (MFn.kNurbsCurveGeom) owned by the wrapper. If
     |                     'parent' is a DAG node then the new curve will be
     |                     returned as nurbsCurve node parented under it. If
     |                     'parent' is not provided then a new top-level
     |                     transform will be created with the new curve parented
     |                     beneath it as a nurbsCurve node. In this last case it
     |                     will be the transform node which is returned.
     |  
     |  cvPosition(...)
     |      cvPosition(index, space=kObject) -> MPoint
     |      
     |      Returns the position of a single control vertex.
     |      
     |      * index (int) - index of the CV to return
     |      * space (int) - an MSpace constant giving the coordinate space in
     |                      which the point is given
     |  
     |  cvPositions(...)
     |      cvPositions(space=kObject) -> MPointArray
     |      
     |      Returns the positions of all of the curve's control vertices.
     |      
     |      * space (int) - an MSpace constant giving the coordinate space in
     |                      which the point is given
     |  
     |  cvs(...)
     |      cvs(startIndex[, endIndex]) -> MObject
     |      
     |      Returns a CV or a range of CVs as a component. MItCurveCV can be
     |      used to examine or modify the CVs in the component. Any modifications
     |      made to them will affect the curve. After all modifications are done,
     |      updateCurve() should be called to have the curve recalculate its
     |      cached geometry.
     |      
     |      * startIndex (int) - start of the range of CVs to return.
     |      * endIndex   (int) - end of the range of CVs to return. If not
     |                           provided then only the CV specified by
     |                           startIndex will be returned.
     |  
     |  distanceToPoint(...)
     |      distanceToPoint(point, space=kObject) -> float
     |      
     |      Returns the distance from the given point to the point on the curve
     |      which is closest to it.
     |      
     |      * point (MPoint) - the point to calculate the distance to
     |      * space (int)    - an MSpace constant giving the coordinate space in
     |                         which the point is given
     |  
     |  findLengthFromParam(...)
     |      findLengthFromParam(param) -> float
     |      
     |      Returns the length along the curve corresponding to a given
     |      parameter value on the curve. If the length cannot be found for
     |      the given parameter value then a length of zero is returned.
     |      
     |      * param (float) - parameter value on the curve
     |  
     |  findParamFromLength(...)
     |      findParamFromLength(length) -> float
     |      
     |      Returns the parameter value corresponding to a given length along
     |      the curve. If the parameter value cannot be determined then the value
     |      for the end point of the curve is returned.
     |      
     |      * length (float) - distance along the curve
     |  
     |  getDerivativesAtParam(...)
     |      getDerivativesAtParam(param, space=kObject) -> (MPoint, MVector[, MVector])
     |      
     |      Evaluates the curve at the given parameter value, returning a tuple
     |      containing the position and first derivative at that value. If 'dUU'
     |      is True then the returned tuple will include the second derivative
     |      as well as its third element.
     |      
     |      * param (float) - parameter value at which to do the evaluation
     |      * space   (int) - an MSpace constant giving the coordinate space in
     |                        which the point is given
     |      * dUU    (bool) - if True include the second derivative in the result.
     |  
     |  getParamAtPoint(...)
     |      getParamAtPoint(point, tolerance=kPointTolerance, space=kObject) -> float
     |      
     |      Returns the parameter value corresponding to the given point on the
     |      curve.
     |      
     |      * point    (MPoint) - point on curve.
     |      * tolerance (float) - max distance 'point' can be from the curve and
     |                            still be considered to lie on it.
     |      * space       (int) - an MSpace constant giving the coordinate space
     |                            in which the point is given
     |  
     |  getPointAtParam(...)
     |      getPointAtParam(param, space=kObject) -> MPoint
     |      
     |      Returns the point on the curve at the given parameter value.
     |      
     |      * param (float) - parameter value at which to find the point
     |      * space   (int) - an MSpace constant giving the coordinate space in
     |                        which the point should be returned
     |  
     |  isParamOnCurve(...)
     |      isParamOnCurve(param) -> bool
     |      
     |      Returns True if the given parameter value lies on the curve (i.e. is
     |      within the curve's knot domain), False otherwise.
     |      
     |      * param (float) - parameter value to test
     |  
     |  isPointOnCurve(...)
     |      isPointOnCurve(point, tolerance=kPointTolerance, space=kObject) -> bool
     |      
     |      Returns True if the given point lies on the curve, False otherwise.
     |      
     |      * point    (MPoint) - point to test.
     |      * tolerance (float) - max distance 'point' can be from the curve and
     |                            still be considered to lie on it.
     |      * space       (int) - an MSpace constant giving the coordinate space
     |                            in which the point is given
     |  
     |  knot(...)
     |      knot(index) -> float
     |      
     |      Returns the parameter value of a single knot.
     |      
     |      * index (int) - index of the knot to return. These range from 0 to
     |                      (numKnots - 1)
     |  
     |  knots(...)
     |      knots() -> MDoubleArray
     |      
     |      Returns the parameter values for all of the curve's knots.
     |  
     |  length(...)
     |      length(tolerance=kPointTolerance) -> float
     |      
     |      Returns the arc length of this curve or 0.0 if it cannot be computed.
     |      
     |      * tolerance (float) - max error allowed in the calculation.
     |  
     |  makeMultipleEndKnots(...)
     |      makeMultipleEndKnots() -> self
     |      
     |      Sets the curve's end knots to have full multiplicity. This ensures
     |      that the end points interpolate the first and last CVs (i.e. lie
     |      directly on them). It can also be used to convert a periodic curve
     |      to a closed curve.
     |  
     |  normal(...)
     |      normal(param, space=kObject) -> MVector
     |      
     |      Returns the normal at the given parameter value on the curve. For
     |      degree 1 curves the normal is the vector at right angles to the
     |      curve that lies in the average plane of the curve. For higher degrees
     |      the normal is defined by the local curvature at the parameter.
     |      
     |      * param (float) - parameter value at which to find the normal
     |      * space   (int) - an MSpace constant giving the coordinate space in
     |                        which the normal should be returned
     |  
     |  removeKnot(...)
     |      removeKnot(param, removeAll=False) -> self
     |      
     |      Removes one or more knots at the given parameter value.
     |      
     |      If there are multiple knots at the parameter value then 'removeAll'
     |      determines which ones will be removed. If it is True then they will
     |      all be removed. If it is False then all but one will be removed.
     |      
     |      * param     (float) - parameter of the knot
     |      * removeAll  (bool) - how to handle multiple knots at the same param
     |  
     |  reverse(...)
     |      reverse() -> self
     |      
     |      Reverses the direction of the curve.
     |  
     |  setCVPosition(...)
     |      setCVPosition(index, point, space=kObject) -> self
     |      
     |      Sets the position of a single control vertex of the curve.
     |      
     |      * index    (int) - index of the cv
     |      * point (MPoint) - new position for the cv
     |      * space    (int) - an MSpace constant giving the coordinate space
     |                         in which the point is given
     |  
     |  setCVPositions(...)
     |      setCVPositions(points, space=kObject) -> self
     |      
     |      Sets the positions of all of the curve's control vertices.
     |      
     |      * points (MPointArray or seq of MPoint)
     |                     - the points to be set. The array/sequence must
     |                       contain exactly the same number of points as the
     |                       curve has control vertices.
     |      * space  (int) - an MSpace constant giving the coordinate space
     |                       in which the points are given
     |  
     |  setKnot(...)
     |      setKnot(index, param) -> self
     |      
     |      Sets the parameter value of a single knot.
     |      * index   (int) - index of the knot
     |      * param (float) - new parameter value for the knot
     |  
     |  setKnots(...)
     |      setKnots(params, startIndex, endIndex) -> self
     |      
     |      Sets the parameter values of a contiguous group of knots.
     |      
     |      * params (MDoubleArray of seq of float)
     |                         - the parameter values to set, one per knot in
     |                           the range
     |      * startIndex (int) - first knot in the range to be set
     |      * endIndex   (int) - last knot in the range to be set
     |  
     |  tangent(...)
     |      tangent(param, space=kObject) -> MVector
     |      
     |      Returns the normalized tangent vector at the given parameter value
     |      on the curve.
     |      
     |      * param (float) - parameter value at which to find the tangent
     |      * space   (int) - an MSpace constant giving the coordinate space in
     |                        which the tangent should be returned
     |  
     |  updateCurve(...)
     |      updateCurve() -> self
     |      
     |      Tells the shape node which represents the curve in the scene, if
     |      any, that the curve has changed and needs to be redrawn.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  degree
     |      The degree of the curve or 0 if the degree cannot be determined.
     |  
     |  form
     |      The form of the curve: kOpen, kClosed, kPeriodic or kInvalid
     |  
     |  hasHistoryOnCreate
     |      True if the curve was created with history.
     |  
     |  isPlanar
     |      True if the curve is planar.
     |  
     |  knotDomain
     |      A tuple containing a pair of floats corresponding to the maximum and
     |      minimum parameter values for this curve.
     |  
     |  numCVs
     |      Number of CVs in the curve or 0 if the number of CVs cannot be
     |      determined.
     |  
     |  numKnots
     |      Number of knots in the curve or 0 if the number of knots cannot be
     |      determined.
     |  
     |  numSpans
     |      Number of spans in the curve or 0 if the number of spans cannot be
     |      determined.
     |  
     |  planeNormal
     |      MVector of the normal to the plane of the curve, if the curve is
     |      planar, or None if the curve is not planar.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kClosed = 2
     |  
     |  kInvalid = 0
     |  
     |  kLast = 4
     |  
     |  kOpen = 1
     |  
     |  kPeriodic = 3
     |  
     |  kPointTolerance = 0.001
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDagNode:
     |  
     |  addChild(...)
     |      addChild(node, index=kNextPos, keepExistingParents=False) -> self
     |      
     |      Makes a node a child of this one.
     |  
     |  child(...)
     |      child(index) -> MObject
     |      
     |      Returns the specified child of this node.
     |  
     |  childCount(...)
     |      childCount() -> int
     |      
     |      Returns the number of nodes which are children of this one.
     |  
     |  dagPath(...)
     |      dagPath() -> MDagPath
     |      
     |      Returns the DAG path to which this function set is attached. Raises a TypeError if the function set is attached to an MObject rather than a path.
     |  
     |  dagRoot(...)
     |      dagRoot() -> MObject
     |      
     |      Returns the root node of the first path leading to this node.
     |  
     |  duplicate(...)
     |      duplicate(instance=False, instanceLeaf=False) -> MObject
     |      
     |      Duplicates the DAG hierarchy rooted at the current node.
     |  
     |  fullPathName(...)
     |      fullPathName() -> string
     |      
     |      Returns the full path of the attached object, from the root of the DAG on down.
     |  
     |  getAllPaths(...)
     |      getAllPaths() -> MDagPathArray
     |      
     |      Returns all of the DAG paths which lead to the object to which this function set is attached.
     |  
     |  getConnectedSetsAndMembers(...)
     |      getConnectedSetsAndMembers(instance, renderableSetsOnly) -> (MObjectArray, MObjectArray)
     |      
     |      Returns a tuple containing an array of sets and an array of the
     |      components of the DAG object which are in those sets. If the entire object is in a set, then the corresponding entry in the comps array will have no elements in it.
     |  
     |  getPath(...)
     |      getPath() -> MDagPath
     |      
     |      Returns the DAG path to which this function set is attached, or the first path to the node if the function set is attached to an MObject.
     |  
     |  hasChild(...)
     |      hasChild(node) -> bool
     |      
     |      Returns True if the specified node is a child of this one.
     |  
     |  hasParent(...)
     |      hasParent(node) -> bool
     |      
     |      Returns True if the specified node is a parent of this one.
     |  
     |  instanceCount(...)
     |      instanceCount(indirect) -> int
     |      
     |      Returns the number of instances for this node.
     |  
     |  isChildOf(...)
     |      isChildOf(node) -> bool
     |      
     |      Returns True if the specified node is a parent of this one.
     |  
     |  isInstanced(...)
     |      isInstanced(indirect=True) -> bool
     |      
     |      Returns True if this node is instanced.
     |  
     |  isInstancedAttribute(...)
     |      isInstancedAttribute(attr) -> bool
     |      
     |      Returns True if the specified attribute is an instanced attribute of this node.
     |  
     |  isParentOf(...)
     |      isParentOf(node) -> bool
     |      
     |      Returns True if the specified node is a child of this one.
     |  
     |  parent(...)
     |      parent(index) -> MObject
     |      
     |      Returns the specified parent of this node.
     |  
     |  parentCount(...)
     |      parentCount() -> int
     |      
     |      Returns the number of parents this node has.
     |  
     |  partialPathName(...)
     |      partialPathName() -> string
     |      
     |      Returns the minimum path string necessary to uniquely identify the attached object.
     |  
     |  removeChild(...)
     |      removeChild(node) -> self
     |      
     |      Removes the child, specified by MObject, reparenting it under the world.
     |  
     |  removeChildAt(...)
     |      removeChildAt(index) -> self
     |      
     |      Removes the child, specified by index, reparenting it under the world.
     |  
     |  setObject(...)
     |      setObject(MObject or MDagPath) -> self
     |      
     |      Attaches the function set to the specified node or DAG path.
     |  
     |  transformationMatrix(...)
     |      transformationMatrix() -> MMatrix
     |      
     |      Returns the object space transformation matrix for this DAG node.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDagNode:
     |  
     |  boundingBox
     |      Node's bounding box, in object space.
     |  
     |  inModel
     |      True if the node has been added to the model.
     |  
     |  inUnderWorld
     |      True if this node is in the underworld of another node (e.g. a curve on surface is in the underworld of the surface).
     |  
     |  isInstanceable
     |      True if instancing is allowed for this node.
     |  
     |  isIntermediateObject
     |      True if this node is just an intermediate in part of a larger calculation (e.g. input to a deformer).
     |  
     |  objectColor
     |      Index from 0 to 7 indicating the color in which the node is to be drawn when inactive, assuming that it is drawable.
     |  
     |  objectColorRGB
     |      RGB value indicating the color in which the node is to be drawn when inactive, assuming that it is drawable.
     |  
     |  objectColorType
     |      Determines whether the default color, indexed object color, orRGB object color is used for this object.
     |  
     |  useObjectColor
     |      If True then the node will be drawn using its 'objectColor', otherwise it will be drawn using Maya's default color. Thismethod is deprecated, use objectColorType instead.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDagNode:
     |  
     |  kNextPos = 255
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDependencyNode:
     |  
     |  absoluteName(...)
     |      Returns the absolute name of this node.  The absolute name of a node is the full namespace path starting at (and including) the root namespace, down to (and including) the node itself.  Regardless of relative name mode, absoluteName() will always return a full namespace path prefixed with a leading colon (the root namespace).
     |  
     |  addAttribute(...)
     |      Adds a new dynamic attribute to the node.
     |  
     |  addExternalContentForFileAttr(...)
     |      Adds content info to the specified table from a file path attribute.
     |  
     |  affectsAnimation(...)
     |      Returns true if the changes to the node may affect animation.
     |  
     |  attribute(...)
     |      Returns an attribute of the node, given either its index or name.
     |  
     |  attributeClass(...)
     |      Returns the class of the specified attribute.
     |  
     |  attributeCount(...)
     |      Returns the number of attributes on the node.
     |  
     |  canBeWritten(...)
     |      Returns true if the node will be written to file.
     |  
     |  dgCallbackIds(...)
     |      Returns DG timing information for a specific callback type, broken down by callbackId.
     |  
     |  dgCallbacks(...)
     |      Returns DG timing information broken down by callback type.
     |  
     |  dgTimer(...)
     |      Returns a specific DG timer metric for a given timer type.
     |  
     |  dgTimerOff(...)
     |      Turns DG timing off for this node.
     |  
     |  dgTimerOn(...)
     |      Turns DG timing on for this node.
     |  
     |  dgTimerQueryState(...)
     |      Returns the current DG timer state for this node.
     |  
     |  dgTimerReset(...)
     |      Resets all DG timers for this node.
     |  
     |  findAlias(...)
     |      Returns the attribute which has the given alias.
     |  
     |  findPlug(...)
     |      Returns a plug for the given attribute.
     |  
     |  getAffectedAttributes(...)
     |      Returns all of the attributes which are affected by the specified attribute.
     |  
     |  getAffectingAttributes(...)
     |      Returns all of the attributes which affect the specified attribute.
     |  
     |  getAliasAttr(...)
     |      Returns the node's alias attribute, which is a special attribute used to store information about the node's attribute aliases.
     |  
     |  getAliasList(...)
     |      Returns all of the node's attribute aliases.
     |  
     |  getConnections(...)
     |      Returns all the plugs which are connected to attributes of this node.
     |  
     |  getExternalContent(...)
     |      Gets the external content (files) that this node depends on.
     |  
     |  hasAttribute(...)
     |      Returns True if the node has an attribute with the given name.
     |  
     |  hasUniqueName(...)
     |      Returns True if the node's name is unique.
     |  
     |  isFlagSet(...)
     |      Returns the state of the specified node flag.
     |  
     |  isNewAttribute(...)
     |      Returns True if the specified attribute was added in the current scene, and not by by one of its referenced files.
     |  
     |  isTrackingEdits(...)
     |      Returns True if the node is referenced or in an assembly that is tracking edits.
     |  
     |  name(...)
     |      Returns the node's name.
     |  
     |  plugsAlias(...)
     |      Returns the alias for a plug's attribute.
     |  
     |  removeAttribute(...)
     |      Removes a dynamic attribute from the node.
     |  
     |  reorderedAttribute(...)
     |      Returns one of the node's attribute, based on the order in which they are written to file.
     |  
     |  setAffectsAnimation(...)
     |      Specifies that modifications to a node could potentially affect the animation.
     |  
     |  setAlias(...)
     |      Adds or removes an attribute alias.
     |  
     |  setDoNotWrite(...)
     |      Used to prevent the node from being written to file.
     |  
     |  setExternalContent(...)
     |      Changes the location of external content.
     |  
     |  setExternalContentForFileAttr(...)
     |      Sets content info in the specified attribute from the table.
     |  
     |  setFlag(...)
     |      Sets the state of the specified node flag.
     |  
     |  setName(...)
     |      Sets the node's name.
     |  
     |  setUuid(...)
     |      Sets the node's UUID.
     |  
     |  userNode(...)
     |      Returns the MPxNode object for a plugin node.
     |  
     |  uuid(...)
     |      Returns the node's UUID.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MFnDependencyNode:
     |  
     |  allocateFlag(...)
     |      Allocates a flag on all nodes for use by the named plugin and returns the flag's index.
     |  
     |  classification(...)
     |      Returns the classification string for the named node type.
     |  
     |  deallocateAllFlags(...)
     |      Deallocates all node flags which are currently allocated to the named plugin.
     |  
     |  deallocateFlag(...)
     |      Deallocates the specified node flag, which was previously allocated by the named plugin using allocateFlag().
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDependencyNode:
     |  
     |  isDefaultNode
     |      True if this is a default node, created automatically by Maya.
     |  
     |  isFromReferencedFile
     |      True if the node is from a referenced file, False if the node is part of the main scene.
     |  
     |  isLocked
     |      True if the node is locked against changes.
     |  
     |  isShared
     |      True if the node is shared.
     |  
     |  namespace
     |      Name of the namespace which contains the node.
     |  
     |  pluginName
     |      Name of the plugin which registered the node type, if any.
     |  
     |  typeId
     |      MTypeId for the node's type.
     |  
     |  typeName
     |      Name of the node's type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDependencyNode:
     |  
     |  kExtensionAttr = 3
     |  
     |  kInvalidAttr = 4
     |  
     |  kLocalDynamicAttr = 1
     |  
     |  kNormalAttr = 2
     |  
     |  kTimerInvalidState = 3
     |  
     |  kTimerMetric_callback = 0
     |  
     |  kTimerMetric_callbackNotViaAPI = 6
     |  
     |  kTimerMetric_callbackViaAPI = 5
     |  
     |  kTimerMetric_compute = 1
     |  
     |  kTimerMetric_computeDuringCallback = 7
     |  
     |  kTimerMetric_computeNotDuringCallback = 8
     |  
     |  kTimerMetric_dirty = 2
     |  
     |  kTimerMetric_draw = 3
     |  
     |  kTimerMetric_fetch = 4
     |  
     |  kTimerMetrics = 9
     |  
     |  kTimerOff = 0
     |  
     |  kTimerOn = 1
     |  
     |  kTimerType_count = 2
     |  
     |  kTimerType_inclusive = 1
     |  
     |  kTimerType_self = 0
     |  
     |  kTimerTypes = 3
     |  
     |  kTimerUninitialized = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnNurbsCurveData(MFnGeometryData)
     |  MFnNurbsCurveData allows the creation and manipulation of Nurbs Curve
     |  data objects for use in the dependency graph.
     |  
     |  __init__()
     |  Initializes a new, empty MFnNurbsCurveData object
     |  
     |  __init__(MObject)
     |  Initializes a new MFnNurbsCurveData function set, attached
     |  to the specified object.
     |  
     |  Method resolution order:
     |      MFnNurbsCurveData
     |      MFnGeometryData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  create(...)
     |      create() -> MObject
     |      
     |      Creates a new nurbs curve data object, attaches it to this function set
     |      and returns an MObject which references it.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnGeometryData:
     |  
     |  addObjectGroup(...)
     |      addObjectGroup(id) -> self
     |      
     |      Adds an object group with the given id to the object.
     |  
     |  addObjectGroupComponent(...)
     |      addObjectGroupComponent(id, MObject component) -> self
     |      
     |      Adds the members of the given component to the object group
     |      with the given id.
     |  
     |  changeObjectGroupId(...)
     |      changeObjectGroupId(sourceId, destId) -> self
     |      
     |      Changes the id of the object group with the given id to the new id.
     |  
     |  copyObjectGroups(...)
     |      copyObjectGroups(MObject inGeom) -> self
     |      
     |      Copies the object groups from the given geometry data object.
     |  
     |  hasObjectGroup(...)
     |      hasObjectGroup(id) -> self
     |      
     |      Returns True if an object group with the given id is
     |      contained in the data.
     |  
     |  objectGroup(...)
     |      objectGroup(index) -> int
     |      
     |      Returns the id of the index'th object group contained by the object.
     |  
     |  objectGroupComponent(...)
     |      objectGroupComponent(id) -> MObject
     |      
     |      Returns a component which contains the members of the object group
     |      with the given id.
     |  
     |  objectGroupType(...)
     |      objectGroupType(id) -> MFn Type constant
     |      
     |      Returns the type of the component that the object group with the
     |      given id contains.
     |  
     |  removeObjectGroup(...)
     |      removeObjectGroup(id) -> self
     |      
     |      Removes an object group with the given id from the object.
     |  
     |  removeObjectGroupComponent(...)
     |      removeObjectGroupComponent(id, MObject component) -> self
     |      
     |      Removes the members of the given component from the object group
     |      with the given id.
     |  
     |  setObjectGroupComponent(...)
     |      setObjectGroupComponent(id, MObject component) -> self
     |      
     |      Sets the members of the object group with the given id
     |      to be only those in the given component.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnGeometryData:
     |  
     |  isIdentity
     |      True if the matrix for the geometry is the identity.
     |  
     |  isNotIdentity
     |      True if the matrix for the geometry is not the identity.
     |  
     |  matrix
     |      MMatrix used to convert the object into local space.
     |  
     |  objectGroupCount
     |      The number of object groups contained by the object.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnNurbsSurface(MFnDagNode)
     |  NURBS (Non-Uniform Rational B-Spline) surface function set.
     |  
     |  The shape of a NURBS surface is defined by an array of CVs
     |  (control vertices), an array of knot values in the U direction
     |  and an array of knot values in the V direction, a degree in U
     |  and in V, and a form in U and in V.
     |  
     |  The U and V knot vectors for NURBS surfaces are of size
     |  (spansInU + 2*degreeInU -1) and (spansInV + 2*degreeInV -1).
     |  Note: spans = numCVs - degree.
     |  
     |  There are 3 possible forms for the surface in the U and V
     |  directions: open, closed and periodic. These forms are described
     |  below. Note that the descriptions below apply to both the U and
     |  V directions.
     |  
     |  The open and closed forms are quite similar, and in fact a
     |  closed surface will become an open surface if either the first
     |  or last CV is moved so that they are no longer coincident. To
     |  create an open or closed surface, of degree N, with M spans, you
     |  must provide M+N CVs. This implies that for a degree N surface,
     |  you must specify at least N+1 CVs to get a surface with a single
     |  span.
     |  
     |  The number of knots required for the surface is M + 2N - 1.  If
     |  you want the surface to start exactly at the first CV and end
     |  exactly at the last CV, then the knot vector must be structured
     |  to have degree N multiplicity at the beginning and end. This
     |  means that the first N knots must be identical, and the last N
     |  knots must be identical.
     |  
     |  A periodic surface is a special case of a closed surface.
     |  Instead of having just the first and last CVs coincident, the
     |  last N CVs in the surface, where N is equal to the degree,
     |  overlap the first N CVs. This results in a surface with no
     |  tangent break where the ends meet. The last N CVs in a periodic
     |  surface are permanently bound to the first N CVs, and Maya will
     |  not allow those last N CVs to be repositioned. If one or more
     |  of the first N CVs of the surface are repositioned, the
     |  overlapping CV's will remain bound, and will also be moved.
     |  
     |  In order to create a periodic surface, you must specify at least
     |  2N+1 CVs, so that that last N can overlap the first N and you
     |  still have 1 non-overlapping CV left.  The number of CVs
     |  required to create a periodic surface is still N+M (with a
     |  lower limit of 2N+1), but you must ensure that the positions
     |  of the last N CVs are identical to the positions of the
     |  first N.
     |  
     |  You still need M + 2N - 1 knots for a periodic surface, but
     |  the knot values required are more restrictive than for open
     |  or closed surfaces because of the overlap of the last N CVs.
     |  The first N knots should be specified at the beginning of
     |  the knot array as values { -(N-1), -(N-2), ... 0 } in order
     |  to implement the overlap.  Additionally there can be no knot
     |  multiplicity at the end of the surface, because that would
     |  compromise the tangent continuity property.
     |  
     |  Note that some third party applications use a different
     |  format for knots, where the number of knots required for a
     |  surface is M+2N+1 rather than M+2N-1 as used in Maya. Both
     |  knot representations are equivalent mathematically. To
     |  convert from one of these external representations into the
     |  Maya representation, simply omit the first and last knots
     |  from the external representation when creating the Maya
     |  representation. To convert from the Maya representation into
     |  the external representation, add two new knots at the
     |  beginning and end of the Maya knot sequence. The value of
     |  these new knots depends on the existing knot sequence. For a
     |  knot sequence with multiple end knots, simply duplicate the
     |  existing first and last knots once more, for example:
     |  
     |  Maya representation: {0,0,0,...,N,N,N}
     |  External representation: {0,0,0,0,...,N,N,N,N}
     |  
     |  For a knot sequence with uniform end knots, create the new
     |  knots offset at an interval equal to the existing first and
     |  last knot intervals, for example:
     |  
     |  Maya representation: {0,1,2,...,N,N+1,N+2}
     |  External representation: {-1,0,1,2,...,N,N+1,N+2,N+3}
     |  
     |  Method resolution order:
     |      MFnNurbsSurface
     |      MFnDagNode
     |      MFnDependencyNode
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  area(...)
     |      area(space=kObject, tolerance=kPointTolerance) -> float
     |      
     |      Returns the surface's area, or 0.0 if the area cannot be determined.
     |  
     |  assignUV(...)
     |      assignUV(patchId, cornerIndex, uvId) -> self
     |      
     |      Maps a texture coordinate (uv) to a the specified corner of a patch.
     |      
     |      Note that API methods that modify uv data will work correctly when
     |      called through a plug-in node that is in the history of the shape,
     |      or when used on a surface shape that does not have history.
     |      Modifying uvs directly on a shape with history will result in the
     |      modifications getting over-written by the next evaluation of the
     |      history attached to the shape.
     |      
     |      * patchId     (int) - Patch to map to.
     |      * cornerIndex (int) - Corner of the patch to map to.
     |      * uvId        (int) - Index into the uv list of the UV to map.
     |  
     |  assignUVs(...)
     |      assignUVs(uvCounts, uvIds) -> self
     |      
     |      Maps all texture coordinates for the surface. setUV() and setUVs()
     |      are used to create the texture coordinate table for the surface.
     |      After the table is created, this method is used to map those values
     |      to each patch on a per-corner basis.
     |      
     |      The uvCounts array should contain the number of uvs per patch.
     |      Since uvs are mapped per-patch per-corner, the entries in this array
     |      should match the corner counts for each patch in the surface.
     |      If an entry in this array is '0' then the corresponding patch will
     |      not be mapped.
     |      
     |      The sum of all the entries in the uvCounts array must be equal to
     |      the size of the uvIds array or this method will fail.
     |      
     |      The uvIds array should contain the UV indices that will be mapped to
     |      each patch-corner in the surface. The entries in this array specify
     |      which uvs in the surface's uv table are mapped to each patch-corner.
     |      Each entry in the uvIds array must be less than numUVs().
     |      The size of the uvIds array is equivalent to adding up all of the
     |      entries in the uvCounts array, so for a cube with all patches mapped
     |      there would be 24 entries.
     |      
     |      Note that API methods that modify uv data will work correctly when
     |      called through a plug-in node that is in the history of the shape,
     |      or when used on a surface shape that does not have history.
     |      Modifying uvs directly on a shape with history will result in the
     |      modifications getting over-written by the next evaluation of the
     |      history attached to the shape.
     |      
     |      * uvCounts (MIntArray or seq of int)
     |                   - UV counts for each patch in the surface.
     |      * uvIds    (MIntArray or seq of int)
     |                   - UV indices to be mapped to each patch-corner.
     |  
     |  boundaryType(...)
     |      boundaryType(region, boundary) -> int
     |      
     |      Returns the type of the specified boundary. The surface must be a
     |      trimmed surface. Valid boundary types are:
     |      
     |          kInner           - an inner (clockwise) boundary
     |          kOuter           - an outser (counter clockwise) boundary
     |          kSegment         - a curve on a patch
     |          kClosedSegment   - a closed curve on a patch
     |          kInvalidBoundary - an invalid boundary type
     |      
     |      * region (int)   - Region containing the boundary
     |      * boundary (int) - Index of the boundary within the region.
     |  
     |  clearUVs(...)
     |      clearUVs() -> self
     |      
     |      Clears out all texture coordinates for the nurbsSurface, and leaves
     |      behind an empty UVset.
     |      
     |      This method should be used if it is needed to shrink the size of the
     |      UV table. In this case, the user should call clearUVs, setUVs and
     |      then assignUVs to rebuild the mapping info.
     |      
     |      When called on a dataNurbsSurface the UVs are removed. When called
     |      on a shape with no history, the UVs are removed and the attributes
     |      are set on the shape. When called on a shape with history, the
     |      polyDelMap command is invoked and a polyMapDel node is created.
     |  
     |  closestPoint(...)
     |      closestPoint(testPoint, uStart=None, vStart=None,
     |          ignoreTrimBoundaries=False, tolerance=kPointTolerance,
     |          space=kObject) -> (MPoint, float, float)
     |      
     |      Returns the closest point on the surface to the specified test point
     |      The return value is a tuple containing the position of the point and
     |      and its U and V texture parameters.
     |      
     |      Performance can be greatly increased by supplying starting U and V
     |      parameter values which are reasonably close to the final point.
     |      Specifying these values will invoke a special algorithm which will
     |      begin to search for the closest point at the given parameter value,
     |      and will check the local surface to see which direction will bring
     |      it closer to the given point. It then offsets in this direction and
     |      repeats the process, iteratively traversing the surface until it
     |      finds the closest point.
     |      This algorithm will fail if it encounters a seam before reaching
     |      the closest point, or if it finds a local closest point, such as a
     |      bulge on a mesh where an offset in any direction will take it
     |      further from the given point, even if that is not the true closest
     |      point on the mesh. For this reason it is advisable to avoid using
     |      this option unless absolutely sure that the initial point will be
     |      a good enough approximation to the final point that these
     |      conditions will not occur.
     |      
     |      * testPoint (MPoint) - Position of the point to be checked
     |      * uStart     (float) - Initial guess of a U parameter near where the
     |                             where the closest point is expected to be.
     |      * vStart     (float) - Initial guess of a V parameter near where the
     |                             where the closest point is expected to be.
     |      * ignoreTrimBoundaries (bool)
     |                           - For trimmed surfaces, if this is true the
     |                             trim curves will be ignored and the entire
     |                             untrimmed surface searched.
     |      * tolerance  (float) - How close to the surface must a point be to
     |                             be considered 'on' the surface.
     |      * space        (int) - an MSpace constant giving the coordinate
     |                             space which 'testPoint' is in. The returned
     |                             point will be in the same space.
     |  
     |  copy(...)
     |      copy(source, parent=kNullObj) -> MObject
     |      
     |      Returns a new NURBS surface, which is a copy of the source surface,
     |      and sets the functionset to operate on it.
     |      
     |      * source (MObject)- The surface to copy.
     |      * parent (MObject)- The parent/owner of the new surface. If it's a
     |                          NURBS surface data wrapper (MFn.kNurbsSurfaceData)
     |                          then the created surface will be returned as a
     |                          geometry object (MFn.kNurbsSurfaceGeom) owned by
     |                          the wrapper. If 'parent' is a DAG node then the
     |                          new surface will be returned as nurbsSurface node
     |                          parented under it. If 'parent' is not provided
     |                          then a new top-level transform will be created
     |                          with the new surface parented beneath it as a
     |                          nurbsSurface node. In this last case it will be
     |                          the transform node which is returned.
     |  
     |  create(...)
     |      create(cvs, uKnots, vKnots, uDegree, vDegree, uForm, vForm,
     |          rational, parent=kNullObj) -> MObject
     |      
     |      Returns a new NURBS surface created from the specified data and sets
     |      the function set to operate on it.
     |      
     |      * cvs (MPointArray or seq of MPoint)
     |                        - The control vertices.
     |      * uKnots (MDoubleArray or seq of float)
     |                        - Parameter values for the knots in the U direction.
     |      * vKnots (MDoubleArray or seq of float)
     |                        - Parameter values for the knots in the V direction.
     |      * uDegree   (int) - Degree of the basis functions in the U direction.
     |      * vDegree   (int) - Degree of the basis functions in the V direction.
     |      * uForm     (int) - A Form constant (kOpen, kClosed, kPeriodic) giving
     |                          the surface's form in the U direction.
     |      * vForm     (int) - A Form constant (kOpen, kClosed, kPeriodic) giving
     |                          the surface's form in the V direction.
     |      * rational (bool) - Create as rational (True) or non-rational (False)
     |                          surface.
     |      * parent (MObject)- The parent/owner of the new surface. If it's a
     |                          NURBS surface data wrapper (MFn.kNurbsSurfaceData)
     |                          then the created surface will be returned as a
     |                          geometry object (MFn.kNurbsSurfaceGeom) owned by
     |                          the wrapper. If 'parent' is a DAG node then the
     |                          new surface will be returned as nurbsSurface node
     |                          parented under it. If 'parent' is not provided
     |                          then a new top-level transform will be created
     |                          with the new surface parented beneath it as a
     |                          nurbsSurface node. In this last case it will be
     |                          the transform node which is returned.
     |  
     |  cv(...)
     |      cv(uIndex, vIndex) -> MObject
     |      
     |      Returns a component for the specified control vertex.
     |      
     |      * uIndex (int) - U index of the CV.
     |      * vIndex (int) - V index of the CV.
     |  
     |  cvPosition(...)
     |      cvPosition(uIndex, vIndex, space=kObject) -> MPoint
     |      
     |      Returns the position of the specified control vertex.
     |      
     |      * uIndex (int) - U index of the CV.
     |      * vIndex (int) - V index of the CV.
     |      * space  (int) - an MSpace constant giving the coordinate
     |                       space which the point should be returned.
     |  
     |  cvPositions(...)
     |      cvPositions(space=kObject) -> MPointArray
     |      
     |      Returns the positions of all the surface's control vertices.
     |      
     |      * space  (int) - an MSpace constant giving the coordinate
     |                       space which the points should be returned.
     |  
     |  cvsInU(...)
     |      cvsInU(startUIndex, endUIndex, vIndex) -> MObject
     |      
     |      Returns a component for a set of control vertices in the U direction.
     |      
     |      * startUIndex (int) - U index of the first CV to return.
     |      * endUIndex   (int) - U index of the last CV to return.
     |      * vIndex      (int) - V index for all of the returned CVs.
     |  
     |  cvsInV(...)
     |      cvsInV(startVIndex, endVIndex, uIndex) -> MObject
     |      
     |      Returns a component for a set of control vertices in the V direction.
     |      
     |      * startVIndex (int) - V index of the first CV to return.
     |      * endVIndex   (int) - V index of the last CV to return.
     |      * uIndex      (int) - U index for all of the returned CVs.
     |  
     |  distanceToPoint(...)
     |      distanceToPoint(point, space=kObject) -> float
     |      
     |      Returns the distance from the given point to the closest point on
     |      the surface.
     |      
     |      * point (MPoint) - Point to calculate distance to.
     |      * space  (int)   - An MSpace constant giving the coordinate space in
     |                         which the point has been specified.
     |  
     |  edge(...)
     |      edge(region, boundary, edge, paramEdge=False) -> MObjectArray
     |      
     |      Return the specified edge of a trim boundary.
     |      
     |      For each region of a trimmed surface there may be several boundary
     |      curves: an outer curve and possibly several inner boundary curves
     |      (which define holes). These boundary curves are made up of one or
     |      more curves called edges.
     |      
     |      The edge is returned as an MObjectArray as it may consist of more
     |      than one curve. The returned edge, or trim curve, can be a 2D parameter
     |      edge or a 3D edge curve. Note that for closed surfaces some of the
     |      3d edges may be 0 length in which case an empty MObjectArray is
     |      returned. An example of this is the poles of a sphere.
     |      
     |      * region     (int) - Index of trimmed region containing the edge.
     |      * boundary   (int) - Index of boundary within trimmed region.
     |      * edge       (int) - Index of the edge within the boundary.
     |      * paramEdge (bool) - If True a 2D parameter edge is returned,
     |                           otherwise a 3D edge is returned.
     |  
     |  getAssignedUVs(...)
     |      getAssignedUVs() -> (MIntArray, MIntArray)
     |      
     |      Returns the indices of all UVs which have been mapped to the surface.
     |      The return value is a tuple with an array containing the number
     |      of UVs for each patch in the surface, and a second array containing
     |      the indices of the UVs mapped to each corner of those patches. This
     |      is the same format as the arrays taken by the assignUVs() method.
     |  
     |  getConnectedShaders(...)
     |      getConnectedShaders(instanceNumber) -> (MObjectArray, MIntArray)
     |      
     |      Returns a tuple containing an array of all the shaders (sets)
     |      connected to the specified instance of this surface, and an array of
     |      patch/shader assignments. The second array will hold, for each patch
     |      in the surface, an index into the first array. If a patch does not
     |      have a shader assigned to it, the value of the index will be -1.
     |      The shader objects can be derived from the sets returned.
     |      
     |      Note: This method will only work with a MFnNurbsSurface function set
     |            which has been initialized with an MFn::kNurbsSurface.
     |      
     |      See also getConnectedSetsAndMembers.
     |      
     |      * instanceNumber (int) - Determines which instance of the surface to
     |                               query. This will be zero if there is only
     |                               one instance.
     |  
     |  getDerivativesAtParam(...)
     |      getDerivativesAtParam(uParam, vParam, space=kObject, secondOrder=False)
     |          -> (MPoint, MVector, MVector)
     |          -> (MPoint, MVector, MVector, MVector, MVector, MVector)
     |      
     |      Evaluates the surface at the given (u,v) coordinates, returning a
     |      tuple containing the position at that point, the first derivative
     |      vector in U, and the first derivative vector in V. If 'secondOrder'
     |      is True then the tuple will also contain three additional vectors:
     |      the second order partial derivative with respect to U (dUU), the
     |      second order partial derivative with respect to V (dVV), and the
     |      second order partial derivative with respect to U then V (dUV).
     |      None of the vectors will be normalized.
     |      
     |      * uParam (float) - U parameter value at which to do the evaluation.
     |      * vParam (float) - V parameter value at which to do the evaluation.
     |      * space    (int) - An MSpace constant giving the coordinate space in
     |                         which to perform the calculation.
     |      * secondOrder (bool)
     |                       - If True, second order derivatives will be included
     |                         in the result. Note that this will increase
     |                         computation time.
     |  
     |  getParamAtPoint(...)
     |      getParamAtPoint(point, ignoreTrimBoundaries, tolerance=kPointTolerance,
     |          space=kObject) -> (float, float)
     |      
     |      Returns a tuple containing the parameter values corresponding to the
     |      given point on the surface (or underlying surface).
     |      
     |      * point    (MPoint) - Location of the parameter to obtain.
     |      * ignoreTrimBoundaries (bool)
     |                          - For trimmed surfaces, if this is true the
     |                            trim curves will be ignored and the entire
     |                            untrimmed surface searched.
     |      * tolerance (float) - Accuracy to be used in the operation.
     |      * space       (int) - An MSpace constant giving the coordinate space
     |                            in which to perform the operation.
     |  
     |  getPatchUV(...)
     |      getPatchUV(patchId, cornerIndex) -> (float, float)
     |      
     |      Returns a tuple containing the texture texture coordinate for a
     |      corner of a patch. Since texture coordinates (UVs) are stored
     |      per-patch per-corner you must specify both the patch and the corner
     |      that the u and v values are mapped to.
     |      * patchId (int)     - Patch of interest.
     |      * cornerIndex (int) - Corner of interest.
     |  
     |  getPatchUVid(...)
     |      getPatchUVid(patchId, cornerIndex) -> int
     |      
     |      Returns the id of the texture coordinate for a single corner of a patch.
     |      
     |      * patchId (int)     - Patch of interest.
     |      * cornerIndex (int) - Corner of interest.
     |  
     |  getPatchUVs(...)
     |      getPatchUVs(patchId) -> (MFloatArray, MFloatArray)
     |      
     |      Returns a tuple containing the values of the texture coordinates on
     |      all corners of the specified patch. The tuple contains an array of U
     |      coordinates and an array of V coordinates, both the same length.
     |      
     |      * patchId (int)     - Patch of interest.
     |  
     |  getPointAtParam(...)
     |      getPointAtParam(uParam, vParam, space=kObject) -> MPoint
     |  
     |  getUV(...)
     |      getUV(uvId) -> (float, float)
     |      
     |      Returns a tuple containing the U and V values for the a texture coordinate
     |      
     |      * uvId (int) - Id of the texture coordinate of intest.
     |  
     |  getUVs(...)
     |      getUVs() -> (MFloatArray, MFloatArray)
     |      
     |      Returns all of the surface's texture coordinates as a tuple containing
     |      an array of U values and an array of V values.
     |  
     |  intersect(...)
     |      intersect(rayStart, rayDir, tolerance=kPointTolerance, space=kObject,
     |          distance=False, exactHit=False, all=False)
     |          -> (MPoint, float, float[, float][, bool])
     |          -> (MPointArray, MDoubleArray, MDoubleArray[, MDoubleArray][, bool])
     |          -> None
     |      
     |      Returns the closest point of intersection of a ray with the surface
     |      as a tuple containing the point of intersection and the U and V
     |      parameters at that point.
     |      * rayStart (MPoint) - Starting point for the ray.
     |      * rayDir  (MVector) - Direction of the ray
     |      * tolerance (float) - Accuracy to be used in the operation.
     |      * space       (int) - An MSpace constant giving the coordinate space
     |                            in which to perform the operation.* distance   (bool) - If True the distance from 'rayStart' to the
     |                            point of intersection will be appended to the
     |                            returned tuple.
     |      * exactHit   (bool) - If True then a boolean value indicating if the
     |                            point of intersection was an exact hit will be
     |                            appended to the returned tuple.
     |      * all        (bool) - If True then all points of intersection will
     |                            be returned. In this case the point of
     |                            intersection, U and V parameters, and distance
     |                            (if requested) will all be returned as arrays.
     |  
     |  isFlipNorm(...)
     |      isFlipNorm(region) -> bool
     |      
     |      Checks whether the normal for the specified region is flipped
     |      This method is only valid for trimmed surfaces.
     |      
     |      region (int) - Region to check.
     |  
     |  isKnotU(...)
     |      isKnotU(param) -> bool
     |      
     |      Checks if the specified parameter value is a knot value in the U
     |      direction.
     |      
     |      * param (float) - Parameter value to check.
     |  
     |  isKnotV(...)
     |      isKnotV(param) -> bool
     |      
     |      Checks if the specified parameter value is a knot value in the V
     |      direction.
     |      
     |      * param (float) - Parameter value to check.
     |  
     |  isParamOnSurface(...)
     |      isParamOnSurface(uParam, vParam) -> bool
     |      
     |      Checks if the specified parameter point is on this surface.
     |      
     |      * uParam (float) - U parameter value.
     |      * vParam (float) - V parameter value.
     |  
     |  isPointInTrimmedRegion(...)
     |      isPointInTrimmedRegion(uParam, vParam) -> bool
     |      
     |      Checks if the given point is in a trimmed away region of a trimmed
     |      surface. A trimmed away region is the part of the surface that is
     |      cut away as a result of a trim operation.
     |      
     |      * uParam (float) - U parameter of the point to check.
     |      * vParam (float) - V parameter of the point to check.
     |  
     |  isPointOnSurface(...)
     |      isPointOnSurface(point, tolerance=kPointTolerance, space=kObject) -> bool
     |      
     |      Checks if the given point is on this surface.
     |      
     |      * point    (MPoint) - Point to check.
     |      * tolerance (float) - Accuracy to be used in the operation.
     |      * space       (int) - An MSpace constant giving the coordinate space
     |                            in which to perform the operation
     |  
     |  knotInU(...)
     |      knotInU(index) -> float
     |      
     |      Returns the knot value at the specified U index. U knots are indexed
     |      from 0 to numKnotsInU-1.
     |      * index (int) - Index of the U knot to return.
     |  
     |  knotInV(...)
     |      knotInV(index) -> float
     |      
     |      Returns the knot value at the specified V index. V knots are indexed
     |      from 0 to numKnotsInV-1.
     |      * index (int) - Index of the V knot to return.
     |  
     |  knotsInU(...)
     |      knotsInU() -> MDoubleArray
     |      
     |      Returns all of the surface's knots in the U direction.
     |  
     |  knotsInV(...)
     |      knotsInV() -> MDoubleArray
     |      
     |      Returns all of the surface's knots in the V direction.
     |  
     |  normal(...)
     |      normal(uParam, vParam, space=kObject) -> MVector
     |      
     |      Returns the normal at the given parameter value on the surface.
     |      
     |      * uParam (float) - U parameter at which to obtain normal.
     |      * vParam (float) - V parameter at which to obtain normal.
     |      * space    (int) - An MSpace constant giving the coordinate space
     |                         in which to perform the operation
     |  
     |  numBoundaries(...)
     |      numBoundaries(region) -> unsigned int
     |      
     |      Returns the number of boundaries for the specified region. The
     |      surface must be a trimmed surface.
     |      
     |      For each region there may be several boundary curves, an outer curve
     |      and possibly several inner boundary curves which define holes. These
     |      boundary curves are made up of one or more curves called edges.
     |      
     |      * region (int) - Region of interest.
     |  
     |  numEdges(...)
     |      numEdges(region, boundary) -> unsigned int
     |      
     |      Returns the number of edges for the specified trim boundary.
     |      For each region there may be several boundary curves, an outer curve
     |      and possibly several inner boundary curves which define holes. These
     |      boundary curves are made up of one or more curves called edges.
     |      
     |      * region   (int) - Region of interest.
     |      * boundary (int) - Boundary of interest
     |  
     |  projectCurve(...)
     |      projectCurve(curve[, direction], keepHistory=False) -> self
     |      
     |      Projects the given curve onto the surface, creating a curve on surface.
     |      
     |      * direction (MVector) - Direction of projection. If not supplied
     |                              then surface normals will be used.
     |      * keepHistory  (bool) - Determines whether the construction history
     |                              of the projection should be retained.
     |  
     |  removeKnotInU(...)
     |      removeKnotInU(param, removeAll=False) -> self
     |      
     |      Removes one or more U knots at the specified parameter value from
     |      from the surface.
     |      
     |      * param    (float) - U parameter value of the knot to remove.
     |      * removeAll (bool) - If True and there are multiple knots at the
     |                           parameter value then they will all be removed.
     |                           Otherwise, all but one will be removed.
     |  
     |  removeKnotInV(...)
     |      removeKnotInV(param, removeAll=False) -> self
     |      
     |      Removes one or more V knots at the specified parameter value from
     |      from the surface.
     |      
     |      * param    (float) - V parameter value of the knot to remove.
     |      * removeAll (bool) - If True and there are multiple knots at the
     |                           parameter value then they will all be removed.
     |                           Otherwise, all but one will be removed.
     |  
     |  removeOneKnotInU(...)
     |      removeOneKnotInU(param) -> self
     |      
     |      Removes one U knot at the specified parameter value. If there are
     |      multiple knots at that the value the others are retained.
     |      
     |      * param (float) - U parameter value of the knot to remove.
     |  
     |  removeOneKnotInV(...)
     |      removeOneKnotInV(param) -> self
     |      
     |      Removes one V knot at the specified parameter value. If there are
     |      multiple knots at that the value the others are retained.
     |      
     |      * param (float) - V parameter value of the knot to remove.
     |  
     |  setCVPosition(...)
     |      setCVPosition(uIndex, vIndex, point, space=kObject) -> self
     |  
     |  setCVPositions(...)
     |      setCVPositions(points, space=kObject) -> self
     |      
     |      Set the positions of all of the surface's CVs.
     |      (numCVsInU * numCVsInV) points must be provided. Converting from
     |      U and V indices to array indices is done by:
     |      
     |              array index = numCVsInV * U index + V index
     |      
     |      To keep this method as fast as possible, no checking of the data is
     |      performed beyond ensuring that the total number of CVs passed in is
     |      correct. It is up to the caller to ensure that the CVs provide a
     |      valid surface, for example by ensuring that overlapping CVs in
     |      periodic surfaces have the same positions.
     |      
     |      * points (MPointArray or seq of MPoint)
     |                     - Positions of the CVs.
     |      * space  (int) - An MSpace constant giving the coordinate space
     |                       in which to perform the operation
     |  
     |  setKnotInU(...)
     |      setKnotInU(index, param) -> self
     |      
     |      Sets the value of an existing U knot. U knots are indexed from 0 to
     |      numKnotsInU-1. Note that this method does not insert a new knot, it
     |      simply changes the value of an existing knot.
     |      
     |      If a knot value is set that breaks the non-decreasing requirement
     |      for the knot array, the knot value will be changed and an exception
     |      raised.
     |      
     |      * index   (int) - U index of the knot to set.
     |      * param (float) - New parameter value for the knot.
     |  
     |  setKnotInV(...)
     |      setKnotInV(index, param) -> self
     |      
     |      Sets the value of an existing V knot. V knots are indexed from 0 to
     |      numKnotsInV-1. Note that this method does not insert a new knot, it
     |      simply changes the value of an existing knot.
     |      
     |      If a knot value is set that breaks the non-decreasing requirement
     |      for the knot array, the knot value will be changed and an exception
     |      raised.
     |      
     |      * index   (int) - V index of the knot to set.
     |      * param (float) - New parameter value for the knot.
     |  
     |  setKnotsInU(...)
     |      setKnotsInU(params, startIndex, endIndex) -> self
     |      
     |      Sets the values of a range of U knots.
     |      
     |      * params     (MDoubleArray or seq of float)
     |                         - Parameter values to set at the knots. One value
     |                           per knot in the range.
     |      * startIndex (int) - Index of the first U knot to set.
     |      * endIndex   (int) - Index of the last U knot to set.
     |  
     |  setKnotsInV(...)
     |      setKnotsInV(params, startIndex, endIndex) -> self
     |      
     |      Sets the values of a range of V knots.
     |      
     |      * params     (MDoubleArray or seq of float)
     |                         - Parameter values to set at the knots. One value
     |                           per knot in the range.
     |      * startIndex (int) - Index of the first V knot to set.
     |      * endIndex   (int) - Index of the last V knot to set.
     |  
     |  setUV(...)
     |      setUV(uvId, u, v) -> self
     |      
     |      Sets a single texture coordinate. If 'uvId' is greater than or equal
     |      to numUVs then the surface's uv list will be grown to accommodate it.
     |      
     |      Note that API methods that modify uv data work correctly either when
     |      called through a plug-in node that is in the history of the shape,
     |      or when used on a surface shape that does not have history.
     |      Modifying uvs directly on a shape with history will result in the
     |      modifications getting over-written by the next evaluation of the
     |      history attached to the shape.
     |      
     |      * uvId (int) - Index of the element in the surface's uv list to set.
     |      * u  (float) - U value to set the uv to.
     |      * v  (float) - V value to set the uv to.
     |  
     |  setUVs(...)
     |      setUVs(uList, vList) -> self
     |      
     |      Sets all of the texture coordinates (uvs) for this surface. The 
     |      arrays must be of equal length and must be at least of length numUVs.
     |      If the arrays are larger than numUVs then the uv list for this surface
     |      will be grown to accommodate the new uv values.
     |      
     |      After using this method to set the UV values, you can call
     |      assignUVs to assign the corresponding UVids to the geometry.
     |      
     |      Note that API methods that modify uv data work correctly either when
     |      called through a plug-in node that is in the history of the shape,
     |      or when used on a surface shape that does not have history.
     |      Modifying uvs directly on a shape with history will result in the
     |      modifications getting over-written by the next evaluation of the
     |      history attached to the shape.
     |      
     |      * uList (MFloatArray or seq of float) - U values to set
     |      * vList (MFloatArray or seq of float) - V values to set
     |  
     |  tangents(...)
     |      tangents(uParam, vParam, space=kObject) -> (MVector, MVector)
     |      
     |      Returns the tangents in the U and V directions at a given parameter
     |      value on the surface. The returned tangent vectors are normalized.
     |      
     |      This method does not fail if the given parameter lies within a
     |      trimmed away region of a trimmed surface. Use isPointInTrimmedRegion()
     |      to determine if the uv point lies within such a region.
     |      
     |      * uParam (float) - U parameter value at which to obtain the tangents.
     |      * vParam (float) - V parameter value at which to obtain the tangents.
     |      * space    (int) - An MSpace constant giving the coordinate space
     |                         in which to perform the operation
     |  
     |  trim(...)
     |      trim(regionsToKeepU, regionsToKeepV, keepHistory=False) -> self
     |      
     |      Trims the surface to its curves on surface. Regions which are kept
     |      are specified by passing in arrays of u,v parameters.
     |      
     |      This method will create a new trimmed surface in the DAG. The surface
     |      attached to this function set will remain unchanged.
     |      
     |      * regionsToKeepU (MDoubleArray or seq of float)
     |                              - U parameters of points within the regions
     |                                to be kept.
     |      * regionsToKeepV (MDoubleArray or seq of float)
     |                              - V parameters of points within the regions
     |                                to be kept.
     |      * keepHistory    (bool) - Determines whether the construction history
     |                                of the operation should be retained.
     |  
     |  updateSurface(...)
     |      updateSurface() -> self
     |      
     |      Signals that this surface has changed and needs to be recalculated.
     |      
     |      This method is useful when a large number of CVs for the surface are
     |      being modified. Instead of updating the surface every time a CV is
     |      changed it is more efficient to call this method once after all the
     |      updates are complete.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  dataObject
     |      If the functionset was created using an MFn.kNurbsSurfaceData object
     |      then this attribute will contain an MObject which references that
     |      data object. Otherwise it will contain MObject.kNullObj.
     |  
     |  degreeInU
     |      The degree of the surface in the U direction or 0 if the degree
     |      cannot be determined.
     |  
     |  degreeInV
     |      The degree of the surface in the V direction or 0 if the degree
     |      cannot be determined.
     |  
     |  formInU
     |      Form of the surface in the U direction. Can be one of kOpen,
     |      kClosed, kPeriodic or kInvalid.
     |  
     |  formInV
     |      Form of the surface in the V direction. Can be one of kOpen,
     |      kClosed, kPeriodic or kInvalid.
     |  
     |  hasHistoryOnCreate
     |      True if the surface was created with history.
     |  
     |  isBezier
     |      True if the knot spacing gives a Bezier surface.
     |  
     |  isFoldedOnBispan
     |      True if surface contains are any folds or creases on bispan
     |      boundaries, including trimmed regions.
     |  
     |  isTrimmedSurface
     |      True if the surface is a trimmed surface.
     |  
     |  isUniform
     |      True if the knot spacing is uniform.
     |  
     |  knotDomainInU
     |      A tuple containing a pair of floats corresponding to the maximum and
     |      minimum U parameter values for this surface.
     |  
     |  knotDomainInV
     |      A tuple containing a pair of floats corresponding to the maximum and
     |      minimum V parameter values for this surface.
     |  
     |  numCVsInU
     |      Number of CVs in the surface in the U direction or 0 if the number
     |      of CVs cannot be determined.
     |  
     |  numCVsInV
     |      Number of CVs in the surface in the V direction or 0 if the number
     |      of CVs cannot be determined.
     |  
     |  numKnotsInU
     |      Number of knots in the surface in the U direction or 0 if the number
     |      of knots cannot be determined.
     |  
     |  numKnotsInV
     |      Number of knots in the surface in the V direction or 0 if the number
     |      of knots cannot be determined.
     |  
     |  numNonZeroSpansInU
     |      Number of spans in the U direction which are non-zero (i.e. their
     |      max param value is greater than their min param value).
     |  
     |  numNonZeroSpansInV
     |      Number of spans in the V direction which are non-zero (i.e. their
     |      max param value is greater than their min param value).
     |  
     |  numPatches
     |      Number of non-zero patches on the surface.
     |  
     |  numPatchesInU
     |      Number of non-zero patches in the U direction.
     |  
     |  numPatchesInV
     |      Number of non-zero patches in the V direction.
     |  
     |  numRegions
     |      Number of trimmed regions for this surface or 0 if the surface is
     |      not a trimmed surface.
     |  
     |  numSpansInU
     |      Number of spans in the U direction, including zero-length spans.
     |  
     |  numSpansInV
     |      Number of spans in the V direction, including zero-length spans.
     |  
     |  numUVs
     |      Number of texture (uv) coordinates for this surface. The uvs are
     |      stored in a list which is referenced by patches requiring textures
     |      on a per-patch per-patchCorner basis. This attribute contains the
     |      number of elements in this list.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kClosed = 2
     |  
     |  kClosedSegment = 4
     |  
     |  kInner = 2
     |  
     |  kInvalid = 0
     |  
     |  kInvalidBoundary = 0
     |  
     |  kLast = 4
     |  
     |  kOpen = 1
     |  
     |  kOuter = 1
     |  
     |  kPeriodic = 3
     |  
     |  kPointTolerance = 0.001
     |  
     |  kSegment = 3
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDagNode:
     |  
     |  addChild(...)
     |      addChild(node, index=kNextPos, keepExistingParents=False) -> self
     |      
     |      Makes a node a child of this one.
     |  
     |  child(...)
     |      child(index) -> MObject
     |      
     |      Returns the specified child of this node.
     |  
     |  childCount(...)
     |      childCount() -> int
     |      
     |      Returns the number of nodes which are children of this one.
     |  
     |  dagPath(...)
     |      dagPath() -> MDagPath
     |      
     |      Returns the DAG path to which this function set is attached. Raises a TypeError if the function set is attached to an MObject rather than a path.
     |  
     |  dagRoot(...)
     |      dagRoot() -> MObject
     |      
     |      Returns the root node of the first path leading to this node.
     |  
     |  duplicate(...)
     |      duplicate(instance=False, instanceLeaf=False) -> MObject
     |      
     |      Duplicates the DAG hierarchy rooted at the current node.
     |  
     |  fullPathName(...)
     |      fullPathName() -> string
     |      
     |      Returns the full path of the attached object, from the root of the DAG on down.
     |  
     |  getAllPaths(...)
     |      getAllPaths() -> MDagPathArray
     |      
     |      Returns all of the DAG paths which lead to the object to which this function set is attached.
     |  
     |  getConnectedSetsAndMembers(...)
     |      getConnectedSetsAndMembers(instance, renderableSetsOnly) -> (MObjectArray, MObjectArray)
     |      
     |      Returns a tuple containing an array of sets and an array of the
     |      components of the DAG object which are in those sets. If the entire object is in a set, then the corresponding entry in the comps array will have no elements in it.
     |  
     |  getPath(...)
     |      getPath() -> MDagPath
     |      
     |      Returns the DAG path to which this function set is attached, or the first path to the node if the function set is attached to an MObject.
     |  
     |  hasChild(...)
     |      hasChild(node) -> bool
     |      
     |      Returns True if the specified node is a child of this one.
     |  
     |  hasParent(...)
     |      hasParent(node) -> bool
     |      
     |      Returns True if the specified node is a parent of this one.
     |  
     |  instanceCount(...)
     |      instanceCount(indirect) -> int
     |      
     |      Returns the number of instances for this node.
     |  
     |  isChildOf(...)
     |      isChildOf(node) -> bool
     |      
     |      Returns True if the specified node is a parent of this one.
     |  
     |  isInstanced(...)
     |      isInstanced(indirect=True) -> bool
     |      
     |      Returns True if this node is instanced.
     |  
     |  isInstancedAttribute(...)
     |      isInstancedAttribute(attr) -> bool
     |      
     |      Returns True if the specified attribute is an instanced attribute of this node.
     |  
     |  isParentOf(...)
     |      isParentOf(node) -> bool
     |      
     |      Returns True if the specified node is a child of this one.
     |  
     |  parent(...)
     |      parent(index) -> MObject
     |      
     |      Returns the specified parent of this node.
     |  
     |  parentCount(...)
     |      parentCount() -> int
     |      
     |      Returns the number of parents this node has.
     |  
     |  partialPathName(...)
     |      partialPathName() -> string
     |      
     |      Returns the minimum path string necessary to uniquely identify the attached object.
     |  
     |  removeChild(...)
     |      removeChild(node) -> self
     |      
     |      Removes the child, specified by MObject, reparenting it under the world.
     |  
     |  removeChildAt(...)
     |      removeChildAt(index) -> self
     |      
     |      Removes the child, specified by index, reparenting it under the world.
     |  
     |  setObject(...)
     |      setObject(MObject or MDagPath) -> self
     |      
     |      Attaches the function set to the specified node or DAG path.
     |  
     |  transformationMatrix(...)
     |      transformationMatrix() -> MMatrix
     |      
     |      Returns the object space transformation matrix for this DAG node.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDagNode:
     |  
     |  boundingBox
     |      Node's bounding box, in object space.
     |  
     |  inModel
     |      True if the node has been added to the model.
     |  
     |  inUnderWorld
     |      True if this node is in the underworld of another node (e.g. a curve on surface is in the underworld of the surface).
     |  
     |  isInstanceable
     |      True if instancing is allowed for this node.
     |  
     |  isIntermediateObject
     |      True if this node is just an intermediate in part of a larger calculation (e.g. input to a deformer).
     |  
     |  objectColor
     |      Index from 0 to 7 indicating the color in which the node is to be drawn when inactive, assuming that it is drawable.
     |  
     |  objectColorRGB
     |      RGB value indicating the color in which the node is to be drawn when inactive, assuming that it is drawable.
     |  
     |  objectColorType
     |      Determines whether the default color, indexed object color, orRGB object color is used for this object.
     |  
     |  useObjectColor
     |      If True then the node will be drawn using its 'objectColor', otherwise it will be drawn using Maya's default color. Thismethod is deprecated, use objectColorType instead.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDagNode:
     |  
     |  kNextPos = 255
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDependencyNode:
     |  
     |  absoluteName(...)
     |      Returns the absolute name of this node.  The absolute name of a node is the full namespace path starting at (and including) the root namespace, down to (and including) the node itself.  Regardless of relative name mode, absoluteName() will always return a full namespace path prefixed with a leading colon (the root namespace).
     |  
     |  addAttribute(...)
     |      Adds a new dynamic attribute to the node.
     |  
     |  addExternalContentForFileAttr(...)
     |      Adds content info to the specified table from a file path attribute.
     |  
     |  affectsAnimation(...)
     |      Returns true if the changes to the node may affect animation.
     |  
     |  attribute(...)
     |      Returns an attribute of the node, given either its index or name.
     |  
     |  attributeClass(...)
     |      Returns the class of the specified attribute.
     |  
     |  attributeCount(...)
     |      Returns the number of attributes on the node.
     |  
     |  canBeWritten(...)
     |      Returns true if the node will be written to file.
     |  
     |  dgCallbackIds(...)
     |      Returns DG timing information for a specific callback type, broken down by callbackId.
     |  
     |  dgCallbacks(...)
     |      Returns DG timing information broken down by callback type.
     |  
     |  dgTimer(...)
     |      Returns a specific DG timer metric for a given timer type.
     |  
     |  dgTimerOff(...)
     |      Turns DG timing off for this node.
     |  
     |  dgTimerOn(...)
     |      Turns DG timing on for this node.
     |  
     |  dgTimerQueryState(...)
     |      Returns the current DG timer state for this node.
     |  
     |  dgTimerReset(...)
     |      Resets all DG timers for this node.
     |  
     |  findAlias(...)
     |      Returns the attribute which has the given alias.
     |  
     |  findPlug(...)
     |      Returns a plug for the given attribute.
     |  
     |  getAffectedAttributes(...)
     |      Returns all of the attributes which are affected by the specified attribute.
     |  
     |  getAffectingAttributes(...)
     |      Returns all of the attributes which affect the specified attribute.
     |  
     |  getAliasAttr(...)
     |      Returns the node's alias attribute, which is a special attribute used to store information about the node's attribute aliases.
     |  
     |  getAliasList(...)
     |      Returns all of the node's attribute aliases.
     |  
     |  getConnections(...)
     |      Returns all the plugs which are connected to attributes of this node.
     |  
     |  getExternalContent(...)
     |      Gets the external content (files) that this node depends on.
     |  
     |  hasAttribute(...)
     |      Returns True if the node has an attribute with the given name.
     |  
     |  hasUniqueName(...)
     |      Returns True if the node's name is unique.
     |  
     |  isFlagSet(...)
     |      Returns the state of the specified node flag.
     |  
     |  isNewAttribute(...)
     |      Returns True if the specified attribute was added in the current scene, and not by by one of its referenced files.
     |  
     |  isTrackingEdits(...)
     |      Returns True if the node is referenced or in an assembly that is tracking edits.
     |  
     |  name(...)
     |      Returns the node's name.
     |  
     |  plugsAlias(...)
     |      Returns the alias for a plug's attribute.
     |  
     |  removeAttribute(...)
     |      Removes a dynamic attribute from the node.
     |  
     |  reorderedAttribute(...)
     |      Returns one of the node's attribute, based on the order in which they are written to file.
     |  
     |  setAffectsAnimation(...)
     |      Specifies that modifications to a node could potentially affect the animation.
     |  
     |  setAlias(...)
     |      Adds or removes an attribute alias.
     |  
     |  setDoNotWrite(...)
     |      Used to prevent the node from being written to file.
     |  
     |  setExternalContent(...)
     |      Changes the location of external content.
     |  
     |  setExternalContentForFileAttr(...)
     |      Sets content info in the specified attribute from the table.
     |  
     |  setFlag(...)
     |      Sets the state of the specified node flag.
     |  
     |  setName(...)
     |      Sets the node's name.
     |  
     |  setUuid(...)
     |      Sets the node's UUID.
     |  
     |  userNode(...)
     |      Returns the MPxNode object for a plugin node.
     |  
     |  uuid(...)
     |      Returns the node's UUID.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MFnDependencyNode:
     |  
     |  allocateFlag(...)
     |      Allocates a flag on all nodes for use by the named plugin and returns the flag's index.
     |  
     |  classification(...)
     |      Returns the classification string for the named node type.
     |  
     |  deallocateAllFlags(...)
     |      Deallocates all node flags which are currently allocated to the named plugin.
     |  
     |  deallocateFlag(...)
     |      Deallocates the specified node flag, which was previously allocated by the named plugin using allocateFlag().
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDependencyNode:
     |  
     |  isDefaultNode
     |      True if this is a default node, created automatically by Maya.
     |  
     |  isFromReferencedFile
     |      True if the node is from a referenced file, False if the node is part of the main scene.
     |  
     |  isLocked
     |      True if the node is locked against changes.
     |  
     |  isShared
     |      True if the node is shared.
     |  
     |  namespace
     |      Name of the namespace which contains the node.
     |  
     |  pluginName
     |      Name of the plugin which registered the node type, if any.
     |  
     |  typeId
     |      MTypeId for the node's type.
     |  
     |  typeName
     |      Name of the node's type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDependencyNode:
     |  
     |  kExtensionAttr = 3
     |  
     |  kInvalidAttr = 4
     |  
     |  kLocalDynamicAttr = 1
     |  
     |  kNormalAttr = 2
     |  
     |  kTimerInvalidState = 3
     |  
     |  kTimerMetric_callback = 0
     |  
     |  kTimerMetric_callbackNotViaAPI = 6
     |  
     |  kTimerMetric_callbackViaAPI = 5
     |  
     |  kTimerMetric_compute = 1
     |  
     |  kTimerMetric_computeDuringCallback = 7
     |  
     |  kTimerMetric_computeNotDuringCallback = 8
     |  
     |  kTimerMetric_dirty = 2
     |  
     |  kTimerMetric_draw = 3
     |  
     |  kTimerMetric_fetch = 4
     |  
     |  kTimerMetrics = 9
     |  
     |  kTimerOff = 0
     |  
     |  kTimerOn = 1
     |  
     |  kTimerType_count = 2
     |  
     |  kTimerType_inclusive = 1
     |  
     |  kTimerType_self = 0
     |  
     |  kTimerTypes = 3
     |  
     |  kTimerUninitialized = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnNurbsSurfaceData(MFnGeometryData)
     |  MFnNurbsSurfaceData allows the creation and manipulation of Nurbs Surface
     |  data objects for use in the dependency graph.
     |  
     |  __init__()
     |  Initializes a new, empty MFnNurbsSurfaceData object
     |  
     |  __init__(MObject)
     |  Initializes a new MFnNurbsSurfaceData function set, attached
     |  to the specified object.
     |  
     |  Method resolution order:
     |      MFnNurbsSurfaceData
     |      MFnGeometryData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  create(...)
     |      create() -> MObject
     |      
     |      Creates a new nurbs surface data object, attaches it to this function set
     |      and returns an MObject which references it.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnGeometryData:
     |  
     |  addObjectGroup(...)
     |      addObjectGroup(id) -> self
     |      
     |      Adds an object group with the given id to the object.
     |  
     |  addObjectGroupComponent(...)
     |      addObjectGroupComponent(id, MObject component) -> self
     |      
     |      Adds the members of the given component to the object group
     |      with the given id.
     |  
     |  changeObjectGroupId(...)
     |      changeObjectGroupId(sourceId, destId) -> self
     |      
     |      Changes the id of the object group with the given id to the new id.
     |  
     |  copyObjectGroups(...)
     |      copyObjectGroups(MObject inGeom) -> self
     |      
     |      Copies the object groups from the given geometry data object.
     |  
     |  hasObjectGroup(...)
     |      hasObjectGroup(id) -> self
     |      
     |      Returns True if an object group with the given id is
     |      contained in the data.
     |  
     |  objectGroup(...)
     |      objectGroup(index) -> int
     |      
     |      Returns the id of the index'th object group contained by the object.
     |  
     |  objectGroupComponent(...)
     |      objectGroupComponent(id) -> MObject
     |      
     |      Returns a component which contains the members of the object group
     |      with the given id.
     |  
     |  objectGroupType(...)
     |      objectGroupType(id) -> MFn Type constant
     |      
     |      Returns the type of the component that the object group with the
     |      given id contains.
     |  
     |  removeObjectGroup(...)
     |      removeObjectGroup(id) -> self
     |      
     |      Removes an object group with the given id from the object.
     |  
     |  removeObjectGroupComponent(...)
     |      removeObjectGroupComponent(id, MObject component) -> self
     |      
     |      Removes the members of the given component from the object group
     |      with the given id.
     |  
     |  setObjectGroupComponent(...)
     |      setObjectGroupComponent(id, MObject component) -> self
     |      
     |      Sets the members of the object group with the given id
     |      to be only those in the given component.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnGeometryData:
     |  
     |  isIdentity
     |      True if the matrix for the geometry is the identity.
     |  
     |  isNotIdentity
     |      True if the matrix for the geometry is not the identity.
     |  
     |  matrix
     |      MMatrix used to convert the object into local space.
     |  
     |  objectGroupCount
     |      The number of object groups contained by the object.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnPlugin(MFnBase)
     |  Register and deregister plug-in services with Maya.
     |  
     |  Method resolution order:
     |      MFnPlugin
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  apiVersion(...)
     |      Return the API version required by the plug-in.
     |  
     |  deregisterAttributePatternFactory(...)
     |      Deregister a user defined attribute pattern factory type from Maya.
     |  
     |  deregisterCommand(...)
     |      Deregister a user defined command from Maya.
     |  
     |  deregisterData(...)
     |      Deregister a user defined data type from Maya.
     |  
     |  deregisterDragAndDropBehavior(...)
     |      Deregister a user defined drag and drop behavior from Maya.
     |  
     |  deregisterNode(...)
     |      Deregister a user defined dependency node from Maya.
     |  
     |  loadPath(...)
     |      Return the full path name of the file from which the plug-in was loaded.
     |  
     |  name(...)
     |      Return the plug-in's name.
     |  
     |  registerAttributePatternFactory(...)
     |      Register a new attribute pattern factory type with Maya.
     |  
     |  registerCommand(...)
     |      Register a new command with Maya.
     |  
     |  registerData(...)
     |      Register a new data type with Maya.
     |  
     |  registerDragAndDropBehavior(...)
     |      Register a new drag and drop behavior with Maya.
     |      Once registered, the new behavior can be used to finish connections between node drag and drops from the hyperGraph/hyperShade to other nodes or Maya UI.
     |  
     |  registerNode(...)
     |      Register a new dependency node with Maya.
     |  
     |  registerShape(...)
     |      Register a new user defined shape node with Maya.
     |      To deregister the shape node use the MFnPlugin.deregisterNode().
     |  
     |  setName(...)
     |      Set the plug-in's name.
     |  
     |  vendor(...)
     |      Return the plug-in's vendor string.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  version
     |      Plug-in version string.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnPluginData(MFnData)
     |  MFnPluginData allows the creation and manipulation of plugin
     |  data objects for use in the dependency graph.
     |  
     |  __init__()
     |  Initializes a new, empty MFnPluginData object
     |  
     |  __init__(MObject)
     |  Initializes a new MFnPluginData function set, attached
     |  to the specified object.
     |  
     |  Method resolution order:
     |      MFnPluginData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  create(...)
     |      create(id) -> MObject
     |      
     |      Create an instance of the specified user defined data type and attach it to this functionset.
     |      
     |      * id (MTypeId) - the unique MTypeId of the user defined data class derived from MPxData.
     |  
     |  data(...)
     |      data() -> MPxData
     |      
     |      Return the user defined data held in this instance
     |  
     |  typeId(...)
     |      typeId() -> MTypeId
     |      
     |      Return the unique MTypeId of the user defined data that is held by this instance
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnPointArrayData(MFnData)
     |  Function set for node data consisting of an array of MPoints.
     |  
     |  Method resolution order:
     |      MFnPointArrayData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  array(...)
     |      Returns the encapsulated array as an MPointArray.
     |  
     |  copyTo(...)
     |      Replaces the elements of an array with those in the encapsulated array.
     |  
     |  create(...)
     |      Creates a new MPoint array data object.
     |  
     |  set(...)
     |      Sets values in the encapsulated array.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnReference(MFnDependencyNode)
     |  Function set for reference nodes.
     |  
     |  Method resolution order:
     |      MFnReference
     |      MFnDependencyNode
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  associatedNamespace(...)
     |      associatedNamespace(bool shortName) -> MString
     |      
     |      Returns the namespace associated with this reference.
     |  
     |  containsNode(...)
     |      containsNode(MObject) -> bool
     |      
     |      Returns true if the specified node is from this reference or one of its child references. The containsNodeExactly method can be used to test membership without including the child references.
     |  
     |  containsNodeExactly(...)
     |      containsNodeExactly(MObject) -> bool
     |      
     |      Returns true if the specified node is from this reference. Membership in child references is not checked. The containsNode method may be used to test membership in a reference and its child references.
     |  
     |  fileName(...)
     |      fileName(bool resolvedName, bool includePath, bool includeCopyNumber) -> MString
     |      
     |      Returns the name of file associated with this reference.
     |  
     |  isExportEditsFile(...)
     |      isExportEditsFile() -> bool
     |      
     |      Returns true if the reference is an export edits file. An export edits file is a file of type '.editMA' or '.editMB' which was created using Maya's offline file functionality.
     |  
     |  isLoaded(...)
     |      isLoaded() -> bool
     |      
     |      Returns true if the reference is loaded.
     |  
     |  isLocked(...)
     |      isLocked() -> bool
     |      
     |      Returns true if the reference is locked or if the referenced file was saved as locked.
     |  
     |  nodes(...)
     |      nodes() -> MObjectArray
     |      
     |      Returns an array of the nodes associated with this reference.
     |  
     |  parentAssembly(...)
     |      parentAssembly() -> MObject
     |      
     |      Returns the parent assembly node that contains this reference. See MFnAssembly documentation for more details.
     |  
     |  parentFileName(...)
     |      parentFileName(bool resolvedName, bool includePath, bool includeCopyNumber) -> MString
     |      
     |      Returns the name of parent file associated with this reference.
     |  
     |  parentReference(...)
     |      parentReference() -> MObject
     |      
     |      Returns the reference node associated with the parent reference.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ignoreReferenceEdits(...)
     |      ignoreReferenceEdits() -> bool
     |      
     |      Indicates whether reference edits will be tracked and logged or not.
     |  
     |  setIgnoreReferenceEdits(...)
     |      setIgnoreReferenceEdits(bool) -> None
     |      
     |      Specify whether reference edits should be tracked and logged or not.
     |      This should be treated as a temporary state and should be enabled 
     |      around a batch of operations where reference edits should be ignored.
     |      Restore the previous value when the batch of operations is complete.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDependencyNode:
     |  
     |  absoluteName(...)
     |      Returns the absolute name of this node.  The absolute name of a node is the full namespace path starting at (and including) the root namespace, down to (and including) the node itself.  Regardless of relative name mode, absoluteName() will always return a full namespace path prefixed with a leading colon (the root namespace).
     |  
     |  addAttribute(...)
     |      Adds a new dynamic attribute to the node.
     |  
     |  addExternalContentForFileAttr(...)
     |      Adds content info to the specified table from a file path attribute.
     |  
     |  affectsAnimation(...)
     |      Returns true if the changes to the node may affect animation.
     |  
     |  attribute(...)
     |      Returns an attribute of the node, given either its index or name.
     |  
     |  attributeClass(...)
     |      Returns the class of the specified attribute.
     |  
     |  attributeCount(...)
     |      Returns the number of attributes on the node.
     |  
     |  canBeWritten(...)
     |      Returns true if the node will be written to file.
     |  
     |  create(...)
     |      Creates a new node of the given type.
     |  
     |  dgCallbackIds(...)
     |      Returns DG timing information for a specific callback type, broken down by callbackId.
     |  
     |  dgCallbacks(...)
     |      Returns DG timing information broken down by callback type.
     |  
     |  dgTimer(...)
     |      Returns a specific DG timer metric for a given timer type.
     |  
     |  dgTimerOff(...)
     |      Turns DG timing off for this node.
     |  
     |  dgTimerOn(...)
     |      Turns DG timing on for this node.
     |  
     |  dgTimerQueryState(...)
     |      Returns the current DG timer state for this node.
     |  
     |  dgTimerReset(...)
     |      Resets all DG timers for this node.
     |  
     |  findAlias(...)
     |      Returns the attribute which has the given alias.
     |  
     |  findPlug(...)
     |      Returns a plug for the given attribute.
     |  
     |  getAffectedAttributes(...)
     |      Returns all of the attributes which are affected by the specified attribute.
     |  
     |  getAffectingAttributes(...)
     |      Returns all of the attributes which affect the specified attribute.
     |  
     |  getAliasAttr(...)
     |      Returns the node's alias attribute, which is a special attribute used to store information about the node's attribute aliases.
     |  
     |  getAliasList(...)
     |      Returns all of the node's attribute aliases.
     |  
     |  getConnections(...)
     |      Returns all the plugs which are connected to attributes of this node.
     |  
     |  getExternalContent(...)
     |      Gets the external content (files) that this node depends on.
     |  
     |  hasAttribute(...)
     |      Returns True if the node has an attribute with the given name.
     |  
     |  hasUniqueName(...)
     |      Returns True if the node's name is unique.
     |  
     |  isFlagSet(...)
     |      Returns the state of the specified node flag.
     |  
     |  isNewAttribute(...)
     |      Returns True if the specified attribute was added in the current scene, and not by by one of its referenced files.
     |  
     |  isTrackingEdits(...)
     |      Returns True if the node is referenced or in an assembly that is tracking edits.
     |  
     |  name(...)
     |      Returns the node's name.
     |  
     |  plugsAlias(...)
     |      Returns the alias for a plug's attribute.
     |  
     |  removeAttribute(...)
     |      Removes a dynamic attribute from the node.
     |  
     |  reorderedAttribute(...)
     |      Returns one of the node's attribute, based on the order in which they are written to file.
     |  
     |  setAffectsAnimation(...)
     |      Specifies that modifications to a node could potentially affect the animation.
     |  
     |  setAlias(...)
     |      Adds or removes an attribute alias.
     |  
     |  setDoNotWrite(...)
     |      Used to prevent the node from being written to file.
     |  
     |  setExternalContent(...)
     |      Changes the location of external content.
     |  
     |  setExternalContentForFileAttr(...)
     |      Sets content info in the specified attribute from the table.
     |  
     |  setFlag(...)
     |      Sets the state of the specified node flag.
     |  
     |  setName(...)
     |      Sets the node's name.
     |  
     |  setUuid(...)
     |      Sets the node's UUID.
     |  
     |  userNode(...)
     |      Returns the MPxNode object for a plugin node.
     |  
     |  uuid(...)
     |      Returns the node's UUID.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MFnDependencyNode:
     |  
     |  allocateFlag(...)
     |      Allocates a flag on all nodes for use by the named plugin and returns the flag's index.
     |  
     |  classification(...)
     |      Returns the classification string for the named node type.
     |  
     |  deallocateAllFlags(...)
     |      Deallocates all node flags which are currently allocated to the named plugin.
     |  
     |  deallocateFlag(...)
     |      Deallocates the specified node flag, which was previously allocated by the named plugin using allocateFlag().
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDependencyNode:
     |  
     |  isDefaultNode
     |      True if this is a default node, created automatically by Maya.
     |  
     |  isFromReferencedFile
     |      True if the node is from a referenced file, False if the node is part of the main scene.
     |  
     |  isShared
     |      True if the node is shared.
     |  
     |  namespace
     |      Name of the namespace which contains the node.
     |  
     |  pluginName
     |      Name of the plugin which registered the node type, if any.
     |  
     |  typeId
     |      MTypeId for the node's type.
     |  
     |  typeName
     |      Name of the node's type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDependencyNode:
     |  
     |  kExtensionAttr = 3
     |  
     |  kInvalidAttr = 4
     |  
     |  kLocalDynamicAttr = 1
     |  
     |  kNormalAttr = 2
     |  
     |  kTimerInvalidState = 3
     |  
     |  kTimerMetric_callback = 0
     |  
     |  kTimerMetric_callbackNotViaAPI = 6
     |  
     |  kTimerMetric_callbackViaAPI = 5
     |  
     |  kTimerMetric_compute = 1
     |  
     |  kTimerMetric_computeDuringCallback = 7
     |  
     |  kTimerMetric_computeNotDuringCallback = 8
     |  
     |  kTimerMetric_dirty = 2
     |  
     |  kTimerMetric_draw = 3
     |  
     |  kTimerMetric_fetch = 4
     |  
     |  kTimerMetrics = 9
     |  
     |  kTimerOff = 0
     |  
     |  kTimerOn = 1
     |  
     |  kTimerType_count = 2
     |  
     |  kTimerType_inclusive = 1
     |  
     |  kTimerType_self = 0
     |  
     |  kTimerTypes = 3
     |  
     |  kTimerUninitialized = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnSet(MFnDependencyNode)
     |  Function set for sets.
     |  
     |  Method resolution order:
     |      MFnSet
     |      MFnDependencyNode
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addMember(...)
     |      addMember( object ) -> self
     |      
     |      Add a new object to the set.
     |      
     |      The added object may be an MObject, an (MDagPath, MObject) tuple, or an MPlug.
     |  
     |  addMembers(...)
     |      addMembers( MSelectionList ) -> self
     |      
     |      Add a list of new objects to the set.
     |  
     |  annotation(...)
     |      annotation() -> string
     |      
     |      Returns the annotation string for this set.  This allows a description of the set to be stored with it.
     |  
     |  clear(...)
     |      clear() -> self
     |      
     |      Removes all elements from this set.
     |  
     |  create(...)
     |      create(members, restriction=kNone) -> MObject
     |      
     |      Creates a new set dependency node and puts it in the dependency graph.
     |      
     |      * members (MSelectionList) - list of members for new set
     |      * restriction (MFnSet.Restriction) - restriction applied to members
     |  
     |  getIntersection(...)
     |      getIntersection( otherSet ) -> MSelectionList
     |      
     |      This method calculates the intersection of two sets.  The result will be the intersection of this set and the set passed into the method.
     |      
     |      * otherSet (MObject or MObjectArray or list of sets) - set(s) to find union of with this set
     |  
     |  getMembers(...)
     |      getMembers( flatten ) -> MSelectionList
     |      
     |      Get the members of this set as a selection list.  This information is providedas a selection list so that all of the path information is retained forDAG nodes.
     |      
     |      It is possible to ask for the returned list to be flattened.  This means thatall sets that exist inside this set will be expanded into a list of theircontents.
     |      
     |      * flatten (bool) - whether to flatten the returned list
     |  
     |  getUnion(...)
     |      getUnion( otherSet ) -> MSelectionList
     |      
     |      This method calculates the union of two sets.  The result will be the union of this set and the set passed into the method.
     |      
     |      * otherSet (MObject or MObjectArray or list of sets) - set(s) to find union of with this set
     |  
     |  hasRestrictions(...)
     |      hasRestrictions() -> bool
     |      
     |      Returns true if this function set has restrictions on the type of objects that it may contain.
     |  
     |  intersectsWith(...)
     |      intersectsWith( otherSet ) -> self
     |      
     |      Returns true if this set intersects with the given set.  An intersection occurs if there are any common members between the two sets.
     |  
     |  isMember(...)
     |      isMember( object ) -> bool
     |      
     |      Returns true if the given object is a member of this set.
     |      
     |      The object may be an MObject, an (MDagPath, MObject) tuple, or an MPlug.
     |  
     |  removeMember(...)
     |      removeMember( object ) -> self
     |      
     |      Remove an object from the set.
     |      
     |      The removed object may be an MObject, an (MDagPath, MObject) tuple, or an MPlug.
     |  
     |  removeMembers(...)
     |      removeMembers( MSelectionList ) -> self
     |      
     |      Remove items of the selection list from the set.
     |  
     |  restriction(...)
     |      restriction() -> MFnSet.Restriction
     |      
     |      Returns the type of membership restriction that this set has.
     |  
     |  setAnnotation(...)
     |      setAnnotation( annotation ) -> self
     |      
     |      Sets the annotation string for this set.  This allows a description of the set to be stored with it.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kEdgesOnly = 2
     |  
     |  kEditPointsOnly = 4
     |  
     |  kFacetsOnly = 3
     |  
     |  kNone = 0
     |  
     |  kRenderableOnly = 5
     |  
     |  kVerticesOnly = 1
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDependencyNode:
     |  
     |  absoluteName(...)
     |      Returns the absolute name of this node.  The absolute name of a node is the full namespace path starting at (and including) the root namespace, down to (and including) the node itself.  Regardless of relative name mode, absoluteName() will always return a full namespace path prefixed with a leading colon (the root namespace).
     |  
     |  addAttribute(...)
     |      Adds a new dynamic attribute to the node.
     |  
     |  addExternalContentForFileAttr(...)
     |      Adds content info to the specified table from a file path attribute.
     |  
     |  affectsAnimation(...)
     |      Returns true if the changes to the node may affect animation.
     |  
     |  attribute(...)
     |      Returns an attribute of the node, given either its index or name.
     |  
     |  attributeClass(...)
     |      Returns the class of the specified attribute.
     |  
     |  attributeCount(...)
     |      Returns the number of attributes on the node.
     |  
     |  canBeWritten(...)
     |      Returns true if the node will be written to file.
     |  
     |  dgCallbackIds(...)
     |      Returns DG timing information for a specific callback type, broken down by callbackId.
     |  
     |  dgCallbacks(...)
     |      Returns DG timing information broken down by callback type.
     |  
     |  dgTimer(...)
     |      Returns a specific DG timer metric for a given timer type.
     |  
     |  dgTimerOff(...)
     |      Turns DG timing off for this node.
     |  
     |  dgTimerOn(...)
     |      Turns DG timing on for this node.
     |  
     |  dgTimerQueryState(...)
     |      Returns the current DG timer state for this node.
     |  
     |  dgTimerReset(...)
     |      Resets all DG timers for this node.
     |  
     |  findAlias(...)
     |      Returns the attribute which has the given alias.
     |  
     |  findPlug(...)
     |      Returns a plug for the given attribute.
     |  
     |  getAffectedAttributes(...)
     |      Returns all of the attributes which are affected by the specified attribute.
     |  
     |  getAffectingAttributes(...)
     |      Returns all of the attributes which affect the specified attribute.
     |  
     |  getAliasAttr(...)
     |      Returns the node's alias attribute, which is a special attribute used to store information about the node's attribute aliases.
     |  
     |  getAliasList(...)
     |      Returns all of the node's attribute aliases.
     |  
     |  getConnections(...)
     |      Returns all the plugs which are connected to attributes of this node.
     |  
     |  getExternalContent(...)
     |      Gets the external content (files) that this node depends on.
     |  
     |  hasAttribute(...)
     |      Returns True if the node has an attribute with the given name.
     |  
     |  hasUniqueName(...)
     |      Returns True if the node's name is unique.
     |  
     |  isFlagSet(...)
     |      Returns the state of the specified node flag.
     |  
     |  isNewAttribute(...)
     |      Returns True if the specified attribute was added in the current scene, and not by by one of its referenced files.
     |  
     |  isTrackingEdits(...)
     |      Returns True if the node is referenced or in an assembly that is tracking edits.
     |  
     |  name(...)
     |      Returns the node's name.
     |  
     |  plugsAlias(...)
     |      Returns the alias for a plug's attribute.
     |  
     |  removeAttribute(...)
     |      Removes a dynamic attribute from the node.
     |  
     |  reorderedAttribute(...)
     |      Returns one of the node's attribute, based on the order in which they are written to file.
     |  
     |  setAffectsAnimation(...)
     |      Specifies that modifications to a node could potentially affect the animation.
     |  
     |  setAlias(...)
     |      Adds or removes an attribute alias.
     |  
     |  setDoNotWrite(...)
     |      Used to prevent the node from being written to file.
     |  
     |  setExternalContent(...)
     |      Changes the location of external content.
     |  
     |  setExternalContentForFileAttr(...)
     |      Sets content info in the specified attribute from the table.
     |  
     |  setFlag(...)
     |      Sets the state of the specified node flag.
     |  
     |  setName(...)
     |      Sets the node's name.
     |  
     |  setUuid(...)
     |      Sets the node's UUID.
     |  
     |  userNode(...)
     |      Returns the MPxNode object for a plugin node.
     |  
     |  uuid(...)
     |      Returns the node's UUID.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MFnDependencyNode:
     |  
     |  allocateFlag(...)
     |      Allocates a flag on all nodes for use by the named plugin and returns the flag's index.
     |  
     |  classification(...)
     |      Returns the classification string for the named node type.
     |  
     |  deallocateAllFlags(...)
     |      Deallocates all node flags which are currently allocated to the named plugin.
     |  
     |  deallocateFlag(...)
     |      Deallocates the specified node flag, which was previously allocated by the named plugin using allocateFlag().
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDependencyNode:
     |  
     |  isDefaultNode
     |      True if this is a default node, created automatically by Maya.
     |  
     |  isFromReferencedFile
     |      True if the node is from a referenced file, False if the node is part of the main scene.
     |  
     |  isLocked
     |      True if the node is locked against changes.
     |  
     |  isShared
     |      True if the node is shared.
     |  
     |  namespace
     |      Name of the namespace which contains the node.
     |  
     |  pluginName
     |      Name of the plugin which registered the node type, if any.
     |  
     |  typeId
     |      MTypeId for the node's type.
     |  
     |  typeName
     |      Name of the node's type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDependencyNode:
     |  
     |  kExtensionAttr = 3
     |  
     |  kInvalidAttr = 4
     |  
     |  kLocalDynamicAttr = 1
     |  
     |  kNormalAttr = 2
     |  
     |  kTimerInvalidState = 3
     |  
     |  kTimerMetric_callback = 0
     |  
     |  kTimerMetric_callbackNotViaAPI = 6
     |  
     |  kTimerMetric_callbackViaAPI = 5
     |  
     |  kTimerMetric_compute = 1
     |  
     |  kTimerMetric_computeDuringCallback = 7
     |  
     |  kTimerMetric_computeNotDuringCallback = 8
     |  
     |  kTimerMetric_dirty = 2
     |  
     |  kTimerMetric_draw = 3
     |  
     |  kTimerMetric_fetch = 4
     |  
     |  kTimerMetrics = 9
     |  
     |  kTimerOff = 0
     |  
     |  kTimerOn = 1
     |  
     |  kTimerType_count = 2
     |  
     |  kTimerType_inclusive = 1
     |  
     |  kTimerType_self = 0
     |  
     |  kTimerTypes = 3
     |  
     |  kTimerUninitialized = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnSingleIndexedComponent(MFnComponent)
     |  This function set allows you to create, edit, and query single indexed components.
     |  Single indexed components store 1 dimensional index values.
     |  
     |  __init__()
     |  Initializes a new, empty MFnSingleIndexedComponent object
     |  
     |  __init__(MObject component)
     |  Initializes a new MFnSingleIndexedComponent function set, attached to the specified component.
     |  
     |  Method resolution order:
     |      MFnSingleIndexedComponent
     |      MFnComponent
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addElement(...)
     |      addElement(int element) -> self
     |      
     |      Adds the specified element to the component.
     |  
     |  addElements(...)
     |      addElements([int]) -> self
     |      addElements(MIntArray) -> self
     |      
     |      Adds the specified elements to the component.
     |  
     |  create(...)
     |      create(MFn Type constant) -> MObject
     |      
     |      Creates a new, empty component, attaches it to the function set and
     |      returns an MObject which references it.
     |  
     |  element(...)
     |      element(index) -> int
     |      
     |      Returns the index'th element of the component.
     |  
     |  getCompleteData(...)
     |      getCompleteData() -> int
     |      
     |      Returns the number of elements in the complete component, or 0 if the component is not complete.
     |  
     |  getElements(...)
     |      getElements() -> MIntArray
     |      
     |      Returns all of the component's elements.
     |  
     |  setCompleteData(...)
     |      setCompleteData(numElements) -> self
     |      
     |      Marks the component as complete (i.e. contains all possible elements).
     |      numElements indicates the number of elements in the complete component.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  elementMax
     |      Biggest element plus 1 in the component.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnComponent:
     |  
     |  isEqual(...)
     |      isEqual(MObject other) -> bool
     |      
     |      Returns True if other refers to the same component as the
     |      one to which the function set is currently attached.
     |  
     |  weight(...)
     |      weight(index) -> MWeight
     |      
     |      Returns the weight associated with the specified element,
     |      where index can range from 0 to elementCount-1.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnComponent:
     |  
     |  componentType
     |      Type of the component. (MFn Type constant)
     |  
     |  elementCount
     |      Number of elements in the component.
     |  
     |  hasWeights
     |      True if the component has weights associated with its elements.
     |  
     |  isComplete
     |      Marking a component as complete means that it represents a full set
     |      of indices from 0 to elementCount-1
     |  
     |  isEmpty
     |      True if the component contains no elements.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnStringArrayData(MFnData)
     |  Function set for node data consisting of an array of string.
     |  
     |  Method resolution order:
     |      MFnStringArrayData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  array(...)
     |      Returns the encapsulated array as a list of unicode objects.
     |  
     |  create(...)
     |      Creates a new string array data object.
     |  
     |  set(...)
     |      Sets values in the encapsulated array.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnStringData(MFnData)
     |  Function set for string node data.
     |  
     |  Method resolution order:
     |      MFnStringData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  create(...)
     |      Creates a new string data object.
     |  
     |  set(...)
     |      Sets the value of the encapsulated string.
     |  
     |  string(...)
     |      Returns the encapsulated string as a unicode object.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnTransform(MFnDagNode)
     |  Function set for operating on transform nodes.
     |  
     |  Method resolution order:
     |      MFnTransform
     |      MFnDagNode
     |      MFnDependencyNode
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  clearRestPosition(...)
     |      Clears the transform's rest position matrix.
     |  
     |  create(...)
     |      Creates a new transform node and attaches it to the function set.
     |  
     |  enableLimit(...)
     |      Enables or disables a specified limit type.
     |  
     |  isLimited(...)
     |      Returns True if the specified limit type is enabled.
     |  
     |  limitValue(...)
     |      Returns the value of the specified limit.
     |  
     |  resetFromRestPosition(...)
     |      Resets the transform from its rest position matrix.
     |  
     |  restPosition(...)
     |      Returns the transform's rest position matrix.
     |  
     |  rotateBy(...)
     |      Adds an MEulerRotation or MQuaternion to the transform's rotation.
     |  
     |  rotateByComponents(...)
     |      Adds to the transform's rotation using the individual components of an MEulerRotation or MQuaternion.
     |  
     |  rotateOrientation(...)
     |      Returns the MQuaternion which orients the local rotation space.
     |  
     |  rotatePivot(...)
     |      Returns the transform's rotate pivot.
     |  
     |  rotatePivotTranslation(...)
     |      Returns the transform's rotate pivot translation.
     |  
     |  rotation(...)
     |      Returns the transform's rotation as an MEulerRotation or MQuaternion.
     |  
     |  rotationComponents(...)
     |      Returns the transform's rotation as the individual components of an MEulerRotation or MQuaternion.
     |  
     |  rotationOrder(...)
     |      Returns the order of rotations when the transform's rotation is expressed as an MEulerRotation.
     |  
     |  scale(...)
     |      Returns a list containing the transform's XYZ scale components.
     |  
     |  scaleBy(...)
     |      Multiplies the transform's XYZ scale components by a sequence of three floats.
     |  
     |  scalePivot(...)
     |      Returns the transform's scale pivot.
     |  
     |  scalePivotTranslation(...)
     |      Returns the transform's scale pivot translation.
     |  
     |  setLimit(...)
     |      Sets the value of the specified limit.
     |  
     |  setRestPosition(...)
     |      Sets the transform's rest position matrix.
     |  
     |  setRotateOrientation(...)
     |      Sets the MQuaternion which orients the local rotation space.
     |  
     |  setRotatePivot(...)
     |      Sets the transform's rotate pivot.
     |  
     |  setRotatePivotTranslation(...)
     |      Sets the transform's rotate pivot translation.
     |  
     |  setRotation(...)
     |      Sets the transform's rotation using an MEulerRotation or MQuaternion.
     |  
     |  setRotationComponents(...)
     |      Sets the transform's rotation using the individual components of an MEulerRotation or MQuaternion.
     |  
     |  setRotationOrder(...)
     |      Sets the transform's rotation order.
     |  
     |  setScale(...)
     |      Sets the transform's scale components.
     |  
     |  setScalePivot(...)
     |      Sets the transform's scale pivot.
     |  
     |  setScalePivotTranslation(...)
     |      Sets the transform's scale pivot translation.
     |  
     |  setShear(...)
     |      Sets the transform's shear.
     |  
     |  setTransformation(...)
     |      Sets the transform's attribute values to represent the given transformation matrix.
     |  
     |  setTranslation(...)
     |      Sets the transform's translation.
     |  
     |  shear(...)
     |      Returns a list containing the transform's shear components.
     |  
     |  shearBy(...)
     |      Multiplies the transform's shear components by a sequence of three floats.
     |  
     |  transformation(...)
     |      Returns the transformation matrix represented by this transform.
     |  
     |  translateBy(...)
     |      Adds an MVector to the transform's translation.
     |  
     |  translation(...)
     |      Returns the transform's translation as an MVector.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kRotateMaxX = 13
     |  
     |  kRotateMaxY = 15
     |  
     |  kRotateMaxZ = 17
     |  
     |  kRotateMinX = 12
     |  
     |  kRotateMinY = 14
     |  
     |  kRotateMinZ = 16
     |  
     |  kScaleMaxX = 1
     |  
     |  kScaleMaxY = 3
     |  
     |  kScaleMaxZ = 5
     |  
     |  kScaleMinX = 0
     |  
     |  kScaleMinY = 2
     |  
     |  kScaleMinZ = 4
     |  
     |  kShearMaxXY = 7
     |  
     |  kShearMaxXZ = 9
     |  
     |  kShearMaxYZ = 11
     |  
     |  kShearMinXY = 6
     |  
     |  kShearMinXZ = 8
     |  
     |  kShearMinYZ = 10
     |  
     |  kTranslateMaxX = 19
     |  
     |  kTranslateMaxY = 21
     |  
     |  kTranslateMaxZ = 23
     |  
     |  kTranslateMinX = 18
     |  
     |  kTranslateMinY = 20
     |  
     |  kTranslateMinZ = 22
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDagNode:
     |  
     |  addChild(...)
     |      addChild(node, index=kNextPos, keepExistingParents=False) -> self
     |      
     |      Makes a node a child of this one.
     |  
     |  child(...)
     |      child(index) -> MObject
     |      
     |      Returns the specified child of this node.
     |  
     |  childCount(...)
     |      childCount() -> int
     |      
     |      Returns the number of nodes which are children of this one.
     |  
     |  dagPath(...)
     |      dagPath() -> MDagPath
     |      
     |      Returns the DAG path to which this function set is attached. Raises a TypeError if the function set is attached to an MObject rather than a path.
     |  
     |  dagRoot(...)
     |      dagRoot() -> MObject
     |      
     |      Returns the root node of the first path leading to this node.
     |  
     |  duplicate(...)
     |      duplicate(instance=False, instanceLeaf=False) -> MObject
     |      
     |      Duplicates the DAG hierarchy rooted at the current node.
     |  
     |  fullPathName(...)
     |      fullPathName() -> string
     |      
     |      Returns the full path of the attached object, from the root of the DAG on down.
     |  
     |  getAllPaths(...)
     |      getAllPaths() -> MDagPathArray
     |      
     |      Returns all of the DAG paths which lead to the object to which this function set is attached.
     |  
     |  getConnectedSetsAndMembers(...)
     |      getConnectedSetsAndMembers(instance, renderableSetsOnly) -> (MObjectArray, MObjectArray)
     |      
     |      Returns a tuple containing an array of sets and an array of the
     |      components of the DAG object which are in those sets. If the entire object is in a set, then the corresponding entry in the comps array will have no elements in it.
     |  
     |  getPath(...)
     |      getPath() -> MDagPath
     |      
     |      Returns the DAG path to which this function set is attached, or the first path to the node if the function set is attached to an MObject.
     |  
     |  hasChild(...)
     |      hasChild(node) -> bool
     |      
     |      Returns True if the specified node is a child of this one.
     |  
     |  hasParent(...)
     |      hasParent(node) -> bool
     |      
     |      Returns True if the specified node is a parent of this one.
     |  
     |  instanceCount(...)
     |      instanceCount(indirect) -> int
     |      
     |      Returns the number of instances for this node.
     |  
     |  isChildOf(...)
     |      isChildOf(node) -> bool
     |      
     |      Returns True if the specified node is a parent of this one.
     |  
     |  isInstanced(...)
     |      isInstanced(indirect=True) -> bool
     |      
     |      Returns True if this node is instanced.
     |  
     |  isInstancedAttribute(...)
     |      isInstancedAttribute(attr) -> bool
     |      
     |      Returns True if the specified attribute is an instanced attribute of this node.
     |  
     |  isParentOf(...)
     |      isParentOf(node) -> bool
     |      
     |      Returns True if the specified node is a child of this one.
     |  
     |  parent(...)
     |      parent(index) -> MObject
     |      
     |      Returns the specified parent of this node.
     |  
     |  parentCount(...)
     |      parentCount() -> int
     |      
     |      Returns the number of parents this node has.
     |  
     |  partialPathName(...)
     |      partialPathName() -> string
     |      
     |      Returns the minimum path string necessary to uniquely identify the attached object.
     |  
     |  removeChild(...)
     |      removeChild(node) -> self
     |      
     |      Removes the child, specified by MObject, reparenting it under the world.
     |  
     |  removeChildAt(...)
     |      removeChildAt(index) -> self
     |      
     |      Removes the child, specified by index, reparenting it under the world.
     |  
     |  setObject(...)
     |      setObject(MObject or MDagPath) -> self
     |      
     |      Attaches the function set to the specified node or DAG path.
     |  
     |  transformationMatrix(...)
     |      transformationMatrix() -> MMatrix
     |      
     |      Returns the object space transformation matrix for this DAG node.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDagNode:
     |  
     |  boundingBox
     |      Node's bounding box, in object space.
     |  
     |  inModel
     |      True if the node has been added to the model.
     |  
     |  inUnderWorld
     |      True if this node is in the underworld of another node (e.g. a curve on surface is in the underworld of the surface).
     |  
     |  isInstanceable
     |      True if instancing is allowed for this node.
     |  
     |  isIntermediateObject
     |      True if this node is just an intermediate in part of a larger calculation (e.g. input to a deformer).
     |  
     |  objectColor
     |      Index from 0 to 7 indicating the color in which the node is to be drawn when inactive, assuming that it is drawable.
     |  
     |  objectColorRGB
     |      RGB value indicating the color in which the node is to be drawn when inactive, assuming that it is drawable.
     |  
     |  objectColorType
     |      Determines whether the default color, indexed object color, orRGB object color is used for this object.
     |  
     |  useObjectColor
     |      If True then the node will be drawn using its 'objectColor', otherwise it will be drawn using Maya's default color. Thismethod is deprecated, use objectColorType instead.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDagNode:
     |  
     |  kNextPos = 255
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnDependencyNode:
     |  
     |  absoluteName(...)
     |      Returns the absolute name of this node.  The absolute name of a node is the full namespace path starting at (and including) the root namespace, down to (and including) the node itself.  Regardless of relative name mode, absoluteName() will always return a full namespace path prefixed with a leading colon (the root namespace).
     |  
     |  addAttribute(...)
     |      Adds a new dynamic attribute to the node.
     |  
     |  addExternalContentForFileAttr(...)
     |      Adds content info to the specified table from a file path attribute.
     |  
     |  affectsAnimation(...)
     |      Returns true if the changes to the node may affect animation.
     |  
     |  attribute(...)
     |      Returns an attribute of the node, given either its index or name.
     |  
     |  attributeClass(...)
     |      Returns the class of the specified attribute.
     |  
     |  attributeCount(...)
     |      Returns the number of attributes on the node.
     |  
     |  canBeWritten(...)
     |      Returns true if the node will be written to file.
     |  
     |  dgCallbackIds(...)
     |      Returns DG timing information for a specific callback type, broken down by callbackId.
     |  
     |  dgCallbacks(...)
     |      Returns DG timing information broken down by callback type.
     |  
     |  dgTimer(...)
     |      Returns a specific DG timer metric for a given timer type.
     |  
     |  dgTimerOff(...)
     |      Turns DG timing off for this node.
     |  
     |  dgTimerOn(...)
     |      Turns DG timing on for this node.
     |  
     |  dgTimerQueryState(...)
     |      Returns the current DG timer state for this node.
     |  
     |  dgTimerReset(...)
     |      Resets all DG timers for this node.
     |  
     |  findAlias(...)
     |      Returns the attribute which has the given alias.
     |  
     |  findPlug(...)
     |      Returns a plug for the given attribute.
     |  
     |  getAffectedAttributes(...)
     |      Returns all of the attributes which are affected by the specified attribute.
     |  
     |  getAffectingAttributes(...)
     |      Returns all of the attributes which affect the specified attribute.
     |  
     |  getAliasAttr(...)
     |      Returns the node's alias attribute, which is a special attribute used to store information about the node's attribute aliases.
     |  
     |  getAliasList(...)
     |      Returns all of the node's attribute aliases.
     |  
     |  getConnections(...)
     |      Returns all the plugs which are connected to attributes of this node.
     |  
     |  getExternalContent(...)
     |      Gets the external content (files) that this node depends on.
     |  
     |  hasAttribute(...)
     |      Returns True if the node has an attribute with the given name.
     |  
     |  hasUniqueName(...)
     |      Returns True if the node's name is unique.
     |  
     |  isFlagSet(...)
     |      Returns the state of the specified node flag.
     |  
     |  isNewAttribute(...)
     |      Returns True if the specified attribute was added in the current scene, and not by by one of its referenced files.
     |  
     |  isTrackingEdits(...)
     |      Returns True if the node is referenced or in an assembly that is tracking edits.
     |  
     |  name(...)
     |      Returns the node's name.
     |  
     |  plugsAlias(...)
     |      Returns the alias for a plug's attribute.
     |  
     |  removeAttribute(...)
     |      Removes a dynamic attribute from the node.
     |  
     |  reorderedAttribute(...)
     |      Returns one of the node's attribute, based on the order in which they are written to file.
     |  
     |  setAffectsAnimation(...)
     |      Specifies that modifications to a node could potentially affect the animation.
     |  
     |  setAlias(...)
     |      Adds or removes an attribute alias.
     |  
     |  setDoNotWrite(...)
     |      Used to prevent the node from being written to file.
     |  
     |  setExternalContent(...)
     |      Changes the location of external content.
     |  
     |  setExternalContentForFileAttr(...)
     |      Sets content info in the specified attribute from the table.
     |  
     |  setFlag(...)
     |      Sets the state of the specified node flag.
     |  
     |  setName(...)
     |      Sets the node's name.
     |  
     |  setUuid(...)
     |      Sets the node's UUID.
     |  
     |  userNode(...)
     |      Returns the MPxNode object for a plugin node.
     |  
     |  uuid(...)
     |      Returns the node's UUID.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MFnDependencyNode:
     |  
     |  allocateFlag(...)
     |      Allocates a flag on all nodes for use by the named plugin and returns the flag's index.
     |  
     |  classification(...)
     |      Returns the classification string for the named node type.
     |  
     |  deallocateAllFlags(...)
     |      Deallocates all node flags which are currently allocated to the named plugin.
     |  
     |  deallocateFlag(...)
     |      Deallocates the specified node flag, which was previously allocated by the named plugin using allocateFlag().
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnDependencyNode:
     |  
     |  isDefaultNode
     |      True if this is a default node, created automatically by Maya.
     |  
     |  isFromReferencedFile
     |      True if the node is from a referenced file, False if the node is part of the main scene.
     |  
     |  isLocked
     |      True if the node is locked against changes.
     |  
     |  isShared
     |      True if the node is shared.
     |  
     |  namespace
     |      Name of the namespace which contains the node.
     |  
     |  pluginName
     |      Name of the plugin which registered the node type, if any.
     |  
     |  typeId
     |      MTypeId for the node's type.
     |  
     |  typeName
     |      Name of the node's type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnDependencyNode:
     |  
     |  kExtensionAttr = 3
     |  
     |  kInvalidAttr = 4
     |  
     |  kLocalDynamicAttr = 1
     |  
     |  kNormalAttr = 2
     |  
     |  kTimerInvalidState = 3
     |  
     |  kTimerMetric_callback = 0
     |  
     |  kTimerMetric_callbackNotViaAPI = 6
     |  
     |  kTimerMetric_callbackViaAPI = 5
     |  
     |  kTimerMetric_compute = 1
     |  
     |  kTimerMetric_computeDuringCallback = 7
     |  
     |  kTimerMetric_computeNotDuringCallback = 8
     |  
     |  kTimerMetric_dirty = 2
     |  
     |  kTimerMetric_draw = 3
     |  
     |  kTimerMetric_fetch = 4
     |  
     |  kTimerMetrics = 9
     |  
     |  kTimerOff = 0
     |  
     |  kTimerOn = 1
     |  
     |  kTimerType_count = 2
     |  
     |  kTimerType_inclusive = 1
     |  
     |  kTimerType_self = 0
     |  
     |  kTimerTypes = 3
     |  
     |  kTimerUninitialized = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnTripleIndexedComponent(MFnComponent)
     |  This function set allows you to create, edit, and query triple indexed
     |  components. Triple indexed components store 3 dimensional index values.
     |  
     |  __init__()
     |  Initializes a new, empty MFnTripleIndexedComponent object
     |  
     |  __init__(MObject component)
     |  Initializes a new MFnTripleIndexedComponent function set, attached
     |  to the specified component.
     |  
     |  Method resolution order:
     |      MFnTripleIndexedComponent
     |      MFnComponent
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addElement(...)
     |      addElement(sIndex, tIndex, uIndex) -> self
     |      addElement([sIndex, tIndex, uIndex]) -> self
     |      
     |      Adds the element identified by (sIndex, tIndex, uIndex) to the component.
     |  
     |  addElements(...)
     |      addElements(sequence of [sIndex, tIndex, uIndex]) -> self
     |      
     |      Adds the specified elements to the component. Each item in the
     |      elements sequence is itself a sequence of three ints which are the
     |      S, T and U indices of an element to be added.
     |  
     |  create(...)
     |      create(MFn Type constant) -> MObject
     |      
     |      Creates a new, empty component, attaches it to the function set and
     |      returns an MObject which references it.
     |  
     |  getCompleteData(...)
     |      getCompleteData() -> (numS, numT, numU)
     |      
     |      Returns a tuple containing the number of S, T and U indices in
     |      the complete component, or (0,0,0) if the component is not complete.
     |  
     |  getElement(...)
     |      getElement(index) -> (sIndex, tIndex, uIndex)
     |      
     |      Returns the index'th element of the component as a tuple containing the
     |      element's S, T and U indices.
     |  
     |  getElements(...)
     |      getElements() -> list of (sIndex, tIndex, uIndex)
     |      
     |      Returns all of the component's elements as a list of tuples with each
     |      tuple containing the S, T and U indices of a single element.
     |  
     |  setCompleteData(...)
     |      setCompleteData(numS, numT, numU) -> self
     |      
     |      Marks the component as complete (i.e. contains all possible elements).
     |      numS, numT and numU indicate the number of S, T and U indices
     |      in the complete component (i.e. the max S index is numS-1, the max T
     |      index is numT-1 and the max U index is numU-1).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnComponent:
     |  
     |  isEqual(...)
     |      isEqual(MObject other) -> bool
     |      
     |      Returns True if other refers to the same component as the
     |      one to which the function set is currently attached.
     |  
     |  weight(...)
     |      weight(index) -> MWeight
     |      
     |      Returns the weight associated with the specified element,
     |      where index can range from 0 to elementCount-1.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnComponent:
     |  
     |  componentType
     |      Type of the component. (MFn Type constant)
     |  
     |  elementCount
     |      Number of elements in the component.
     |  
     |  hasWeights
     |      True if the component has weights associated with its elements.
     |  
     |  isComplete
     |      Marking a component as complete means that it represents a full set
     |      of indices from 0 to elementCount-1
     |  
     |  isEmpty
     |      True if the component contains no elements.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnTypedAttribute(MFnAttribute)
     |  Functionset for creating and working typed attributes.
     |  
     |  Method resolution order:
     |      MFnTypedAttribute
     |      MFnAttribute
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  attrType(...)
     |      Returns the type of data handled by the attribute.
     |  
     |  create(...)
     |      Creates a new type attribute, attaches it to the function set and returns it as an MObject.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  default
     |      Default value
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnAttribute:
     |  
     |  accepts(...)
     |      Returns True if this attribute can accept a connection of the given type.
     |  
     |  acceptsAttribute(...)
     |      Returns True if this attribute can accept a connection with the given attribute.
     |  
     |  addToCategory(...)
     |      Adds the attribute to a category
     |  
     |  getAddAttrCmd(...)
     |      Returns a string containing a MEL 'addAttr' command capable of recreating the attribute.
     |  
     |  hasCategory(...)
     |      Checks to see if the attribute has a given category
     |  
     |  setNiceNameOverride(...)
     |      Sets a nice UI name for this attribute rather than using the default derived from it's long name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnAttribute:
     |  
     |  affectsAppearance
     |      Does the attribute affect how the node is drawn in Maya's viewport?
     |  
     |  affectsWorldSpace
     |      Does the attribute affect the node's worldSpace matrix?
     |  
     |  array
     |      Is the attribute an array?
     |  
     |  cached
     |      Should the attribute's value be cached in the datablock?
     |  
     |  channelBox
     |      Should the attribute be displayed in the Channel Box?
     |  
     |  connectable
     |      Can connections be made to the attribute?
     |  
     |  disconnectBehavior
     |      What should happen when the attribute loses an incoming connection?
     |  
     |  dynamic
     |      Is the attribute a dynamic attribute?
     |  
     |  extension
     |      Is the attribute an extension attribute?
     |  
     |  hidden
     |      If True the attribute will not be displayed in the Attribute Editor.
     |  
     |  indeterminant
     |      Hint to DG that this attribute may not always be used when computing the attributes which are dependent upon it.
     |  
     |  indexMatters
     |      If False, connectAttr -nextAvailable can be used with this attribute. If True then an explicit index must be provided.
     |  
     |  internal
     |      Will the node handle the attribute's data storage itself, outside of the node's data block?
     |  
     |  isProxyAttribute
     |      Does the attribute is a proxy attribute?
     |  
     |  keyable
     |      Can keys be set on the attribute?
     |  
     |  name
     |      Attribute's long name.
     |  
     |  parent
     |      Parent attribute. MObject::kNullObj if attr has no parent.
     |  
     |  readable
     |      Is the attribute readable?
     |  
     |  renderSource
     |      Is the attribute a render source?
     |  
     |  shortName
     |      Attribute's short name.
     |  
     |  storable
     |      Should the attribute's value be preserved when the node is written to file?
     |  
     |  usedAsColor
     |      Should the attribute be treated as a color in the UI?
     |  
     |  usedAsFilename
     |      Should the attribute be treated as a file name in the UI?
     |  
     |  usesArrayDataBuilder
     |      Array attributes only: does the attribute create elements using MArrayDataBuilder?
     |  
     |  worldSpace
     |      DAG nodes only: if the node is instanced, will the attribute have separate values for each instance?
     |  
     |  writable
     |      Is the attribute writable?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnAttribute:
     |  
     |  kDelete = 0
     |  
     |  kNothing = 2
     |  
     |  kReset = 1
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnUInt64ArrayData(MFnData)
     |  Function set for node data consisting of an array of MUint64.
     |  
     |  Method resolution order:
     |      MFnUInt64ArrayData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  array(...)
     |      Returns the encapsulated array as an MUint64Array.
     |  
     |  copyTo(...)
     |      Replaces the elements of an array with those in the encapsulated array.
     |  
     |  create(...)
     |      Creates a new MUint64 array data object.
     |  
     |  set(...)
     |      Sets values in the encapsulated array.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnUnitAttribute(MFnAttribute)
     |  Functionset for creating and working with angle, distance and time attributes.
     |  
     |  Method resolution order:
     |      MFnUnitAttribute
     |      MFnAttribute
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  create(...)
     |      Creates a new unit attribute, attaches it to the function set and returns it as an MObject.
     |  
     |  getMax(...)
     |      Returns the attribute's hard maximum value. Returned MAngle and MDistance are always in radians and centimeters, respectively
     |  
     |  getMin(...)
     |      Returns the attribute's hard minimum value. Returned MAngle and MDistance are always in radians and centimeters, respectively
     |  
     |  getSoftMax(...)
     |      Returns the attribute's soft maximum value. Returned MAngle and MDistance are always in radians and centimeters, respectively
     |  
     |  getSoftMin(...)
     |      Returns the attribute's soft minimum value. Returned MAngle and MDistance are always in radians and centimeters, respectively
     |  
     |  hasMax(...)
     |      Returns True if the attribute has a hard maximum value.
     |  
     |  hasMin(...)
     |      Returns True if the attribute has a hard minimum value.
     |  
     |  hasSoftMax(...)
     |      Returns True if the attribute has a soft maximum value.
     |  
     |  hasSoftMin(...)
     |      Returns True if the attribute has a soft minimum value.
     |  
     |  setMax(...)
     |      Sets the attribute's hard maximum value.
     |  
     |  setMin(...)
     |      Sets the attribute's hard minimum value.
     |  
     |  setSoftMax(...)
     |      Sets the attribute's soft maximum value.
     |  
     |  setSoftMin(...)
     |      Sets the attribute's soft minimum value.
     |  
     |  unitType(...)
     |      Returns the type of data handled by the attribute.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  default
     |      Default value
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kAngle = 1
     |  
     |  kDistance = 2
     |  
     |  kInvalid = 0
     |  
     |  kLast = 4
     |  
     |  kTime = 3
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnAttribute:
     |  
     |  accepts(...)
     |      Returns True if this attribute can accept a connection of the given type.
     |  
     |  acceptsAttribute(...)
     |      Returns True if this attribute can accept a connection with the given attribute.
     |  
     |  addToCategory(...)
     |      Adds the attribute to a category
     |  
     |  getAddAttrCmd(...)
     |      Returns a string containing a MEL 'addAttr' command capable of recreating the attribute.
     |  
     |  hasCategory(...)
     |      Checks to see if the attribute has a given category
     |  
     |  setNiceNameOverride(...)
     |      Sets a nice UI name for this attribute rather than using the default derived from it's long name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MFnAttribute:
     |  
     |  affectsAppearance
     |      Does the attribute affect how the node is drawn in Maya's viewport?
     |  
     |  affectsWorldSpace
     |      Does the attribute affect the node's worldSpace matrix?
     |  
     |  array
     |      Is the attribute an array?
     |  
     |  cached
     |      Should the attribute's value be cached in the datablock?
     |  
     |  channelBox
     |      Should the attribute be displayed in the Channel Box?
     |  
     |  connectable
     |      Can connections be made to the attribute?
     |  
     |  disconnectBehavior
     |      What should happen when the attribute loses an incoming connection?
     |  
     |  dynamic
     |      Is the attribute a dynamic attribute?
     |  
     |  extension
     |      Is the attribute an extension attribute?
     |  
     |  hidden
     |      If True the attribute will not be displayed in the Attribute Editor.
     |  
     |  indeterminant
     |      Hint to DG that this attribute may not always be used when computing the attributes which are dependent upon it.
     |  
     |  indexMatters
     |      If False, connectAttr -nextAvailable can be used with this attribute. If True then an explicit index must be provided.
     |  
     |  internal
     |      Will the node handle the attribute's data storage itself, outside of the node's data block?
     |  
     |  isProxyAttribute
     |      Does the attribute is a proxy attribute?
     |  
     |  keyable
     |      Can keys be set on the attribute?
     |  
     |  name
     |      Attribute's long name.
     |  
     |  parent
     |      Parent attribute. MObject::kNullObj if attr has no parent.
     |  
     |  readable
     |      Is the attribute readable?
     |  
     |  renderSource
     |      Is the attribute a render source?
     |  
     |  shortName
     |      Attribute's short name.
     |  
     |  storable
     |      Should the attribute's value be preserved when the node is written to file?
     |  
     |  usedAsColor
     |      Should the attribute be treated as a color in the UI?
     |  
     |  usedAsFilename
     |      Should the attribute be treated as a file name in the UI?
     |  
     |  usesArrayDataBuilder
     |      Array attributes only: does the attribute create elements using MArrayDataBuilder?
     |  
     |  worldSpace
     |      DAG nodes only: if the node is instanced, will the attribute have separate values for each instance?
     |  
     |  writable
     |      Is the attribute writable?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnAttribute:
     |  
     |  kDelete = 0
     |  
     |  kNothing = 2
     |  
     |  kReset = 1
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MFnVectorArrayData(MFnData)
     |  Function set for node data consisting of an array of MVectors.
     |  
     |  Method resolution order:
     |      MFnVectorArrayData
     |      MFnData
     |      MFnBase
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  array(...)
     |      Returns the encapsulated array as an MVectorArray.
     |  
     |  copyTo(...)
     |      Replaces the elements of an array with those in the encapsulated array.
     |  
     |  create(...)
     |      Creates a new MVector array data object.
     |  
     |  set(...)
     |      Sets values in the encapsulated array.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MFnData:
     |  
     |  kAny = 24
     |  
     |  kComponentList = 13
     |  
     |  kDoubleArray = 7
     |  
     |  kDynArrayAttrs = 19
     |  
     |  kDynSweptGeometry = 20
     |  
     |  kFloatArray = 8
     |  
     |  kIntArray = 9
     |  
     |  kInvalid = 0
     |  
     |  kLast = 25
     |  
     |  kLattice = 15
     |  
     |  kMatrix = 5
     |  
     |  kMatrixArray = 12
     |  
     |  kMesh = 14
     |  
     |  kNId = 23
     |  
     |  kNObject = 22
     |  
     |  kNumeric = 1
     |  
     |  kNurbsCurve = 16
     |  
     |  kNurbsSurface = 17
     |  
     |  kPlugin = 2
     |  
     |  kPluginGeometry = 3
     |  
     |  kPointArray = 10
     |  
     |  kSphere = 18
     |  
     |  kString = 4
     |  
     |  kStringArray = 6
     |  
     |  kSubdSurface = 21
     |  
     |  kVectorArray = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MFnBase:
     |  
     |  hasObj(...)
     |      Returns True if the function set is compatible with the specified Maya object.
     |  
     |  object(...)
     |      Returns a reference to the object to which the function set is currently attached, or MObject.kNullObj if none.
     |  
     |  setObject(...)
     |      Attaches the function set to the specified Maya object.
     |  
     |  type(...)
     |      Returns the type of the function set.
    
    class MGlobal(__builtin__.object)
     |  Static class providing common API global functions.
     |  
     |  Static methods defined here:
     |  
     |  addToModel(...)
     |      addToModel(MObject, MObject) -> None
     |      
     |      This method is used to add new dag objects to the model.  If no parent node
     |      is specified, then the node is added under the world.  When a node is
     |      added under the world, then a transform node is automatically created as
     |      a parent.  This assumes that the node being added is not already a
     |      transform node.
     |      This method is only valid for dag nodes. If the specified
     |      object is not of type MFn::kDagNode then MS::kInvalidParameter will be returned.
     |  
     |  addToModelAt(...)
     |      addToModelAt(MObject, MVector, double[3], double[3], rotateOrder=MTransformationMatrix.kXYZ) -> None
     |      
     |      Adds the specified dag object to the DAG and transform the object
     |      by the specified arguments.
     |      This method is only valid for dag nodes. If the specified
     |      object is not of type MFn::kDagNode then MS::kInvalidParameter
     |      will be returned.
     |  
     |  animSelectionMask(...)
     |      animSelectionMask() -> MSelectionMask
     |      
     |      Returns the animation selection mask.
     |  
     |  apiVersion(...)
     |      apiVersion() -> int
     |      
     |      Returns a number describing the version of the Maya API at runtime.
     |  
     |  className(...)
     |      className() -> string
     |      
     |      Returns the name of this class.
     |  
     |  clearSelectionList(...)
     |      clearSelectionList() -> None
     |      
     |      Removes all items from the active selection list.
     |  
     |  closeErrorLog(...)
     |      closeErrorLog() -> None
     |      
     |      This method closes the API error log file.  If error logging is currently
     |      enabled this method disables it.
     |      The error log is time and date stamped before it is closed.
     |      After the log is closed the error log path name is reset to the default
     |      path name.
     |      If the error log file is already closed, then no action is taken.
     |      
     |      Note that if a log is reopened after it is closed, all information previously
     |      logged to it is lost.
     |  
     |  componentSelectionMask(...)
     |      componentSelectionMask() -> MSelectionMask
     |      
     |      Returns the component selection mask.
     |  
     |  currentToolContext(...)
     |      currentToolContext() -> MObject
     |      
     |      Returns the current tool context as an MObject.
     |  
     |  defaultErrorLogPathName(...)
     |      defaultErrorLogPathName() -> string
     |      
     |      Determines the default path name of the error log file.
     |      Returns an empty string on failure.
     |  
     |  deleteNode(...)
     |      deleteNode(MObject) -> None
     |      
     |      Delete the given dag node or dependency graph node.
     |  
     |  disableStow(...)
     |      disableStow() -> bool
     |      
     |      This method is used to query if the disabling of Stowing (hiding) 
     |      and Unstowing (showing) windows is active.
     |  
     |  displayError(...)
     |      displayError(msg) -> None
     |      
     |      Display an error in the script editor.
     |  
     |  displayInfo(...)
     |      displayInfo(msg) -> None
     |      
     |      Display an informational message in the script editor.
     |  
     |  displayWarning(...)
     |      displayWarning(msg) -> None
     |      
     |      Display a warning in the script editor.
     |  
     |  doErrorLogEntry(...)
     |      doErrorLogEntry(string) -> bool
     |      
     |      Logs an entry in the currently open log file.  It is not necessary for error
     |      logging to be enabled, but a log file must be open.
     |      A newline is appended to each log entry.
     |  
     |  errorLogPathName(...)
     |      errorLogPathName() -> string
     |      
     |      Determines the path name of the current error log file.
     |      Returns the null stringon failure.
     |  
     |  errorLoggingIsOn(...)
     |      errorLoggingIsOn() -> bool
     |      
     |      This method determines whether or not API errors are being logged.
     |  
     |  executeCommandOnIdle(...)
     |      executeCommandOnIdle(string, bool displayEnabled=False) -> None
     |      
     |      Sets a MEL command to execute on the next idle event. Since the command
     |      will likely not be executed until some time after control is returned to
     |      caller, there is no access to the command results.
     |      
     |      This method is thread safe and can be called from a thread other than
     |      Maya's main thread. However, that thread must still be part of the Maya
     |      process. Calling this method from a completely separate process will
     |      not work and may lead to unpredictable behaviour.
     |  
     |  executeCommandStringResult(...)
     |      executeCommandStringResult(string, bool displayEnabled=False, bool undoEnabled=False) -> string or [string, string, ...]
     |      
     |      Executes a MEL command that returns a string or an array of strings 
     |      result from the command engine depending on the number of return values.
     |      Optionally allows display of the command in the Command Window to be 
     |      enabled or disabled.  Defaults to disabled.  Optionally allows undo 
     |      for the command to be enabled or disabled.  Defaults to disabled.
     |      
     |      Note: This is not thread safe; you may use executeCommandOnIdle instead
     |  
     |  getAbsolutePathToResources(...)
     |      getAbsolutePathToResources() -> string
     |      
     |      Return the absolute path of Maya's "Resources" fold on the system,
     |      including the "Resources" folder itself.
     |  
     |  getActiveSelectionList(...)
     |      getActiveSelectionList(orderedSelectionIfAvailable=False) -> MSelectionList
     |      
     |      Return an MSelectionList containing the nodes, components and
     |      plugs currently selected in Maya. If orderedSelectionIfAvailable
     |      is True, and tracking is enabled, will return the selected items
     |      in the order that they were selected.
     |  
     |  getAssociatedSets(...)
     |      getAssociatedSets(MSelectionList) -> list
     |      
     |      This utility method finds all the sets that the items in
     |      the given selection list are members of.
     |  
     |  getFunctionSetList(...)
     |      getFunctionSetList(MObject) -> (string, string, ...)
     |      
     |      Returns a tuple of strings that represent the type of each function
     |      set that will accept this object.
     |  
     |  getHiliteList(...)
     |      getHiliteList() -> MSelectionList
     |      
     |      Returns a copy of the hilite list.  The hilite list contains all DAG objects
     |      that are hilited for component selection mode.  (e.g. when the user right clicks
     |      over a Mesh object and chooses the "vertex" option the Mesh line drawing changes
     |      color and the mesh is added to the hiliteList.)
     |  
     |  getLiveList(...)
     |      getLiveList() -> MSelectionList
     |      
     |      Returns a copy of the live list. When a user performs a
     |      "Modify->Make Live" in the user interface the currently selected
     |      objects are added to the live list.
     |  
     |  getPreselectionHiliteList(...)
     |      getPreselectionHiliteList() -> MSelectionList
     |      
     |      Gets the objects for which Maya is displaying a preselection
     |      highlight in the viewports.
     |  
     |  getRichSelection(...)
     |      getRichSelection(defaultToActiveSelection=True) -> MRichSelection
     |      
     |      Returns the current rich selection (usually the active selection with
     |      any soft selection and symmetry applied). If no rich selection exists
     |      and 'defaultToActiveSelection' is True, the current active selection
     |      will be returned instead.
     |  
     |  getSelectionListByName(...)
     |      getSelectionListByName(name) -> MSelectionList
     |      
     |      Returns an MSelectionList with all of the objects that match the
     |      specified name. The name may use the same type of regular expressions
     |      as can be used in MEL commands. For example, the pattern 'pCube*' will
     |      match all occurrences of objects whose names begin with 'pCube'.
     |  
     |  isRedoing(...)
     |      isRedoing() -> bool
     |      
     |      true if Maya is currently in the middle of a redo.
     |  
     |  isSelected(...)
     |      isSelected(MObject) -> bool
     |      
     |      Determines whether the given object is on the active selection list.
     |  
     |  isUndoing(...)
     |      isUndoing() -> bool
     |      
     |      true if Maya is currently in the middle of an undo.
     |  
     |  isYAxisUp(...)
     |      isYAxisUp() -> bool
     |      
     |      This method returns true if, currently, the Y-axis is UP.
     |  
     |  isZAxisUp(...)
     |      isZAxisUp() -> bool
     |      
     |      This method returns true if, currently, the Z-axis is UP.
     |  
     |  mayaState(...)
     |      mayaState() -> int
     |      
     |      Returns an enumerated type specifying the way in which Maya was invoked.
     |        kInteractive  Running with a UI
     |        kBatch  Running without a UI
     |        kLibraryApp  Running as a standalone (MLibrary) application.
     |        kBaseUIMode  Running with UI enabled but Maya's std UI scripts not run.
     |  
     |  mayaVersion(...)
     |      mayaVersion() -> string
     |      
     |      Returns a string describing this version of Maya.
     |  
     |  miscSelectionMask(...)
     |      miscSelectionMask() -> MSelectionMask
     |      
     |      Returns the miscellaneous selection mask.
     |  
     |  objectSelectionMask(...)
     |      objectSelectionMask() -> MSelectionMask
     |      
     |      Returns the object selection mask.
     |  
     |  optionVarDoubleValue(...)
     |      optionVarDoubleValue(string) -> double
     |      
     |      This method is used to get the option variable value of type double
     |  
     |  optionVarExists(...)
     |      optionVarExists(string) -> bool
     |      
     |      This method is used to check if the option variable exists
     |  
     |  optionVarIntValue(...)
     |      optionVarIntValue(string) -> int
     |      
     |      This method is used to get the option variable value of int type
     |  
     |  optionVarStringValue(...)
     |      optionVarStringValue(string) -> MString
     |      
     |      This method is used to get the option variable value of type string
     |  
     |  removeFromModel(...)
     |      removeFromModel(MObject) -> None
     |      
     |      Removes the specified dag node from the scene.
     |      This method is only valid for dag nodes. If the specified
     |      object is not of type MFn::kDagNode then MS::kInvalidParameter
     |      will be returned.
     |      
     |      Note that this method doesn't delete the dag node which means
     |      the node must be added back to scene by calling either
     |      MGlobal::addToModel() or MGlobal::addToModelAt() in later
     |      calls, otherwise the dag node is leaked. To delete the dag node,
     |      call MGlobal::deleteNode() instead.
     |  
     |  removeOptionVar(...)
     |      removeOptionVar(string) -> None
     |      
     |      This method is used to remove the option variable
     |  
     |  resetToDefaultErrorLogPathName(...)
     |      resetToDefaultErrorLogPathName() -> None
     |      
     |      Closes the current log file if it is open, and then resets the log path to
     |      the default path.
     |      Logging is disabled and the log file speicified by the default path is not opened.
     |      If logging is disabled, it remains disabled.
     |      Use startErrorLogging() to enable logging to the default log file.
     |      If the current path is the default path, no action is taken,
     |      but an invalid parameter error is returned.
     |      
     |      Note that if the default log is reopened after it is closed, all information
     |      previously logged to it is lost.
     |  
     |  selectByName(...)
     |      selectByName(string, listAdjustment=kReplaceList) -> None
     |      
     |      Puts objects that match the give name on the active selection list.
     |  
     |  selectCommand(...)
     |      selectCommand(MSelectionList, listAdjustment=kReplaceList) -> None
     |      
     |      Set the active selection list, by calling the built in Maya select
     |      command.  This differs from setActiveSelectionList in that in this
     |      version Maya takes over the selection list you give it and will be
     |      responsible for maintaing the necessary information required for
     |      undo, redo, and journaling.
     |  
     |  selectFromScreen(...)
     |      selectFromScreen(short, short, listAdjustment=kAddToList, selectMethod=kWireframeSelectMethod) -> None
     |      selectFromScreen(short, short, short, short, listAdjustment=kAddToList, selectMethod=kWireframeSelectMethod) -> None
     |      
     |      Perform click-pick type selection on the dag. If an object intersects
     |      the click point then it is selected according to listAdjustment.
     |  
     |  selectionMethod(...)
     |      selectionMethod() -> int
     |      
     |      Determines the selection method that should be used in the currently active
     |      viewport.  This is useful as input to the "selectFromScreen" functions.
     |  
     |  selectionMode(...)
     |      selectionMode() -> int
     |      
     |      Get current selection mode:
     |        kSelectObjectMode     Objects are selected as a whole. Components are not directly accessible.
     |        kSelectComponentMode  Components such as vertices are selectable in this mode.
     |        kSelectRootMode       Selecting the child in a hierarchy will also select its root DAG node.
     |        kSelectLeafMode       Selecting the child in a hierarchy will result only in that child being selected.
     |        kSelectTemplateMode   Templated objects are selectable in this mode.
     |  
     |  setActiveSelectionList(...)
     |      setActiveSelectionList(MSelectionList, listAdjustment=kReplaceList) -> None
     |      
     |      Set the active selection list.
     |      The selection items on the given list will update the contents of the active selection
     |      list as indicated by the listAdjustment parameter.
     |      Valid listAdjustment values are:
     |        kReplaceList              #Totally replace the list with the given items.
     |        kXORWithList              #Any of the items which are already on the list will be removed.
     |                              #Any which are not already on the list will be added to the end
     |                              #of the list.
     |        kAddToList                    #Remove the items from the list.
     |        kAddToHeadOfList              #Add the items to the beginning of the list.
     |  
     |  setAnimSelectionMask(...)
     |      setAnimSelectionMask(mask) -> selfsetAnimSelectionMask(type) -> self
     |      
     |      Set the animation selection mask to the supplied value.
     |      
     |      * mask (MSelectionMask) - The selection mask.
     |      * type (int) - The selection type (see MSelectionMask.addMask() for a list of values).
     |  
     |  setComponentSelectionMask(...)
     |      setComponentSelectionMask(mask) -> selfsetComponentSelectionMask(type) -> self
     |      
     |      Set the component selection mask to the supplied value.
     |      
     |      * mask (MSelectionMask) - The selection mask.
     |      * type (int) - The selection type (see MSelectionMask.addMask() for a list of values).
     |  
     |  setDisableStow(...)
     |      setDisableStow(bool) -> None
     |      
     |      This method is used to make the visiblity of all Maya windows unchangable.
     |      If set to true, it disables any attempts to change the visiblity of any window.
     |      In addition, all popup windows will be supressed.
     |  
     |  setDisplayCVs(...)
     |      setDisplayCVs(MSelectionList, bool) -> None
     |      
     |      Controls drawing of control points in the specified selection list.
     |      
     |      The selection items on the given list will be marked for drawing. This
     |      overrides Maya's current draw list and allow, for example, the drawing
     |      of control points without being in vertex selection mode.
     |  
     |  setErrorLogPathName(...)
     |      setErrorLogPathName(string) -> None
     |      
     |      Determines the default path name of the error log file.
     |      Returns an empty string on failure.
     |  
     |  setHiliteList(...)
     |      setHiliteList(MSelectionList) -> None
     |      
     |      Sets the current hilite list. The current selection list is unchanged.
     |  
     |  setMiscSelectionMask(...)
     |      setMiscSelectionMask(mask) -> selfsetMiscSelectionMask(type) -> self
     |      
     |      Set the miscellaneous selection mask to the supplied value.
     |      
     |      * mask (MSelectionMask) - The selection mask.
     |      * type (int) - The selection type (see MSelectionMask.addMask() for a list of values).
     |  
     |  setObjectSelectionMask(...)
     |      setObjectSelectionMask(mask) -> selfsetObjectSelectionMask(type) -> self
     |      
     |      Set the object selection mask to the supplied value.
     |      
     |      * mask (MSelectionMask) - The selection mask.
     |      * type (int) - The selection type (see MSelectionMask.addMask() for a list of values).
     |  
     |  setOptionVarValue(...)
     |      setOptionVarValue(string, int) -> bool
     |      setOptionVarValue(string name, double) -> bool
     |      setOptionVarValue(string name, string) -> bool
     |      
     |      
     |      This method is used to set the option variable value of int, bool, string type
     |  
     |  setPreselectionHiliteList(...)
     |      setPreselectionHiliteList(MSelectionList) -> None
     |      
     |      Sets the objects for which Maya will display a preselection
     |      highlight in the viewports.
     |      
     |      The objects/components in the list will be drawn in Maya's
     |      preselection highlight style on the next viewport refresh
     |      (if preselection highlighting is enabled in the preferences).
     |      
     |      If preselection highlighting is not enabled, Maya will still
     |      store the list.
     |  
     |  setRichSelection(...)
     |      setRichSelection(MRichSelection) -> None
     |      
     |      Set the current rich selection.
     |  
     |  setSelectionMode(...)
     |      setSelectionMode(int) -> None
     |      
     |      Set the current selection mode.
     |      See selectionMode() for a list of valid modes.
     |  
     |  setTrackSelectionOrderEnabled(...)
     |      setTrackSelectionOrderEnabled() -> None
     |      
     |      Set whether Maya should maintain an active selection list which
     |      maintains object and component selection order.
     |  
     |  setYAxisUp(...)
     |      setYAxisUp() -> None
     |      
     |      This method sets the flag to identify which axis is Up, and
     |      rotates the ground plane around around the X-axis 90 degrees to get
     |      the Y-Up from Z-Up.
     |  
     |  setZAxisUp(...)
     |      setZAxisUp() -> None
     |      
     |      This method sets the flag to identify which axis is Up, and
     |      rotates the ground plane around around the X-axis 90 degrees to get
     |      the Y-Up from Y-Up.
     |  
     |  sourceFile(...)
     |      sourceFile(string) -> None
     |      
     |      Causes the MEL command engine to open the named file and execute
     |      the contents of the file as a MEL script.  If the provided fileName
     |      is a Unix absolute pathname, then that file is opened.  If a relative
     |      pathname is provided, the directories indicated by the environment
     |      variable, MAYA_SCRIPT_PATH, will be searched for a matching filename.
     |  
     |  startErrorLogging(...)
     |      startErrorLogging() -> None
     |      startErrorLogging(string)
     |      
     |      This method enables output to the API error log file specified by the path.
     |      If another error log file is already open this method time and date stamps
     |      the log, and closes it.
     |      The new error log is time and date stamped when it is opened.
     |      
     |      If the new path name is the same as the current path name, this method ensures
     |      that logging is enabled, but no other action is taken.
     |  
     |  stopErrorLogging(...)
     |      stopErrorLogging() -> None
     |      
     |      This method disables output to the API error log but does not close the log file.
     |  
     |  trackSelectionOrderEnabled(...)
     |      trackSelectionOrderEnabled() -> bool
     |      
     |      Returns whether the selection order is currerntly being tracked.
     |  
     |  unselect(...)
     |      unselect(MObject) -> None
     |      unselect(MDagPath, MObject) -> None
     |      
     |      Remove the given object/components from the active selection list.
     |      If components is null then the object will be unselected, otherwise
     |      the components will be unselected.
     |      
     |      Perform marquee type selection on the dag.  If an object intersects the
     |      selection rectangle, it is selected according to listAdjustment.
     |  
     |  unselectByName(...)
     |      unselectByName(string) -> None
     |      
     |      Removes objects matching the pattern from the active selection list.
     |  
     |  upAxis(...)
     |      upAxis() -> MVector
     |      
     |      This method returns the model's current up axis.
     |  
     |  viewFrame(...)
     |      viewFrame(double) -> None
     |      viewFrame(MTime) -> None
     |      
     |      Sets the global time to the specified time.  This function is optimized
     |      for sequential time values that are monotonically increasing.  While
     |      one can set the time randomly with this function, a significant
     |      performance hit will be incurred.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  kAddToHeadOfList = 4
     |  
     |  kAddToList = 2
     |  
     |  kBaseUIMode = 3
     |  
     |  kBatch = 1
     |  
     |  kInteractive = 0
     |  
     |  kLibraryApp = 2
     |  
     |  kRemoveFromList = 3
     |  
     |  kReplaceList = 0
     |  
     |  kSelectComponentMode = 1
     |  
     |  kSelectLeafMode = 3
     |  
     |  kSelectObjectMode = 0
     |  
     |  kSelectRootMode = 2
     |  
     |  kSelectTemplateMode = 4
     |  
     |  kSurfaceSelectMethod = 0
     |  
     |  kWireframeSelectMethod = 1
     |  
     |  kXORWithList = 1
    
    class MImage(__builtin__.object)
     |  Manipulate color data.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  create(...)
     |      create(width, height, channels=4, type=kByte) -> self
     |      
     |      Create a new MImage object. Allocates memory for an RGBA array of pixels
     |      of the given size. If an object was already in memory, it is released first.
     |      
     |      * width (unsigned int) - the desired image's width in pixels.
     |      * height (unsigned int) - the desired image's height in pixels.
     |      * channels (unsigned int) - the desired number of channels per pixel.
     |      * type (int) - the desired pixel format (kByte or kFloat, see MImage.pixelType() description for details.)
     |  
     |  depth(...)
     |      depth() -> int
     |      
     |      Get the color depth (in bytes) of the currently opened image.
     |  
     |  depthMap(...)
     |      depthMap() -> long
     |      
     |      Returns a long containing a C++ 'float' pointer which points to the depth data.
     |  
     |  filter(...)
     |      filter(sourceFormat, targetFormat, scale=1.0, offset=1.0) -> self
     |      
     |      Modify the content of the image by applying a filter.
     |      The dimension of the image remains the same; only the RGBA components get affected.
     |      
     |      * sourceFormat (MImageFilterFormat) - the format of the source image.
     |      * targetFormat (MImageFilterFormat) - the format of the resulting image.* scale (float) - vary depending on the source/target format.
     |      * offset (float) - vary depending on the source/target format.
     |      
     |      The scale argument for this filter can vary from -256.0 to 256.0, although typical values range from 1.0 to 10.0.
     |      The offset argument is currently ignored and should be left to the default value of 0.0.
     |  
     |  floatPixels(...)
     |      floatPixels() -> long
     |      
     |      Returns a long containing a C++ 'float' pointer which points to the pixel data.
     |      This data is uncompressed and tightly packed, of size (width * height * depth * sizeof( float)) bytes.
     |  
     |  getDepthMapRange(...)
     |      getDepthMapRange() -> [minValue, maxValue]
     |      
     |      Compute the minimum and maximum depth values (range) for any stored depth buffer.
     |  
     |  getDepthMapSize(...)
     |      getDepthMapSize() -> [width, height]
     |      
     |      Returns the size of the depth map buffer.
     |  
     |  getSize(...)
     |      getSize() -> [width, height]
     |      
     |      Get the width and height of the currently opened image.
     |  
     |  haveDepth(...)
     |      haveDepth() -> bool
     |      
     |      Returns True if this instance of MImage contains a depth map.
     |  
     |  isRGBA(...)
     |      isRGBA() -> bool
     |      
     |      Query flag which indicates whether the pixel information is in RGBA sequence or BGRA sequence.
     |      If no pixel data exists, then False will be returned.
     |  
     |  pixelType(...)
     |      pixelType() -> int
     |      
     |      Get the current pixel format of the image:  kUnknown    Format not known or invalid.
     |        kByte       One byte per channel, ranging from 0 to 255.
     |        kFloat      One float per channel, ranging from 0.0 to 1.0.
     |  
     |  pixels(...)
     |      pixels() -> long
     |      
     |      Returns a long containing a C++ 'unsigned char' pointer which points to the pixel data.
     |      This data is uncompressed and tightly packed, of size (width * height * depth) bytes.
     |      For the moment, pixels are always stored in a RGBA (depth=4 bytes) pixel format.
     |  
     |  readDepthMap(...)
     |      readDepthMap(pathname) -> self
     |      
     |      Reads the depth map from the specified file and place the result into the depth map array of this MImage instance.
     |  
     |  readFromFile(...)
     |      readFromFile(pathname, type=kByte) -> self
     |      
     |      Attempt to identify and open the specified image file.
     |      
     |      * pathname (string) - the full path of the image file that should be opened.
     |      * type (MPixelType) - the desired pixel format. kUnknown attempts to load the native pixel type.
     |  
     |  readFromTextureNode(...)
     |      readFromTextureNode(fileTextureObject, type=kByte) -> self
     |      
     |      Attempt to read the content of the given file texture node.
     |      
     |      
     |      * fileTextureObject (MObject) - an object that refers to the file texture node that should be read.
     |      * type (MPixelType) - the desired pixel format. kUnknown attempts to load the native pixel type.
     |  
     |  release(...)
     |      release() -> self
     |      
     |      Release the current image. If there is no current image, the call is ignored.
     |  
     |  resize(...)
     |      resize(width, height, preserveAspectRatio=True) -> self
     |      
     |      Resize the currently opened image to the specified dimension, or to the closest
     |      width/height that is preserves the original aspect ratio.* width (unsigned int) - the desired image's width in pixels.
     |      * height (unsigned int) - the desired image's height in pixels.
     |      * preserveAspectRatio (bool) - specifies whether the aspect ratio should be preserved or not.
     |               If this flag is set, the given width and height are interpreted as the maximum dimensions allowable.
     |  
     |  setDepthMap(...)
     |      setDepthMap(depth, width, heigth) -> self
     |      
     |      Specifies the depth map resolution and data.
     |      
     |      * depth (float*) - float buffer that contains depth values.
     |      * width (unsigned int) - the width of the depth buffer.
     |      * height (unsigned int) - the height of the depth buffer.
     |      
     |      * depth (MFloatArray) - float array that contains depth values.
     |      * width (unsigned int) - the width of the depth buffer.
     |      * height (unsigned int) - the height of the depth buffer.
     |  
     |  setFloatPixels(...)
     |      setFloatPixels(pixels, width, height, channels=4) -> self
     |      
     |      Copy the uncompressed pixels array passed in into the MImage.
     |      This array is tightly packed, of size (width * height * depth) bytes.
     |      For the moment, pixels are always stored in a RGBA (depth=4 bytes) pixel format.
     |      
     |      * pixels (float*) - the variable containing a block of pixels.
     |      * width (unsigned int) - the variable that will be set to the image's width in pixels.
     |      * height (unsigned int) - the variable that will be set to the image's height in pixels.
     |      * channels (unsigned int) - the number of channels per pixel.
     |  
     |  setPixels(...)
     |      setPixels(pixels, width, height) -> self
     |      
     |      Copy the uncompressed pixels array passed in into the MImage.
     |      This array is tightly packed, of size (width * height * depth) bytes.
     |      For the moment, pixels are always stored in a RGBA (depth=4 bytes) pixel format.
     |      
     |      * pixels (unsigned char*) - the variable containing a block of pixels.
     |      * width (unsigned int) - the variable that will be set to the image's width in pixels.
     |      * height (unsigned int) - the variable that will be set to the image's height in pixels.
     |  
     |  setRGBA(...)
     |      setRGBA(bool) -> self
     |      
     |      Sets a flag to indicate that pixel information is in RGBA sequence or BGRA sequence.
     |      Pixel data must have been allocated before this call is made.
     |  
     |  verticalFlip(...)
     |      verticalFlip() -> bool
     |      
     |      Flips the image vertically.
     |  
     |  writeToFile(...)
     |      writeToFile(pathname, outputFormat=iff) -> self
     |      
     |      Save the content of this image in a file. By default, the file is saved in IFF format.
     |      Optionally, the file can also be converted in a variety of image formats.
     |  
     |  writeToFileWithDepth(...)
     |      writeToFileWithDepth(pathname, outputFormat=iff, writeDepth=False) -> self
     |      
     |      Save the content of this image in a file. By default, the file is saved in IFF format.
     |      Optionally, the file can also be converted in a variety of image formats.
     |      If the writeDepth parameter is True then any depth information stored in MImage will be written to file.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  filterExists(...)
     |      filterExists(sourceFormat, targetFormat) -> bool
     |      
     |      Return whether or not a given source format can be directly converted to a given target format.
     |      
     |      * sourceFormat (MImageFilterFormat) - the format of the source image.
     |      * targetFormat (MImageFilterFormat) - the format of the resulting image.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kByte = 1
     |  
     |  kFloat = 2
     |  
     |  kHeightFieldBumpFormat = 1
     |  
     |  kNoFormat = 0
     |  
     |  kNormalMapBumpFormat = 2
     |  
     |  kUnknown = 0
     |  
     |  kUnknownFormat = 3
    
    class MInt64Array(__builtin__.object)
     |  Array of MInt64 values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MIntArray(__builtin__.object)
     |  Array of int values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MItDag(__builtin__.object)
     |  DAG Iterator.
     |  
     |  Use the DAG iterator to traverse the DAG either depth first or breadth
     |  first, visiting each node and, if desired, retrieving the node (as an
     |  MObject).  The DAG iterator provides a basic filtering capability, so
     |  that DAG node retrieval can be limited to a  specific type (MFn.Type)
     |  of node.  With filtering enabled the iterator checks to see if the node
     |  is compatible with the type of Function Set specified by the filter.
     |  See MFn.Type for a list of all valid Function set types.
     |  
     |  Since each object, if retrieved, is returned as an MObject, the
     |  MObject.hasFn() method can be used to further check for compatible
     |  function set types since an MObjects may be compatible with more than
     |  one function set).
     |  
     |  Any compatible Function Set can be attached to the retrieved object to
     |  query or or edit it.  Often you will want to use the DAG node Function
     |  Set (MFnDagNode), which is compatible with all DAG objects, to perform
     |  basic queries on each node as the iterator traverses the DAG.
     |  
     |  The iterator also provides the capability to reset the root of the
     |  iteration, the type of traversal, and the filter.
     |  
     |  Additionally, the iterator can be queried for the root, mode and type
     |  of traversal, and to determine if the the traversal has been completed.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  currentItem(...)
     |      currentItem() -> MObject
     |      
     |      Retrieves DAG node to which the iterator points.
     |  
     |  depth(...)
     |      depth() -> integer
     |      
     |      Returns the height or depth of the current node in the DAG relative to the
     |      root node.  The root node has a depth of zero.
     |  
     |  fullPathName(...)
     |      fullPathName() -> MString
     |      
     |      Return a string representing the full path from the root of the dag to this object.
     |  
     |  getAllPaths(...)
     |      getAllPaths() -> MDagPathArray
     |      
     |      Determines all DAG Paths to current item in the iteration.
     |  
     |  getPath(...)
     |      getPath() -> MDagPath
     |      
     |      Determines a DAG Path to the current item in the iteration.
     |  
     |  instanceCount(...)
     |      instanceCount(total) -> Integer
     |      
     |      Determines the number of times the current item (DAG node) in the iteration
     |      is instanced.
     |      
     |      If total is False the number of direct instances is returned, which
     |      is the same as the node's parent count.
     |      
     |      If total is True the total number of instances is returned, including
     |      indirect instances resulting from instancing higher up the DAG hierarchy
     |      (i.e. one or more of the node's ancestors also has multiple instances).
     |  
     |  isDone(...)
     |      isDone() -> Bool
     |      
     |      Indicates end of iteration path.
     |  
     |  isInstanced(...)
     |      isInstanced(indirect = True) -> Bool
     |      
     |      Determines whether the current item (DAG node) in the iteration is directly
     |      or indirectly instanced.
     |      
     |      If indirect instance flag is False, the result is True if and only if the
     |      Node itself is multiply instanced (node.parentCount > 1).
     |      
     |      If the indirect flag is True, the result is True if and only if the Node
     |      itself is multiply instanced (node.parentCount > 1) or if the Node is not
     |      multiply instanced, but it has a directly instanced parent
     |      (node.parentCount()=1 and parent.parentCount >1).
     |      
     |      * indirect (Bool) -Indirect instance flag, defaults to True.
     |  
     |  next(...)
     |      next() -> self
     |      
     |      Moves to the next node matching the filter in the graph.
     |  
     |  partialPathName(...)
     |      partialPathName() -> MString
     |      
     |      Return a string representing the partial path from the root of the
     |      dag to this object.
     |      
     |      The partial path is the minimum path that is still unique. This string
     |      may contain wildcards.
     |  
     |  prune(...)
     |      prune() -> self
     |      
     |      Prunes iteration tree at current node.
     |  
     |  reset(...)
     |      reset() -> self
     |      reset(rootObject, traversalType = MItDag.kDepthFirst, filterType = MFn.kInvalid) -> self
     |      reset(rootPath, traversalType = MItDag.kDepthFirst, filterType = MFn.kInvalid) -> self
     |      reset(dagInfoObject, rootObject OR rootPath, traversalType = MItDag.kDepthFirst) -> self
     |      
     |      
     |      Resets the iterator.
     |      When used without parameters, the iterator is reset to the previous traversal setting.
     |      If a dagInfoObject is used, then the type of the provided rootObject or rootPath must
     |      match dagInfoObject.objectType.
     |      
     |         rootObject (MObject) - Root node to begin the next traversal.
     |         rootPath (MDagPath) - Root path to to begin the next traversal. Useful with instances.
     |         dagInfoObject (MIteratorType) - Iterator object having info on filter or filterlist.
     |         traversalType (MItDag.TraversalType) - Enumerated type that determines the direction of the traversal, defaults to kDepthFirst.
     |         filterType (MFn.Type) - Function set type, defaults to MFn.kInvalid
     |  
     |  root(...)
     |      root() -> MObject
     |      
     |      Returns the root (start node) of the current traversal.
     |      The constructor sets the root of traversal to the world node.
     |      The root can be changed by the reset() method.
     |  
     |  traversalType(...)
     |      traversalType() -> MItDag.TraversalType
     |      
     |      Returns the direction of the traversal.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  traverseUnderWorld
     |      Specifies whether underworld traversal is turned on (Bool).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kBreadthFirst = 2
     |  
     |  kDepthFirst = 1
     |  
     |  kInvalidType = 0
    
    class MItDependencyGraph(__builtin__.object)
     |  Dependency Graph Iterator.
     |  
     |  Iterate over Dependency Graph (DG) Nodes or Plugs starting at a specified
     |  root Node or Plug.
     |  
     |  
     |  Set and query the root of the iteration.
     |  
     |  
     |  Set and query the direction (downstream or upstream), traversal priority
     |  (depth first or breadth first) and level of detail (Node level or Plug
     |  level) of the iteration.
     |  
     |  
     |  Set and disable a filter to iterate over only specific types (MFn.Type) of
     |  Nodes.
     |  
     |  
     |  Reset the root, filter, direction, traversal priority and level of detail
     |  of the iteration.
     |  
     |  
     |  Prune branches of the graph from iteration.
     |  
     |  
     |  In Maya, all geometry, animation and rendering information is implemented
     |  in nodes in the Dependency Graph (DG).  The DG includes the Directed Acyclic
     |  Graph (DAG).  Therefore, all DAG nodes are also DG nodes.  The data on nodes
     |  is associated with Attributes.  Attributes on nodes are connected to
     |  Attributes on other nodes via plugs on the Attributes.  Plugs are, in effect
     |  the external intefaces of Attributes.
     |  
     |  
     |  The DG Iterator Class (MItDependencyGraph) provides methods for iterating
     |  over either nodes or plugs, as well as methods for setting and querying the
     |  characteristics and behaviour of the iterator.
     |  
     |  
     |  This iterator will traverse all connected attributes upstream or
     |  downstream from the root node of the traversal. For non root nodes,
     |  only attributes that are affected by the incoming attribute to that
     |  node will be traversed.  Hence, only nodes to which data from the root
     |  node is flowing will be traversed. 
     |  
     |  
     |  By default, the iterator does not traverse world-space attribute
     |  dependencies (an example of a world-space dependency is that
     |  translateX affects worldMatrix). The
     |  setTraversalOverWorldSpaceDependents method can be used to enable such
     |  traversal. Note that even when world-space traversal is enabled, the
     |  iterator will only iterate to connected nodes. It does not iterate up
     |  and down through the dag hierarchy.
     |  
     |  
     |  The DG Iterator is used in conjunction with the Maya Object (MObject), plug
     |  (MPlug), Maya Object Array (MObjectArray) and plug Array (MPlugArray)
     |  classes.
     |  
     |  
     |  It is also useful to use Function Sets specific to the nodes returned by
     |  the iterator to query and modify the nodes in the DG.
     |  
     |  
     |  The DG itself can be modified using a DG Modifer (MDGModifier).
     |  
     |  
     |  Additionally, nodes can be added to and retrieved from selection lists using
     |  the Selection List (MSelectionList) class and Selection List Iterator
     |  (MItSelectionList).  This can be useful for obtaining the root node for an
     |  iteration.
     |  
     |  
     |  Attributes on the nodes can be manipulated using the Attribute Function Set
     |  (MFnAttribute) and its derivations.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  currentNode(...)
     |      currentNode() -> MObject
     |      
     |      Retrieves the current node of the iteration.  Results in a null object on
     |      failure or if the node is of a unrecognized type.
     |  
     |  currentNodeHasUnknownType(...)
     |      currentNodeHasUnknownType() -> Bool
     |      
     |      Indicates whether or not the current node has an unrecognised
     |      type.  This is useful if an unexpected failure is encountered
     |      in the next() or currentNode() methods.
     |  
     |  currentPlug(...)
     |      currentPlug() -> MPlug
     |      
     |      Retrieves the current plug of the iteration.  Results in a null
     |      plug on failure.
     |  
     |  getNodePath(...)
     |      getNodePath() -> MObjectArray
     |      
     |      Retrieves the direct path from the current node to the root
     |      node.  Path does not include the current node.
     |      State of the provided array is undefined if this method fails.
     |  
     |  getNodesVisited(...)
     |      getNodesVisited() -> MObjectArray
     |      
     |      Retrieves all nodes visited during the iteration.
     |      State of the provided array is undefined if this method fails.
     |  
     |  getPlugPath(...)
     |      getPlugPath() -> MPlugArray
     |      
     |      Retrieves the direct path from the current plug to the root
     |      plug, with the current plug in element 0 of the array and the root
     |      plug in the final element of the array.
     |      
     |      Once the iterator is done (i.e. isDone() returns True) there is no
     |      longer a current plug and this method will return an empty array.
     |      
     |      If this method fails the state of the returned array is undefined.
     |  
     |  getPlugsVisited(...)
     |      getPlugsVisited() -> MPlugArray
     |      
     |      Retrieves all plugs visited during the iteration.
     |      State of the provided array is undefined if this method fails.
     |  
     |  isDone(...)
     |      isDone() -> Bool
     |      
     |      Indicates whether or not all nodes or plugs have been iterated over
     |      in accordance with the direction, traversal, level and filter.
     |      If a valid filter is set, the iterator only visits those nodes that match
     |      the filter.
     |  
     |  next(...)
     |      next() -> self
     |      
     |      Iterates to the next node or plug in accordance with the
     |      direction, traversal, level and filter.  If a valid filter is
     |      set, the iterator only visits those nodes that match the
     |      filter.  When filtering is enabled nodes that have unknown type
     |      are treated as non-matching nodes.  With filtering disabled,
     |      iteration to a node with an unknown type is treated as a
     |      failure.  An attempt to iterate when there is nothing left to
     |      iterate over has no effect.
     |  
     |  previousPlug(...)
     |      previousPlug() -> MPlug
     |      
     |      Retrieves the previous plug of the iteration.  Results in a
     |      null plug on failure.  Null plug may also indicate that the
     |      current plug is the root plug.
     |  
     |  prune(...)
     |      prune() -> self
     |      
     |      Prunes the search path at the current plug.  Iterator will not
     |      visit any of the plugs connected to the pruned plug.
     |  
     |  reset(...)
     |      reset() -> self
     |      
     |      Clears iterator data and resets the iterator to the root node
     |      or plug.  If a valid filter is enabled, the iterator
     |      automatically advances to the next node after the root node
     |      that matches the filter.  If no matching node is found an
     |      exception is thrown.
     |  
     |  resetFilter(...)
     |      resetFilter() -> self
     |      
     |      Resets the node or plug filter to default, MFn.kInvalid
     |      (filter disabled).  Disables pruning on the filter (default).
     |      Resets the iterator.
     |  
     |  resetTo(...)
     |      resetTo(rootObject, filter = MFn.kInvalid, direction = MItDependencyGraph.kDownstream, traversal = MItDependencyGraph.kDepthFirst, level = MItDependencyGraph.kNodeLevel) -> self
     |      resetTo(rootPlug, filter = MFn.kInvalid, direction = MItDependencyGraph.kDownstream, traversal = MItDependencyGraph.kDepthFirst, level = MItDependencyGraph.kNodeLevel) -> self
     |      resetTo(infoObject, rootObject OR rootPlug, direction = MItDependencyGraph.kDownstream, traversal = MItDependencyGraph.kDepthFirst, level = MItDependencyGraph.kNodeLevel) -> self
     |      
     |      
     |      Clears iterator data and re-initializes the iterator.  If a
     |      valid filter is provided, the iterator automatically advances
     |      to the next node after the root node that matches the filter.
     |      If no matching node is found an exception is thrown.
     |      
     |      
     |         rootObject (MObject) - Root node to begin the next traversal.
     |         rootPlug (MPlug) - Root plug to to begin the next traversal.
     |         infoObject (MIteratorType) - Iterator object having info on filter or filterlist.
     |         filter (MFn.Type) - Function set type, defaults to MFn.kInvalid
     |         direction (MItDependencyGraph.Direction) - Primary direction of iteration, defaults to MItDependencyGraph.kDownstream
     |         traversal (MItDependencyGraph.Traversal) - Order of traversal, defaults to MItDependencyGraph.kDepthFirst
     |         level (MItDependencyGraph.Level) - Level of detail of the iteration, defaults to MItDependencyGraph.kNodeLevel
     |  
     |  rootNode(...)
     |      rootNode() -> MObject
     |      
     |      Retrieves the root node of the iteration.
     |  
     |  rootPlug(...)
     |      rootPlug() -> MPlug
     |      
     |      Retrieves the root plug of the iteration.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  currentDirection
     |      Direction of the iteration through the graph (MItDependencyGraph.Direction).
     |  
     |  currentFilter
     |      Current node type filter (MFn.Type) .
     |  
     |  currentLevel
     |      Level of the iteration through the graph (MItDependencyGraph.Level).
     |  
     |  currentTraversal
     |      Traversal mode of the iteration through the graph (MItDependencyGraph.Traversal).
     |  
     |  pruningOnFilter
     |      Whether or not the iteration path is pruned automatically at nodes or plugs which do not match the filter (Bool).
     |  
     |  traversingOverWorldSpaceDependents
     |      Whether the iterator is set to traverse world-space attribute dependencies (Bool).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kBreadthFirst = 1
     |  
     |  kDepthFirst = 0
     |  
     |  kDownstream = 0
     |  
     |  kNodeLevel = 0
     |  
     |  kPlugLevel = 1
     |  
     |  kUpstream = 1
    
    class MItDependencyNodes(__builtin__.object)
     |  Dependency Node iterator.
     |  
     |  Use the dependency node iterator to traverse all the nodes in Maya's
     |  Dependency Graph.
     |  
     |  With filtering enabled, the iterator checks to see if the node is
     |  compatible with the type specified by the filter.  See MFn.Type for a
     |  list of all valid types.
     |  
     |  Since MObjects may be compatible with more than one type (nodes are
     |  organised in a hierarchy) the MObject.hasFn() method can be used to
     |  further check for compatible types.
     |  
     |  Any compatible Function Set can be attached to the retrieved object to
     |  query or or edit it.  Often you will want to use the dependency node
     |  function set (MFnDependencyNode), which is compatible with all
     |  dependency nodes, to perform queries on each node as the iterator
     |  traverses the Dependency Graph.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  isDone(...)
     |      isDone() -> Bool
     |      
     |      Indicates end of the iteration.
     |  
     |  next(...)
     |      next() -> self
     |      
     |      Moves to the next node matching the filter.  If the filter
     |      is set to kInvalid, this method advances to the next
     |      DG node without doing any filtering.
     |  
     |  reset(...)
     |      reset() -> self
     |      reset(filterType = MFn.kInvalid) -> self
     |      reset(dagInfoObject) -> self
     |      
     |      
     |      Resets the iterator.
     |      
     |      
     |         dagInfoObject (MIteratorType) - Iterator object having info on filter or filterlist.
     |         filterType (MFn.Type) - Function set type, defaults to MFn.kInvalid.
     |  
     |  thisNode(...)
     |      thisNode() -> MObject
     |      
     |      Retrieves the dependency node to which the iterator points.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MItMeshEdge(__builtin__.object)
     |  An iterator for traversing a mesh's edges.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  center(...)
     |      center(space=kObject) -> MPoint
     |      
     |      Returns the center point of the edge, in the given transformation space.
     |      
     |      * space (MSpace constant) - The  transformation space
     |  
     |  connectedToEdge(...)
     |      connectedToEdge(index) -> bool
     |      
     |      Determines whether the given edge is connected to the current edge.
     |      
     |      * index (int) - Index of edge to check.
     |  
     |  connectedToFace(...)
     |      connectedToFace(index) -> bool
     |      
     |      Determines whether the given face contains the current edge.
     |      
     |      * index (int) - Index of face to check.
     |  
     |  count(...)
     |      count() -> int
     |      
     |      Return the number of edges in the iteration
     |  
     |  currentItem(...)
     |      currentItem() -> MObject
     |      
     |      Returns the current edge in the iteration as a component.
     |      
     |      Components are used to specify one or more edges and are useful in operating on groups of non-contiguous edges for a surface.
     |      Components do not contain any information about the surface that they refer to so an MDagPath must be specified when dealing with components.
     |  
     |  geomChanged(...)
     |      geomChanged() -> self
     |      
     |      Resets the geom pointer in the MItMeshEdge. If you're using MFnMesh to
     |      update Normals or Color per vertex while iterating, you must call geomChanged
     |      on the iterator immediately after the MFnMesh call to make sure that your
     |      geometry is up to date. A crash may result if this method is not called.
     |      A similar approach must be taken for updating upstream vertex tweaks
     |      with an MPlug. After the update, call this method.
     |  
     |  getConnectedEdges(...)
     |      getConnectedEdges() -> MIntArray
     |      
     |      Returns the indices of edges connected to the current edge.
     |  
     |  getConnectedFaces(...)
     |      getConnectedFaces() -> MIntArray
     |      
     |      Returns the indices of the faces connected to the current edge.
     |      Normally a boundary edge will only have one face connected to it and
     |      an internal edge will have two, but if the mesh has manifold geometry
     |      then the edge may have three or more faces connected to it.
     |  
     |  index(...)
     |      index() -> int
     |      
     |      Returns the index of the current edge in the iteration.
     |  
     |  isDone(...)
     |      isDone() -> bool
     |      
     |      Indicates if all of the edges have been traversed yet.
     |  
     |  length(...)
     |      length(space=kObject) -> float
     |      
     |      Returns the length of the edge, in the given transformation space.
     |      
     |      * space (MSpace constant) - The  transformation space
     |  
     |  next(...)
     |      next() -> self
     |      
     |      Advances to the next edge in the iteration.
     |  
     |  numConnectedEdges(...)
     |      numConnectedEdges() -> int
     |      
     |      Returns the number of edges connected to the current edge.
     |  
     |  numConnectedFaces(...)
     |      numConnectedFaces() -> int
     |      
     |      Returns the number of faces connected to the current edge.
     |  
     |  onBoundary(...)
     |      onBoundary() -> bool
     |      
     |      Determines if the current edge is a border edge.
     |  
     |  point(...)
     |      point(whichVertex, space=kObject) -> MPoint
     |      
     |      Returns the position of one of the current edge's vertices, int the
     |      given transformation space.
     |      
     |      * whichVertex    (0 or 1) - Which of the edge's two vertices to return
     |      * space (MSpace constant) - The transformation space
     |  
     |  reset(...)
     |      reset() -> self
     |      reset(mesh) -> self
     |      reset(mesh, component=None) -> self
     |      
     |      Reset the iterator to the first edge of the mesh.
     |      
     |      Reset the iterator to the first edge of the specified mesh
     |      
     |      * mesh (MObject) - The polygon for the iteration
     |      
     |      Reset the iterator with the given mesh and component.
     |      If component is None then the iteration will be for all edges in the mesh.
     |      
     |      * mesh (MDagPath) - The mesh to iterate over
     |      * component (MObject) - The edges of the mesh to iterate over
     |  
     |  setIndex(...)
     |      setIndex(index) -> int
     |      
     |      Sets the index of the current edge to be accessed. The current edge
     |      will no longer be in sync with any previous iteration.
     |      
     |      Returns the index of the edge which was current before the change.
     |      
     |      
     |      * index (int) - The index of desired edge to access.
     |  
     |  setPoint(...)
     |      setPoint(point, whichVertex, space=kObject) -> self
     |      
     |      Sets the position of one of the current edge's vertices, in the given
     |      transformation space.
     |      
     |      * point       (MPoint) - The new position for the specified vertex
     |      * whichVertex (0 or 1) - Which of the edge's 2 vertices to set.
     |      * space (MSpace constant) - The transformation space
     |  
     |  updateSurface(...)
     |      updateSurface() -> self
     |      
     |      Tells Maya that mesh has been changed and needs to redraw itself.
     |  
     |  vertexId(...)
     |      vertexId(whichVertex) -> int
     |      
     |      Returns the global index (as opposed to face-relative index) of one of
     |      the edge's vertices.
     |      
     |      * whichVertex (0 or 1) - Which of the edge's 2 vertices to use.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  isSmooth
     |      True if the edge is smooth, False if it is hard.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MItMeshFaceVertex(__builtin__.object)
     |  An iterator for traversing a mesh's face vertices.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  currentItem(...)
     |      currentItem() -> MObject
     |      
     |      Returns the current faceVertex as a double-indexed component.
     |  
     |  faceId(...)
     |      faceId() -> int
     |      
     |      Returns the current face index.
     |  
     |  faceVertexId(...)
     |      faceVertexId() -> int
     |      
     |      Returns the relative index of the vertex within the current face. This
     |      index together with the faceId can be used for a fast access to get
     |      various info stored per vertex (normals, uvs, colors).
     |  
     |  geomChanged(...)
     |      geomChanged() -> self
     |      
     |      Resets the geom pointer in the MItMeshFaceVertex. If you're using
     |      MFnMesh to update Normals or Color per vertex while iterating, you
     |      must call geomChanged on the iterator immediately after the MFnMesh
     |      call to make sure that your geometry is up to date. A crash may result
     |      if this method is not called. A similar approach must be taken for
     |      updating upstream vertex tweaks with an MPlug. After the update, call
     |      this method.
     |  
     |  getBinormal(...)
     |      getBinormal(space=MSpace.kObject, uvSet='') -> MVector
     |      
     |      Returns the face vertex binormal associated with the UV set.
     |  
     |  getColor(...)
     |      getColor(colorSetName='') -> MColor
     |      
     |      Returns a color of the current face vertex.
     |  
     |  getColorIndex(...)
     |      getColorIndex(colorSetName='') -> int
     |      
     |      Return a color index of the current face vertex.
     |  
     |  getNormal(...)
     |      getNormal(space=MSpace.kObject) -> MVector
     |      
     |      Returns the face vertex normal.
     |  
     |  getTangent(...)
     |      getTangent(space=MSpace.kObject, uvSet='') -> MVector
     |      
     |      Returns the face vertex tangent associated with the given UV set. The
     |      tangent is defined as the surface tangent of the polygon running in
     |      the U direction.
     |  
     |  getUV(...)
     |      getUV(uvSet='') -> (float, float)
     |      
     |      Returns the texture coordinate for the current face vertex.
     |  
     |  getUVIndex(...)
     |      getUVIndex(uvSet='') -> int
     |      
     |      Returns the index of the texture coordinate for the current face
     |      vertex. This index refers to an element of the mesh's texture
     |      coordinate array as returned by MFnMesh::getUVs().
     |  
     |  hasColor(...)
     |      hasColor() -> bool
     |      
     |      Returns whether the current face vertex has a color-per-vertex set.
     |  
     |  hasUVs(...)
     |      hasUVs(uvSet='') -> bool
     |      
     |      Returns whether the current face vertex has UVs mapped in the given
     |      set.
     |  
     |  isDone(...)
     |      isDone() -> bool
     |      
     |      Indicates if all of the face vertices have been traversed.
     |  
     |  next(...)
     |      next() -> self
     |      
     |      Advances to the next face vertex in the iteration.
     |  
     |  normalId(...)
     |      normalId() -> int
     |      
     |      Returns the normal index for the specified vertex. This index refers
     |      to an element in the normal array returned by MFnMesh::getNormals().
     |      These normals are per-face per-vertex normals.
     |  
     |  position(...)
     |      position(space=MSpace.kObject) -> MPoint
     |      
     |      Returns the position of the current face vertex.
     |  
     |  reset(...)
     |      reset() -> self
     |      reset(mesh) -> self
     |      reset(mesh, component=None) -> self
     |      
     |      Reset the iterator to the first face vertex of the mesh.
     |      
     |      Reset the iterator to the first face vertex of the specified mesh.
     |      
     |      * mesh (MObject) - The mesh for the iteration
     |      
     |      Reset the iterator with the given mesh and component.
     |      If component is None then the iteration will be for all face vertices in the mesh.
     |      
     |      * mesh (MDagPath) - The mesh to iterate over
     |      * component (MObject) - The faces of the mesh to iterate over
     |  
     |  setIndex(...)
     |      setIndex(faceId, faceVertexId) -> (oldFaceId, oldFaceVertexId)
     |      
     |      Sets the index of the current face vertex to be accessed. The current
     |      face vertex will no longer be in sync with any previous iteration.
     |      
     |      Returns the indices of the old face and vertex.
     |      
     |      
     |      * faceId (int) - Index of desired face to access.
     |      * faceVertexId (int) - Face-relative index of desired vertex to access.
     |      * oldFaceId (int) - Index of the face which was current before the change.
     |      * oldFaceVertexId (int) - Face-relative index of the vertex which was current before the change.
     |  
     |  tangentId(...)
     |      tangentId() -> int
     |      
     |      Returns the tangent index for the current face vertex. This index
     |      refers to an element in the array returned by MFnMesh::getTangents.
     |      These tangents are per-face per-vertex.
     |  
     |  updateSurface(...)
     |      updateSurface() -> self
     |      
     |      Tells Maya that mesh has been changed and needs to redraw itself.
     |  
     |  vertexId(...)
     |      vertexId() -> int
     |      
     |      Returns the global (as opposed to face-relative) index of the
     |      current vertex.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MItMeshPolygon(__builtin__.object)
     |  This class is the iterator for polygonal surfaces (meshes).
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  center(...)
     |      center(space=kObject) -> MPoint
     |      
     |      Return the position of the center of the current polygon
     |      
     |      * space (int) - The coordinate system for this operation
     |  
     |  count(...)
     |      count() -> int
     |      
     |      Return the number of polygons in the iteration
     |  
     |  currentItem(...)
     |      currentItem() -> MObject
     |      
     |      Get the current polygon in the iteration as a component.
     |      
     |      Components are used to specify one or more polygons and are usefull in operating on groups of non-contiguous polygons for a surface.
     |      Components do not contain any information about the surface that they refer to so an MDagPath must be specified when dealing with components.
     |  
     |  geomChanged(...)
     |      geomChanged() -> self
     |      
     |      Reset the geom pointer in the MItMeshPolygon. This is now being handled automatically inside the iterator, and users should no longer need to call this method directly to sync up the iterator to changes made by MFnMesh
     |  
     |  getArea(...)
     |      getArea(space=kObject) -> float
     |      
     |      This method gets the area of the face
     |      
     |      * space (int) - World Space or Object Space
     |  
     |  getColor(...)
     |      getColor(colorSetName=None) -> MColor
     |      getColor(vertexIndex) -> MColor
     |      
     |      This method gets the color of the specified vertex in this face
     |      
     |      * index (int) - The face-relative vertex index on this face
     |      
     |      Or the average color of the all the vertices in this face
     |      
     |      * colorSetName (string) - Name of the color set.
     |  
     |  getColorIndex(...)
     |      getColorIndex(vertexIndex, colorSetName=None) -> int
     |      
     |      This method returns the colorIndex for a vertex of the current face.
     |      
     |      * vertexIndex (int) - Face-relative index of vertex.
     |      * colorSetName (string) - Name of the color set.
     |  
     |  getColorIndices(...)
     |      getColorIndices(colorSetName=None) -> MIntArray
     |      
     |      This method returns the colorIndices for each vertex on the face.
     |      
     |      * colorSetName (string) - Name of the color set.
     |  
     |  getColors(...)
     |      getColors(colorSetName=None) -> MColorArray
     |      
     |      This method gets the color of the each vertex in the current face.
     |      
     |      * colorSetName (string) - Name of the color set.
     |  
     |  getConnectedEdges(...)
     |      getConnectedEdges() -> MIntArray
     |      
     |      This method gets the indices of the edges connected to the vertices of the current face, but DOES not include the edges contained in the current face
     |  
     |  getConnectedFaces(...)
     |      getConnectedFaces() -> MIntArray
     |      
     |      This method gets the indices of the faces connected to the current face.
     |  
     |  getConnectedVertices(...)
     |      getConnectedVertices() -> MIntArray
     |      
     |      This method gets the object-relative indices of the vertices surrounding the vertices of the current face, but does not include the vertices of the current face
     |  
     |  getEdges(...)
     |      getEdges() -> MIntArray
     |      
     |      This method gets the indices of the edges contained in the current face.
     |  
     |  getNormal(...)
     |      getNormal(space=kObject) -> MVector
     |      getNormal(verexIndex, space=kObject) -> MVector
     |      
     |      Return the face normal of the current polygon.
     |      
     |      * space (int) - The transformation space
     |      
     |      Returns the vertex-face normal for the vertex in the current polygon.
     |      
     |      * index (int) - face-relative vertex index of the vertex whose normal to retrieve
     |      * space (int) - The transformation space
     |  
     |  getNormals(...)
     |      getNormals(space=kObject) -> MVectorArray
     |      
     |      Returns the normals for all vertices in the current face
     |      
     |      * space (int) - The transformation space
     |  
     |  getPointAtUV(...)
     |      getPointAtUV(uvPoint, space=kObject, uvSet=None, tolerance=0) -> MPoint
     |      
     |      Return the position of the point at the given UV value in the current polygon.
     |      
     |      * uvPoint ([float, float]) - The UV value to try to locate
     |      * space (int) - The coordinate system for this operation
     |      * uvSet (string) - UV set to work with
     |      * tolerance (float) - tolerance value to compare float data type
     |  
     |  getPoints(...)
     |      getPoints(space=kObject) -> MPointArray
     |      
     |      Retrieves the positions of the vertices on the current face/polygon that the iterator is pointing to. Vertex positions will be inserted into the given array and will be indexed using face-relative vertex IDs (ie. ordered from 0 to (vertexCount of the face) - 1), which should not be confused with the vertexIDs of each vertex in relation to the entire mesh object. 
     |      
     |      * space (int) - The coordinate system for this operation
     |  
     |  getTriangle(...)
     |      getTriangle(localTriIndex, space=kObject) -> [MPointArray, MIntArray]
     |      
     |      Get the vertices and vertex positions of the given triangle in the current face's triangulation.
     |      
     |      * localTriIndex (int) - Local index of the desired triangle in this face
     |      * space (int) - World Space or Object Space
     |  
     |  getTriangles(...)
     |      getTriangles(space=kObject) -> [MPointArray, MIntArray]
     |      
     |      Get the vertices and vertex positions of all the triangles in the current face's triangulation
     |      
     |      * space (int) - World Space or Object Space
     |  
     |  getUV(...)
     |      getUV(vertexId, uvSet=None) -> [float, float]
     |      
     |      Return the texture coordinate for the given vertex.
     |      
     |      * vertex (int) - The face-relative vertex index to get UV for
     |      * uvSet (string) - UV set to work with
     |  
     |  getUVArea(...)
     |      getUVArea(uvSet=None) -> float
     |      
     |      This method gets the UV area of the face
     |      
     |      * uvSet (string) - UV set to work with
     |  
     |  getUVAtPoint(...)
     |      getUVAtPoint(pt, space=kObject, uvSet=None) -> [float, float]
     |      
     |      Find the point closest to the given point in the current polygon, and return the UV value at that point.
     |      
     |      * pt (MPoint) - The point to try to get UV for
     |      * space (int) - The coordinate system for this operation
     |      * uvSet (string) - UV set to work with
     |  
     |  getUVIndex(...)
     |      getUVIndex(vertex, uvSet=None) -> int
     |      
     |      Returns the index of the texture coordinate for the given vertex.
     |      This index refers to an element of the texture coordinate array for the polygonal object returned by MFnMesh.getUVs.
     |      
     |      * vertex (int) - The face-relative vertex index of the current polygon
     |      * uvSet (string) - UV set to work with
     |  
     |  getUVIndexAndValue(...)
     |      getUVIndexAndValue(vertex, uvSet=None) -> [int, float, float]
     |      
     |      Return the index and value of the texture coordinate for the given vertex. This index refers to an element of the texture coordinate array for the polygonal object returned by MFnMesh.getUVs.
     |      
     |      * vertex (int) - The face-relative vertex index of the current polygon
     |      * uvSet (string) - UV set to work with
     |  
     |  getUVSetNames(...)
     |      getUVSetNames() -> list of strings
     |      
     |      This method is used to find the UV set names mapped to the current face
     |  
     |  getUVs(...)
     |      getUVs(uvSet=None) -> [MFloatArray, MFloatArray]
     |      
     |      Return the all the texture coordinates for the vertices of this face (in local vertex order).
     |      
     |      * uvSet (string) - UV set to work with
     |  
     |  getVertices(...)
     |      getVertices() -> MIntArray
     |      
     |      This method gets the indices of the vertices of the current face
     |  
     |  hasColor(...)
     |      hasColor() -> bool
     |      hasColor(localVertexIndex) -> bool
     |      
     |      This method determines whether the current face has color-per-vertex set for any or the given vertex
     |      
     |      * localVertexIndex (int) - face-relative vertex index to check for color on
     |  
     |  hasUVs(...)
     |      hasUVs(uvSet=None) -> bool
     |      
     |      Tests whether this face has UV's mapped or not (either all the vertices for a face should have UV's, or none of them do, so the UV count for a face is either 0, or equal to the number of vertices).
     |      
     |      * uvSet (string) - UV set to work with
     |  
     |  hasValidTriangulation(...)
     |      hasValidTriangulation() -> bool
     |      
     |      This method checks if the face has a valid triangulation. If it doesn't, then the face was bad geometry: it may gave degenerate points or cross over itself.
     |  
     |  index(...)
     |      index() -> int
     |      
     |      Returns the index of the current polygon
     |  
     |  isConnectedToEdge(...)
     |      isConnectedToEdge(index) -> bool
     |      
     |      This method determines whether the given face is adjacent to the current face
     |      
     |      * index (int) - Index of the face to be tested for
     |  
     |  isConnectedToFace(...)
     |      isConnectedToFace(index) -> bool
     |      
     |      This method determines whether the given face is adjacent to the current face
     |      
     |      * index (int) - Index of the face to be tested for
     |  
     |  isConnectedToVertex(...)
     |      isConnectedToVertex(index) -> bool
     |      
     |      This method determines whether the given vertex shares an edge with a vertex in the current face
     |      
     |      * index (int) - Index of the face to be tested for
     |  
     |  isConvex(...)
     |      isConvex() -> bool
     |      
     |      This method checks if the face is convex.
     |  
     |  isDone(...)
     |      isDone() -> bool
     |      
     |      Indicates if all of the polygons have been traversed yet.
     |  
     |  isHoled(...)
     |      isHoled() -> bool
     |      
     |      This method checks if the face has any holes.
     |  
     |  isLamina(...)
     |      isLamina() -> bool
     |      
     |      This method checks if the face is a lamina (the face is folded over onto itself).
     |  
     |  isPlanar(...)
     |      isPlanar() -> bool
     |      
     |      This method checks if the face is planar
     |  
     |  isStarlike(...)
     |      isStarlike() -> bool
     |      
     |      This method checks if the face is starlike. That is, a line from the centre to any vertex lies entirely within the face.
     |  
     |  isUVReversed(...)
     |      isUVReversed(faceId) -> bool
     |      
     |      Returns True if the texture coordinates (uv's) for the face are
     |      reversed (clockwise), False if they are not reversed (counter clockwise).
     |  
     |  next(...)
     |      next() -> self
     |      
     |      Advance to the next polygon in the iteration.
     |  
     |  normalIndex(...)
     |      normalIndex(vertex) -> int
     |      
     |      Returns the normal index for the specified vertex.
     |      This index refers to an element in the normal array returned by MFnMesh.getNormals.  These normals are per-polygon per-vertex normals. See the MFnMesh description for more information on normals.
     |      
     |      * localVertexIndex (int) - The face-relative index of the vertex to examine for the current polygon
     |  
     |  numColors(...)
     |      numColors(colorSetName=None) -> int
     |      
     |      This method checks for the number of colors on vertices in this face
     |      
     |      * colorSetName (string) - Name of the color set.
     |  
     |  numConnectedEdges(...)
     |      numConnectedEdges() -> int
     |      
     |      This method checks for the number of connected edges on the vertices of this face
     |  
     |  numConnectedFaces(...)
     |      numConnectedFaces() -> int
     |      
     |      This method checks for the number of connected faces
     |  
     |  numTriangles(...)
     |      numTriangles() -> int
     |      
     |      This Method checks for the number of triangles in this face in the current triangulation
     |  
     |  onBoundary(...)
     |      onBoundary() -> bool
     |      
     |      This method determines whether the current face is on a boundary
     |  
     |  point(...)
     |      point(index, space=kObject) -> MPoint
     |      
     |      Return the position of the vertex at index in the current polygon.
     |      
     |      * index (int) - The face-relative index of the vertex in the current polygon
     |      * space (int) - The coordinate system for this operation
     |  
     |  polygonVertexCount(...)
     |      polygonVertexCount() -> int
     |      
     |      Return the number of vertices for the current polygon
     |  
     |  reset(...)
     |      reset() -> self
     |      reset(polyObject) -> self
     |      reset(polyObject, component=None) -> self
     |      
     |      Reset the iterator to the first polygon
     |      
     |      Reset the iterator to the first polygon in the supplied surface
     |      
     |      * polyObject (MObject) - The polygon for the iteration
     |      
     |      Reset the iterator with the given surface and component.
     |      If component is None then the iteration will be for all polygons in the given surface.
     |      
     |      * polyObject (MDagPath) - The surface (mesh) to iterate over
     |      * component (MObject) - The polygons (faces) of the polyObject to iterate over
     |  
     |  setIndex(...)
     |      setIndex(index) -> int
     |      
     |      This method sets the index of the current face to be accessed.
     |      The current face will no longer be in sync with any previous iteration.
     |      Returns the index of the current face in the iteration
     |      
     |      * index (int) - The index of desired face to access.
     |  
     |  setPoint(...)
     |      setPoint(point, index, space=kObject) -> self
     |      
     |      Set the vertex at the given index in the current polygon.
     |      
     |      * point (MPoint) - The new position for the vertex
     |      * index (int) - The face-relative index of the vertex in the current polygon
     |      * space (int) - The coordinate system for this operation
     |  
     |  setPoints(...)
     |      setPoints(pointArray, space=kObject) -> self
     |      
     |      Sets new locations for vertices of the current polygon that the iterator is pointing to.
     |      
     |      * pointArray (MPointArray) - The new positions for the vertices.
     |      * space (int) - The coordinate system for this operation.
     |  
     |  setUV(...)
     |      setUV(vertexId, uvPoint, uvSet=None) -> self
     |      
     |      Modify the UV value for the given vertex in the current face.
     |      If the face is not already mapped, this method will fail.
     |      
     |      * vertexId (int) - face-relative index of the vertex to set UV for.
     |      * uvPoint ([float, float]) - The UV values to set it to
     |      * uvSet (string) - UV set to work with
     |  
     |  setUVs(...)
     |      setUVs(uArray, vArray, uvSet=None) -> self
     |      
     |      Modify the UV value for all vertices in the current face.
     |      If the face has not already been mapped, this method will fail.
     |      
     |      * uArray (MFloatArray) - All the U values - in local face order
     |      * vArray (MFloatArray) - The corresponding V values
     |      * uvSet (string) - UV set to work with
     |  
     |  tangentIndex(...)
     |      tangentIndex(localVertexIndex) -> int
     |      
     |      Returns the tangent (or binormal) index for the specified vertex.
     |      This index refers to an element in the normal array returned by MFnMesh.getTangents. These tangent or binormals are per-polygon per-vertex.
     |      See the MFnMesh description for more information on tangents and binormals.
     |      
     |      * localVertexIndex(int) - The face-relative index of the vertex to examine for the current polygon
     |  
     |  updateSurface(...)
     |      updateSurface() -> self
     |      
     |      Signal that this polygonal surface has changed and needs to redraw itself.
     |  
     |  vertexIndex(...)
     |      vertexIndex(index) -> int
     |      
     |      Returns the object-relative index of the specified vertex of the current polygon.
     |      The index returned may be used to refer to an element in the vertex list returned by MFnMesh.getPoints. 
     |      
     |      * index (int) - The face-relative index of the vertex in the polygon
     |  
     |  zeroArea(...)
     |      zeroArea() -> bool
     |      
     |      This method checks if its a zero area face
     |  
     |  zeroUVArea(...)
     |      zeroUVArea(uvSet=None) -> bool
     |      
     |      This method checks if the UV area of the face is zero
     |      
     |      * uvSet (string) - UV set to work with
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MItMeshVertex(__builtin__.object)
     |  This class is the iterator for polygonal surfaces (meshes).
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  connectedToEdge(...)
     |      connectedToEdge(index) -> bool
     |      
     |      This method determines whether the given edge contains the current vertex
     |      
     |      * index (int) - Index of edge to check.
     |  
     |  connectedToFace(...)
     |      connectedToFace(index) -> bool
     |      
     |      This method determines whether the given face contains the current vertex
     |      
     |      * index (int) - Index of face to check.
     |  
     |  count(...)
     |      count() -> int
     |      
     |      Return the number of vertices in the iteration
     |  
     |  currentItem(...)
     |      currentItem() -> MObject
     |      
     |      Get the current vertex in the iteration as a component.
     |      
     |      Components are used to specify one or more vertices and are usefull in operating on groups of non-contiguous vertices for a surface.
     |      Components do not contain any information about the surface that they refer to so an MDagPath must be specified when dealing with components.
     |  
     |  geomChanged(...)
     |      geomChanged() -> self
     |      
     |      Reset the geom pointer in the MItMeshVertex. If you're using MFnMesh to
     |      update Normals or Color per vertex while iterating, you must call geomChanged
     |      on the iteratior immediately after the MFnMesh call to make sure that your
     |      geometry is up to date. A crash may result if this method is not called.
     |      A similar approach must be taken for updating upstream vertex tweaks
     |      with an MPlug. After the update, call this method.
     |  
     |  getColor(...)
     |      getColor(colorSetName=None) -> MColor
     |      getColor(faceIndex, colorSetName=None) -> MColor
     |      
     |      This method gets the average color of the vertex
     |      
     |      * colorSetName (string) - Name of the color set.
     |      
     |      This method gets the color of the current vertex in the specified face
     |      
     |      * index (int) - The face to get the color for this vertex for* colorSetName (string) - Name of the color set.
     |  
     |  getColorIndices(...)
     |      getColorIndices(colorSetName=None) -> MIntArray
     |      
     |      This method returns the colorIndices into the color array see MFnMesh::getColors()
     |      of the current vertex.
     |      
     |      * colorSetName (string) - Name of the color set.
     |  
     |  getColors(...)
     |      getColors(colorSetName=None) -> MColorArray
     |      
     |      This method gets the colors of the current vertex for each face it
     |      belongs to. If no colors are assigned to the vertex at all, the
     |      return values will be (-1 -1 -1 1). If some but not all of the
     |      vertex/face colors have been explicitly set, the ones that have not
     |      been set will be (0, 0, 0, 1).
     |      
     |      * colorSetName (string) - Name of the color set.
     |  
     |  getConnectedEdges(...)
     |      getConnectedEdges() -> MIntArray
     |      
     |      This method gets the indices of the edges contained in the current vertex.
     |  
     |  getConnectedFaces(...)
     |      getConnectedFaces() -> MIntArray
     |      
     |      This method gets the indices of the faces connected to the current vertex.
     |  
     |  getConnectedVertices(...)
     |      getConnectedVertices() -> MIntArray
     |      
     |      This method gets the indices of the vertices surrounding the current vertex.
     |  
     |  getNormal(...)
     |      getNormal(space=kObject) -> MVector
     |      getNormal(faceIndex, space=kObject) -> MVector
     |      
     |      Return the normal or averaged normal if unshared of the current vertex.
     |      
     |      * space (int) - The transformation space
     |      
     |      Return the normal of the current vertex in the specified face.
     |      
     |      * faceIndex (int) - face index to get normal for
     |      * space (int) - The transformation space
     |  
     |  getNormalIndices(...)
     |      getNormalIndices() -> MIntArray
     |      
     |      This method returns the normal indices of the face/vertex associated
     |      with the current vertex.
     |  
     |  getNormals(...)
     |      getNormals(space=kObject) -> MVectorArray
     |      
     |      Return the normals of the current vertex for all faces
     |      
     |      * space (int) - The transformation space
     |  
     |  getOppositeVertex(...)
     |      getOppositeVertex(edgeId) -> int
     |      
     |      This method gets the other vertex of the given edge
     |      
     |      * edgeId (int) - The edge to get the other vertex for
     |  
     |  getUV(...)
     |      getUV(uvSet=None) -> [float, float]getUV(faceId, uvSet=None) -> [float, float]
     |      
     |      Get the shared UV value at this vertex.
     |      
     |      * uvSet (string) - Name of the uv set to work with.
     |      
     |      Get the UV value for the give facen at the current vertex.
     |      
     |      * faceId (int) - Index of the required face
     |      * uvSet (string) - Name of the uv set to work with
     |  
     |  getUVIndices(...)
     |      getUVIndices(uvSet=None) -> MIntArray
     |      
     |      This method returns the uv indices into the normal array see MFnMesh::getUVs()
     |      of the current vertex.
     |      
     |      * uvSet (string) - Name of the uv set.
     |  
     |  getUVs(...)
     |      getUVs(uvSet=None) -> [MFloatArray, MFloatArray, MIntArray]
     |      
     |      Get the UV values for all mapped faces at the current vertex.
     |      If at least one face was mapped the method will succeed.
     |      
     |      * uvSet (string) - Name of the uv set to work with
     |  
     |  hasColor(...)
     |      hasColor() -> bool
     |      hasColor(index) -> bool
     |      
     |      This method determines whether the current Vertex has a color set
     |      for one or more faces.
     |      
     |      * index (int) - Index of face to check
     |  
     |  index(...)
     |      index() -> int
     |      
     |      Returns the index of the current vertex in the vertex list for this
     |      polygonal object.
     |      Polygonal objects contain a list of vertices. Faces and edges are
     |      specified as indicies from this list, in this way vertices can
     |      be shared amoung faces and edges.
     |  
     |  isDone(...)
     |      isDone() -> bool
     |      
     |      Indicates if all of the vertices have been traversed yet.
     |  
     |  next(...)
     |      next() -> self
     |      
     |      Advance to the next edge in the iteration.
     |  
     |  numConnectedEdges(...)
     |      numConnectedEdges() -> int
     |      
     |      This Method checks for the number of connected Edges on this vertex
     |  
     |  numConnectedFaces(...)
     |      numConnectedFaces() -> int
     |      
     |      This Method checks for the number of Connected Faces
     |  
     |  numUVs(...)
     |      numUVs(uvSet=None) -> int
     |      
     |      This method returns the number of unique UVs mapped on this vertex
     |      
     |      * uvSet (string) - Name of the uv set to work with
     |  
     |  onBoundary(...)
     |      onBoundary() -> bool
     |      
     |      This method determines whether the current vertex is on a Boundary
     |  
     |  position(...)
     |      position(space=kObject) -> MPoint
     |      
     |      Return the position of the current vertex in the specified space.
     |      Object space ignores all transformations for the polygon, world space
     |      includes all such transformations.
     |      
     |      * space (int) - The  transformation space
     |  
     |  reset(...)
     |      reset() -> self
     |      reset(polyObject) -> self
     |      reset(polyObject, component=None) -> self
     |      
     |      Reset the iterator to the first polygon
     |      
     |      Reset the iterator to the first polygon in the supplied polygon
     |      
     |      * polyObject (MObject) - The polygon for the iteration
     |      
     |      Reset the iterator with the given surface and component.
     |      If component is None then the iteration will be for all vertices in the given polygon.
     |      
     |      * polyObject (MDagPath) - The surface (mesh) to iterate over
     |      * component (MObject) - The vertices of the polyObject to iterate over
     |  
     |  setIndex(...)
     |      setIndex(index) -> int
     |      
     |      This method sets the index of the current vertex to be accessed.
     |      The current vertex will no longer be in sync with any previous iteration.
     |      
     |      * index (int) - The index of desired vertex to access.
     |  
     |  setPosition(...)
     |      setPosition(point, space=kObject) -> self
     |      
     |      Set the position of the current vertex in the given space.
     |      
     |      * point (MPoint) - The new position for the current vertex
     |      * space (int) - The Transformation space
     |  
     |  setUV(...)
     |      setUV(uvPoint, uvSet=None) -> selfsetUV(faceId, uvPoint, uvSet=None) -> self
     |      
     |      Set the shared UV value at this vertex
     |      
     |      * uvPoint ([float, float]) - The UV values to set
     |      * uvSet (string) - Name of the UV set to work with
     |      
     |      Set the UV value for the given face at the current vertex
     |      
     |      * faceId (int) - Index of required face
     |      * uvPoint ([float, float]) - The UV values to set
     |      * uvSet (string) - Name of the UV set to work with
     |  
     |  setUVs(...)
     |      setUVs(uArray, vArray, faceIds, uvSet=None) -> self
     |      
     |      Set the UV value for the specified faces at the current vertex.
     |      If the face is not already mapped, the value will not be set.
     |      If at least ne face was previously mapped, the method should succeed.
     |      If no faces were mapped, the method will fail.
     |      
     |      * uArray (MFloatArray) - All the U values - in local face order
     |      * vArray (MFloatArray) - The corresponding V values
     |      * faceIds (MIntArray) - The corresponding face Ids
     |      * uvSet (string) - UV set to work with
     |  
     |  translateBy(...)
     |      translateBy(vector, space=kObject) -> self
     |      
     |      Translate the current vertex by the amount specified
     |      by the given vector.
     |      
     |      * vector (MVector) - The amount of translation
     |      * space (int) - The Transformation space
     |  
     |  updateSurface(...)
     |      updateSurface() -> self
     |      
     |      Signal that this polygonal surface has changed and needs to redraw itself.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MItSelectionList(__builtin__.object)
     |  Class for iterating over the items in an MSelection list.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  getComponent(...)
     |      getComponent() -> (MDagPath, MObject)
     |      
     |      This method retrieves the dag path and the component of the current selection item.
     |  
     |  getDagPath(...)
     |      getDagPath() -> MDagPath
     |      
     |      This method retrieves the dag path of the current selection item.
     |  
     |  getDependNode(...)
     |      getDependNode() -> MObject
     |      
     |      This method retrieves the dependency node of the current selection itemRaises kFailure if there is no dependency node associated with the current item
     |  
     |  getPlug(...)
     |      getPlug() -> MPlug
     |      
     |      This method retrieves the plug of the current selection item.
     |  
     |  getStrings(...)
     |      getStrings() -> list of strings
     |      
     |      Get the string representation of the current item in the selection list.
     |      It is possible that it will require more than one string to represent the item (the item may contain groups of CVs for example)
     |  
     |  hasComponents(...)
     |      hasComponents() -> bool
     |      
     |      Returns whether or not the current selection item has components.
     |  
     |  isDone(...)
     |      isDone() -> bool
     |      
     |      Specifies whether or not there is anything more to iterator over.
     |  
     |  itemType(...)
     |      itemType() -> int
     |      
     |      Returns the current selection item type.
     |      
     |        kDagSelectionItem    selection item is in the DAG
     |        kAnimSelectionItem   selection item is a keyset
     |        kDNselectionItem     selection item is a dependency node
     |  
     |  next(...)
     |      next() -> self
     |      
     |      Advance to the next item. If components are selected then advance to next component.
     |      
     |      If a filter is specified then the next item will be one that matches the filter.
     |  
     |  reset(...)
     |      reset() -> self
     |      
     |      Reset the iterator.
     |      If a filter has been specified then the current item will be the first selected item that matches the filter.
     |  
     |  setFilter(...)
     |      setFilter(filter) -> self
     |      
     |      Apply a filter to the iteration.
     |      Selection items not matching the filter type will be excluded from the iteration.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kAnimSelectionItem = 1
     |  
     |  kDNselectionItem = 2
     |  
     |  kDagSelectionItem = 0
     |  
     |  kPlugSelectionItem = 3
     |  
     |  kUnknownItem = -1
    
    class MItSurfaceCV(__builtin__.object)
     |  NURBS surface CV iterator.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  currentItem(...)
     |      currentItem() -> MObject
     |      
     |      Get the current CV in the iteration as a component.
     |      
     |      Components are used to specify one or more CVs and are useful in operating on groups of non-contiguous CVs for a curve or surface.
     |      Components do not contain any information about the surface that they refer to so an MDagPath must be specified when dealing with components.
     |  
     |  hasHistoryOnCreate(...)
     |      hasHistoryOnCreate() -> bool
     |      
     |      This method determines if the shape was created with history.
     |      
     |      If the object that this iterator is attached to is not a shape then this method will raise.
     |  
     |  index(...)
     |      index() -> int
     |      
     |      Get the index of the current CV as it appears in CV array for this surface.
     |  
     |  isDone(...)
     |      isDone() -> bool
     |      
     |      Returns True if the iteration is finished, i.e. there are no more CVs to iterate on.
     |  
     |  isRowDone(...)
     |      isRowDone() -> bool
     |      
     |      Returns True if the current row has no more CVs to iterate over.
     |      The row can be in the U or V direction depending on what value of useURows has been set in the constructor.
     |  
     |  next(...)
     |      next() -> self
     |      
     |      Advance to the next CV in the iteration.
     |      If the iterator is already at the last CV then this method has no effect. Use isDone() to determine if the iterator is at the last CV.
     |  
     |  nextRow(...)
     |      nextRow() -> self
     |      
     |      Advance to the next row in the iteration.
     |      The row can be in the U or V direction depending on what value of useURows has been set in the constructor.
     |  
     |  position(...)
     |      position(space=kObject) -> MPoint
     |      
     |      Returns the position of the current CV in the iteration in the specified space.
     |      
     |      * space (int) - The coordinate space in which the CV is set
     |  
     |  reset(...)
     |      reset() -> self
     |      reset(surface, useURows=True) -> self
     |      reset(surface, component, useURows=True) -> self
     |      
     |      Reset the iterator to the first CV.
     |      
     |      Or
     |      Reset the iterator to iterate over all CVs on the specified surface.
     |      
     |      * surface (MObject) - The surface for the iteration
     |      * useURows (bool) - If True then the iterator will iterate in the U direction, otherwise it will be in the V direction.
     |      
     |      Or
     |      Reset the iterator to iterate over the CVs of the given surface that are specified in the given component. If the component is NULL then the iteration will be over all CVs on the surface.
     |      
     |      * surface (MDagPath) - The surface for the iteration
     |      * component (MObject) - A group of CVs to be iterated on
     |      * useURows (bool) - If True then the iterator will iterate in the U direction, otherwise it will be in the V direction.
     |  
     |  setPosition(...)
     |      setPosition(point, space=kObject) -> self
     |      
     |      Set the position of the current CV in the iteration to the specified point.
     |      
     |      * point (MPoint) - The new position for the current CV in the iteration
     |      * space (int) - The coordinate space in which the CV is set
     |  
     |  translateBy(...)
     |      translateBy(vector, space=kObject) -> self
     |      
     |      Move the current CV in the iteration by the sepcified vector.
     |      
     |      * vector (MVector) - The translation vector
     |      * space (int) - The coordinate space in which the CV is set
     |  
     |  updateSurface(...)
     |      updateSurface() -> self
     |      
     |      This method is used to signal the surface that it has been changed and needs to redraw itself.
     |      
     |      When modifying a large number of CVs, it is most efficient to call this method after all of the CVs have been modified.
     |  
     |  uvIndices(...)
     |      uvIndices() -> (indexU, indexV)
     |      
     |      Get the u and v index of the current CV.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MIteratorType(__builtin__.object)
     |  The MIteratorType class is used on iterators where more than one type
     |  of filters can be specified. It also provides functionalities to set and
     |  get the filter list or individual types of filter. This class should be
     |  used in conjunction with DAG/DG/DependencyNodes iterators for using filter
     |  list (list of MFn::Type objects) on them, thus enabling faster traversal
     |  thro' iterators.
     |  
     |  Also, the class has functionalities for specifying the type of object the
     |  iterator will be reset to. This could be an MObject, an MPlug or an MDagPath.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  filterList
     |      Filter list (MIntArray containing MFn.Type).
     |  
     |  filterListEnabled
     |      Whether the we are using a single filter on the iterator or a filter list (Boolean).
     |  
     |  filterType
     |      Filter type (MFn.Type).
     |  
     |  objectType
     |      Object type (MIteratorType.objFilterType).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kMDagPathObject = 1
     |  
     |  kMObject = 0
     |  
     |  kMPlugObject = 2
    
    class MLockMessage(MMessage)
     |  Class used to register callbacks for model related messages.
     |  
     |  Method resolution order:
     |      MLockMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  setNodeLockDAGQueryCallback(...)
     |      setNodeLockDAGQueryCallback(dagPath, function, clientData=None) -> id
     |      
     |      This methods registers a callback that is invoked in any situation
     |      involving a locking condition on DAG level changes.  When called,
     |      the API user can make a decision on how to handle the given locking
     |      situation. The programmer can either accept the default action, or
     |      they can deny the default action. The decision is returned through a
     |      decision variable which is passed to the callback function.
     |      
     |      The callback function takes the following parameters:
     |       * dagPath - The DAG path that the event occurred on.
     |       * otherPath - The other path involved, e.g. the new parent.
     |       * clientData - User defined data passed to the callback function.
     |       * eventType - Description of the event.
     |      And return True to accept the default behavior and False to 
     |      reject it.
     |      
     |       The meanings of the dagPath and otherPath parameters for each
     |      eventType, and default actions associated with those event types, are
     |      as follows:
     |      
     |      kGroup
     |       * dagPath - Path of the node to be grouped.
     |       * otherPath - Path of the group node.
     |       * default actions - If dagPath
     |         is locked then the default action is to not allow the grouping.
     |         If dagPath is unlocked then dagPath
     |         can be grouped with otherPath.
     |      
     |      kUnGroup
     |       * dagPath - Path of the node attempted to ungroup.
     |       * otherPath - Path of the group node.
     |       * default actions - If dagPath is locked then
     |         the default action is to not allow the ungrouping. If dagPath
     |         is unlocked then dagPath can be ungrouped from otherPath.
     |      
     |      kReparent
     |       * dagPath - Path of the node which is being reparented.
     |       * otherPath - Path of the new parent, if any. When
     |         reparenting to the world, otherPath will be invalid.
     |       * default actions - If dagPath is locked then
     |         the default action is to not allow the reparenting. If dagPath
     |         is unlocked then dagPath can be parented to otherPath.
     |      
     |      kChildReorder
     |       * dagPath - Path of the child node to be reordered.
     |       * otherPath - Path of the parent node.
     |       * default actions - If dagPath is locked then
     |         the default action is to not allow the reordering. If dagPath
     |         is unlocked then dagPath can be reordered on otherPath.
     |      
     |      kCreateNodeInstance
     |       * dagPath - Path of the node which is being instanced.
     |       * otherPath - Invalid Path.
     |       * default actions - If dagPath is locked then
     |         the default action is to not allow the instance to be created.
     |         If dagPath is unlocked then dagPath can be instanced.
     |      
     |      kCreateChildInstance
     |       * dagPath - Path of the node whose child is being
     |         instanced.
     |       * otherPath - Path of the child node.
     |       * default actions - If dagPath is locked then
     |         the default action is to not allow the instance to be created.
     |         If dagPath is unlocked then dagPath can be instanced.
     |      
     |       * dagPath (MDagPath) - The path to attach the callback.
     |       * function - the callback function (see below for the description)
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  setNodeLockQueryCallback(...)
     |      setNodeLockQueryCallback(node, function, clientData=None) -> id
     |      
     |      This methods registers a callback that is invoked in any locking
     |      condition on node properties, e.g. name, lock status, etc. When
     |      called, the API user can make a decision on how to handle the given
     |      locking situation. The programmer can either accept the default
     |      action, or they can deny the default action. The decision is returned
     |      through a decision variable which is passed to the callback function.
     |      
     |      The callback function takes the following parameters:
     |         * node - The node that triggered the callback.
     |         * aux - Any auxiliary data that may be needed, e.g.
     |           the attribute about to be added.
     |         * clientData - User defined data passed to the
     |           callback function.
     |         * eventType - Description of the event.
     |      And return True to accept the default behavior and False to 
     |      reject it.
     |      
     |      The meanings of the node and aux parameters for each
     |      eventType, and default actions associated with those event types, are
     |      as follows:
     |      
     |      kRename
     |         * node - The node that the user is attempting to rename.
     |         * aux - MObject.kNullObj
     |         * default actions - If node is locked then the
     |           default action is to not allow the rename. Otherwise,
     |           if node is unlocked then node can be renamed.
     |      
     |      kDelete   * node - The node that the user is attempting to delete.
     |         * aux - MObject.kNullObj
     |         * default actions - If node is locked then the
     |           default action is to not allow the delete. If node is unlocked
     |           then the node can be deleted.
     |      
     |      kLockNode   * node - The node that the user is attempting to lock.
     |         * aux - MObject.kNullObj
     |         * default actions - If node is unlocked then the
     |           default action is to ALLOW the node to be locked. The callback
     |           is not invoked when the user tries to unlock an already unlocked
     |           node.
     |      
     |      kUnlockNode   * node - The node that the user is attempting to unlock.
     |         * aux - MObject.kNullObj
     |         * default actions - If node is locked then the
     |           default action is to ALLOW the unlock. The callback is not invoked
     |           when the user tries to unlock an already unlocked node.
     |      
     |      kAddAttr   * node - The node that is having an attribute added.
     |         * aux - MObject of the attribute to be added. Note:
     |           the attribute does not belong to the node yet. You can only
     |           access the attribute information using MFnAttribute.
     |         * default actions - If node is locked then the default
     |           action is to not allow to the addition of aux. If node
     |           is unlocked then aux can be added to the node.
     |      
     |      kRemoveAttr
     |         * node - The node that is having an attribute removed.
     |         * aux - The attribute to be removed. In certain
     |           situations the user is allowed to do a global delete,
     |           e.g. "deleteAttr -at AttrName [nodes]". In these cases the plug is not
     |           created until checks have been performed; so aux ==
     |           MObject.kNullObj
     |         * default actions - If node is locked then the default
     |           action is to not allow the attribute removal. If node is
     |           unlocked then aux can be removed.
     |      
     |      kRenameAttr
     |         * node - The node that is having an attribute renamed.
     |         * aux - The attribute.
     |         * default actions - If node is locked then the default
     |           action is to not allow the rename. If node is unlocked then
     |           aux can be renamed.
     |      
     |      kUnlockAttr
     |         * node - The node that is having an attribute unlocked.
     |         * aux - The attribute to be unlocked.
     |         * default actions - If node is locked then the default
     |           action is to not allow the unlock. If node is unlocked then
     |           aux attribute can be unlocked.
     |      
     |      kLockAttr
     |         * node - The node that is having an attribute locked.
     |         * aux - The attribute to be locked.
     |         * default actions - If node is locked then the default 
     |           action is to not allow the locking of aux. If node is 
     |           unlocked then aux can be locked.
     |      
     |       * node (MObject) - The node to register the callback for.
     |       * function - the callback function (see below for description)
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  setPlugLockQueryCallback(...)
     |      setPlugLockQueryCallback(plug, function, clientData=None) -> id
     |      
     |      This method registers a callback that is invoked in any locking
     |      condition on a plug, e.g. plug unlock, plug lock, connections, etc.
     |      When the callback is invoked, the API programmer can make a decision on
     |      how to handle the given locking situation. The programmer can either
     |      accept the default action, or they can deny the default action.
     |      The decision is made through the decision variable described above.
     |      
     |      The callback function takes the following parameters:
     |         * plug - The plug that triggered the callback.
     |         * otherPlug - The other plug involved in the callback.
     |           This is only valid during connect and disconnect events.
     |           clientData - User defined data passed to the
     |           callback function.
     |         * eventType - Description of the event.
     |      And return True to accept the default behavior and False to
     |      reject it.
     |      
     |      The meanings of the plug and otherPlug parameters for each
     |      eventType, and default actions associated with those event types, are
     |      as follows:
     |      
     |      kPlugLockAttr
     |         * plug - The plug that the user is attempting to lock.
     |         * otherPlug - None.
     |         * default actions - If plug is unlocked then the
     |           default action is to allow the plug to be locked.
     |      
     |      kPlugUnlockAttr
     |         * plug - The plug that the user is attempting to unlock.
     |         * otherPlug - None.
     |         * default actions - If plug is locked then the
     |           default action is to allow the plug to be unlocked.
     |      
     |      kPlugAttrValChange
     |         * plug - The plug that the user is attempting to change.
     |         * otherPlug - None.
     |         * default actions - If plug is locked then the
     |           default action is to not allow plug to change. If plug is
     |           unlocked then plug can change.
     |      
     |      kPlugRemoveAttr
     |         * plug - The plug that the user is attempting to remove.
     |         * otherPlug - None.
     |         * default actions - If plug is locked then the
     |           default action is to not allow removal. Otherwise, if plug is
     |           unlocked then plug can be removed.
     |      
     |      kPlugRenameAttr
     |         * plug - The plug that the user is attempting to rename.
     |         * otherPlug - None.
     |         * default actions - If plug is locked then the default
     |           action is to not allow the rename. Otherwise, if plug is
     |           unlocked then plug can be renamed.
     |      
     |      kPlugConnect
     |         * plug - The plug that is to be connected (incoming
     |           connection).
     |         * otherPlug - The source plug of the connection being made.
     |         * default actions - If plug is locked then the
     |           connection is DENIED. If plug is unlocked then otherPlug can
     |           be connected to plug.
     |      
     |      kPlugDisconnect
     |         * plug - The plug that it is having an incoming connection broken.
     |         * otherPlug - The source plug of the connection being made.
     |         * default actions - If plug is locked then the
     |           default action is to DENY the connection from being broken. If
     |           plug is unlocked then otherPlug can be disconnected from
     |           plug.
     |      
     |       * plug (MPlug) - the plug to attach the callback
     |       * function - the callback function (see below for description)
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  kAddAttr = 5
     |  
     |  kChildReorder = 4
     |  
     |  kCreateChildInstance = 6
     |  
     |  kCreateNodeInstance = 5
     |  
     |  kCreateParentInstance = 7
     |  
     |  kDelete = 2
     |  
     |  kGroup = 1
     |  
     |  kInvalid = 0
     |  
     |  kInvalidDAG = 0
     |  
     |  kInvalidPlug = 0
     |  
     |  kLast = 10
     |  
     |  kLastDAG = 8
     |  
     |  kLastPlug = 8
     |  
     |  kLockAttr = 9
     |  
     |  kLockNode = 3
     |  
     |  kPlugAttrValChange = 3
     |  
     |  kPlugConnect = 6
     |  
     |  kPlugDisconnect = 7
     |  
     |  kPlugLockAttr = 1
     |  
     |  kPlugRemoveAttr = 4
     |  
     |  kPlugRenameAttr = 5
     |  
     |  kPlugUnlockAttr = 2
     |  
     |  kRemoveAttr = 6
     |  
     |  kRename = 1
     |  
     |  kRenameAttr = 7
     |  
     |  kReparent = 3
     |  
     |  kUnGroup = 2
     |  
     |  kUnlockAttr = 8
     |  
     |  kUnlockNode = 4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MMatrix(__builtin__.object)
     |  4x4 matrix with double-precision elements.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __isub__(...)
     |      x.__isub__(y) <==> x-=y
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  adjoint(...)
     |      Returns a new matrix containing this matrix's adjoint.
     |  
     |  det3x3(...)
     |      Returns the determinant of the 3x3 matrix formed by the first 3 elements of the first 3 rows of this matrix.
     |  
     |  det4x4(...)
     |      Returns this matrix's determinant.
     |  
     |  getElement(...)
     |      Returns the matrix element for the specified row and column.
     |  
     |  homogenize(...)
     |      Returns a new matrix containing the homogenized version of this matrix.
     |  
     |  inverse(...)
     |      Returns a new matrix containing this matrix's inverse.
     |  
     |  isEquivalent(...)
     |      Test for equivalence of two matrices, within a tolerance.
     |  
     |  isSingular(...)
     |      Returns True if this matrix is singular.
     |  
     |  setElement(...)
     |      Sets the matrix element for the specified row and column.
     |  
     |  setToIdentity(...)
     |      Sets this matrix to the identity.
     |  
     |  setToProduct(...)
     |      Sets this matrix to the product of the two matrices passed in.
     |  
     |  transpose(...)
     |      Returns a new matrix containing this matrix's transpose.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kIdentity = maya.api.OpenMaya.MMatrix(((1, 0, 0, 0), (0, 1, 0, 0), (0,...
     |  
     |  kTolerance = 1e-10
    
    class MMatrixArray(__builtin__.object)
     |  Array of MMatrix values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MMeshIntersector(__builtin__.object)
     |  Provides methods for efficiently finding the closest point on
     |  the surface of a mesh. An octree algorithm is used to find the
     |  closest point.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  create(...)
     |      create(mesh, matrix) -> self
     |      
     |      Creates the internal data required by the intersector. It is a
     |      compute-heavy operation and should only be called when necessary.
     |      
     |      mesh (MObject)   - the mesh to be used
     |      matrix (MMatrix) - transformation to use to bring points into the
     |      mesh's object space.
     |  
     |  getClosestPoint(...)
     |      getClosestPoint(referencePoint, maxDistance=sys.float_info.max) -> MPointOnMesh
     |      
     |      Finds the closest point within 'maxDistance' of the reference point
     |      (MPoint) which lies on the surface of the mesh. The reference point
     |      will first be transformed by the matrix passed in the create() call,
     |      so if, for example, you want to specify reference points in world
     |      space then the matrix passed to create() should provide the mapping
     |      from world space to the mesh's object space.
     |      
     |      Returns an MPointOnMesh object if a closest point is found, or None
     |      if no closest point is found (e.g. referencePoint is not within
     |      maxDistance of the mesh).
     |      
     |      Raises ValueError if create() has not yet been called for this
     |      intersector.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  isCreated
     |      True if the intersector has been created, False otherwise.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MMeshIsectAccelParams(__builtin__.object)
     |  Opaque class used to store parameters used by MFnMesh's
     |  intersection calculations for later re-use. Use MFnMesh's 
     |  uniformGridParams() or autoUniformGridParams() to create one
     |  of these to pass into the allIntersections(), 
     |  closestIntersection(), and anyIntersection() methods
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MMeshSmoothOptions(__builtin__.object)
     |  Options for control of smooth mesh generation.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  boundaryRule
     |      Determines how boundary edges and vertices are creased.
     |  
     |  divisions
     |      Number of subdivisions used in smoothing.
     |  
     |  keepBorderEdge
     |      If True, border edges will not be smoothed.
     |  
     |  keepHardEdge
     |      If True, hard edges will not be smoothed.
     |  
     |  propEdgeHardness
     |      If True, the hardness of edges in the base cage will be propagated to the edges of the smoothed mesh which derive from them.
     |  
     |  smoothUVs
     |      If True, UVs will be smoothed as well as geometry. If False, only geometry will be smoothed.
     |  
     |  smoothness
     |      The degree of smoothness desired. Ranges from 0.0 (hard) to 1.0 (fully smoothed).
     |  
     |  subdivisionType
     |      Determines subdivision algorithm used for mesh smoothing.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kCatmullClark = 0
     |  
     |  kCreaseAll = 1
     |  
     |  kCreaseEdge = 2
     |  
     |  kInvalid = -1
     |  
     |  kInvalidSubdivision = -1
     |  
     |  kLast = 3
     |  
     |  kLastSubdivision = 4
     |  
     |  kLegacy = 0
     |  
     |  kOpenSubdivCatmullClarkAdaptive = 3
     |  
     |  kOpenSubdivCatmullClarkUniform = 2
    
    class MMessage(__builtin__.object)
     |  Base class for message callbacks.
     |  
     |  Static methods defined here:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MModelMessage(MMessage)
     |  Class used to register callbacks for model related messages.The class also provides the following Message constants which
     |  describe the different types supported by the addCallback method:
     |    kActiveListModified           #active selection changes
     |  
     |  Method resolution order:
     |      MModelMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addAfterDuplicateCallback(...)
     |      addAfterDuplicateCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called after a duplicate
     |      command is made. The callback will be called after everything is
     |      duplicated.
     |      
     |       * function - callable which will be passed the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addBeforeDuplicateCallback(...)
     |      addBeforeDuplicateCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called whenever a duplicate
     |      command is made. The callback will be called before anything is
     |      duplicated.
     |      
     |       * function - callable which will be passed the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addCallback(...)
     |      addCallback(message, function, clientData=None) -> id
     |      
     |      Adds a new callback for the specified model message.
     |      
     |      
     |       * message (Message constant, see class doc for a list) - the model
     |         message that will trigger the callback
     |       * function - callable which will be passed the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addNodeAddedToModelCallback(...)
     |      addNodeAddedToModelCallback(dagNode, function, clientData=None) -> id
     |      
     |      This method registers a callback that is called when a dag node is about
     |      to be added to the Maya model.
     |      
     |       * dagNode (MObject) - Node that should acquire the callback
     |       * function - callable which will be passed a MObject indicating
     |         the node being added to the model and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addNodeRemovedFromModelCallback(...)
     |      addNodeRemovedFromModelCallback(dagNode, function, clientData=None) -> id
     |      
     |      This method registers a callback that is called when the
     |      specified dag node is being removed from the Maya model.
     |      
     |       * dagNode (MObject) - Node that should acquire the callback
     |       * function - callable which will be passed a MObject indicating
     |         the node being removed to the model and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  kActiveListModified = 0
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MNamespace(__builtin__.object)
     |  Access Maya namespace functionality.
     |  
     |  Static methods defined here:
     |  
     |  addNamespace(...)
     |      addNamespace(MString name, MString parent=None)
     |      
     |      Create the namespace 'name'. If the `parent' namespace is given
     |      the new namespace will be a child of `parent', otherwise the new
     |      namespace will be a child of the current namespace.
     |      The new namespace is added, but not made current. To make the
     |      new namespace be current use MNamespace.setCurrentNamespace().
     |      Note that adding a namespace changes the scene, so any code that calls
     |      this method needs to handle undo.  
     |      
     |           name    The new namespace to create. A qualified or unqualified 
     |                   name may be used. If a qualified name is used and one or 
     |                   more of the higher level namespaces do not already exist, 
     |                   they will be created automatically. For example, if the new 
     |                   name is 'a:b:c' and 'a' does not yet exist, then it will be 
     |                   created automatically and 'b' automatically created beneath 
     |                   it and finally 'c' will be created beneath 'b'.
     |                   If the supplied name contains invalid characters it will first 
     |                   be modified as per the validateName() method.
     |           parent  The fully qualified name of the namespace under which 
     |                   the new one is to be created. If not provided then the 
     |                   current namespace will be used. If the name of the new 
     |                   namespace is absolute (i.e. begins with a colon, ':a:b:c') 
     |                   then the 'parent' parameter will be ignored and the new namespace 
     |                   will be created under the root namespace.
     |  
     |  currentNamespace(...)
     |      currentNamespace() -> MString
     |      
     |      Get the name of the current namespace. This name is returned 
     |      as an absolute namepath (i.e. fully qualfied from the root 
     |      namespace downwards, ':a:b:c').
     |  
     |  getNamespaceFromName(...)
     |      getNamespaceFromName(MString fullName) -> MString
     |      
     |      Get namespace from a full name. 
     |      For example, given a full name: 'a:b:c:d:ball' this method 
     |      would return: 'a:b:c:d'.
     |  
     |  getNamespaceObjects(...)
     |      getNamespaceObjects(MString parentNamespace, bool recurse=False) -> MObjectArray
     |      
     |      Return an array of MObjects representing the object contained within 
     |      the specified namespace. To query the current namespace, call this 
     |      method in this way:
     |  
     |  getNamespaces(...)
     |      getNamespaces(MString parentNamespace=None, bool recurse=False) -> [MString]
     |      
     |      Return a list of all namespaces in the current namespace.
     |      Notes:
     |          1)  Names returned are always absolute (e.g. :a:b:sphere).
     |          2)  The list returned is just the child namespaces (and
     |              descendents if `recurse' is true). It thus never contains
     |              the root namespace in the list returned.
     |      
     |                 parentNamespace  the namespace to query.
     |                 recurse          optional parameter to control whether all
     |                                  namespaces or just top-level namespaces
     |                                  are returned. A value of false (the
     |                                  default if unspecified) causes only the
     |                                  top-level namespaces to be returned. If
     |                                  true, all namespaces will be listed.
     |  
     |  makeNamepathAbsolute(...)
     |      makeNamepathAbsolute(MString fullName) -> MString
     |      
     |      Make a namepath which is relative to the root into an absolute 
     |      namepath. For example, given the namepath 'a:sphere' this method 
     |      returns ':a:sphere'. It also culls out duplicate and trailing 
     |      separators, e.g. 'a:b::c:' will return ':a:b:c'.
     |  
     |  moveNamespace(...)
     |      moveNamespace(MString src, MString dst, bool force=False)
     |      
     |      Move the contents of the namespace 'src' into the namespace 'dst'. 
     |      Note that moving namespace contents changes the scene, so any code 
     |      that calls this method needs to handle undo. 
     |      
     |                src       source namespace from which objects will be moved. 
     |                dst       destination namespace to which objects will be moved. 
     |                force     optional parameter which if true forces the move 
     |                          even if name clashes occur, in which case nodes are 
     |                          renamed to ensure uniqueness. If false, the move 
     |                          will not happen if there are clashes. The default 
     |                          value is false.
     |  
     |  namespaceExists(...)
     |      namespaceExists(MString name) -> bool
     |      
     |      Check if a given namespace exists.
     |  
     |  parentNamespace(...)
     |      parentNamespace() -> MString
     |      
     |      Get the name of the current namespace's parent. This name is returned 
     |      as an absolute namepath (i.e. fully qualfied from the root namespace 
     |      downwards, ':a:b'). If the root namespace is 
     |      current, this method returns an error.
     |  
     |  relativeNames(...)
     |      relativeNames() -> bool
     |      
     |      Query Maya's current 'relative name lookup' state. Relative name 
     |      lookup causes lookups to be relative to the current namespace. 
     |      By default, relative name lookup in Maya is off, which causes 
     |      name lookups to be relative to the root namespace. For example, 
     |      if you have the object :a:b:sphere, and the current namespace is 
     |      ':a:b', in relative name lookup mode you can issue a command like 
     |      
     |          setAttr sphere.translateX 10; 
     |      
     |      If relative name lookup is off, you need to specify the full 
     |      namepath, e.g. 
     |      
     |          setAttr a:b:sphere.translateX 10;
     |  
     |  removeNamespace(...)
     |      removeNamespace(MString name, bool removeContents=False)
     |      
     |      Remove the specified namespace. 
     |      Note that removing a namespace changes the scene, so any code 
     |      that calls this method needs to handle undo.
     |  
     |  renameNamespace(...)
     |      renameNamespace(MString oldName, MString newName, MString parent=None)
     |      
     |      Rename the specified namespace to a new name with optional parent name. 
     |      Note that removing a namespace changes the scene, so any code 
     |      that calls this method needs to handle undo.
     |  
     |  rootNamespace(...)
     |      rootNamespace() -> MString
     |      
     |      Get the name of the root namespace. This name is an absolute
     |      namepath (i.e. prefixed by a ':').
     |  
     |  setCurrentNamespace(...)
     |      setCurrentNamespace(MString name) -> MString
     |      
     |      Set the specified namespace to be the current namespace. The 'name' 
     |      parameter you specify is relative to whatever namespace is current, 
     |      but any namespace can be specified by passing an absolute name (e.g. :a:b:c).  
     |      Note that making a namespace current changes the scene, so any code 
     |      that calls this method needs to handle undo. 
     |      
     |      To make the root namespace become current, use:
     |          MNamespace.setCurrentNamespace(MNamespace.rootNamespace())
     |  
     |  setRelativeNames(...)
     |      setRelativeNames(bool newState)
     |      
     |      Set relative name lookup mode. 
     |      
     |      Note that turning on or off relativeNames mode can change the scene, 
     |      so any code that calls this method needs to handle undo. 
     |      See MNamespace.relativeNames() for details on relative name lookup. 
     |      
     |      Note: relative name lookup mode is intended for bracketing user 
     |      code which needs to be namespace-independent. Leaving relative 
     |      name lookup enabled outside of your specific code could cause 
     |      functionality such as 3rd-party plugins that assume absolute 
     |      name lookup to fail. 
     |      
     |         newState         true to turn on relative name lookup, false to 
     |                          turn it off. Maya's default setting is false.
     |  
     |  stripNamespaceFromName(...)
     |      stripNamespaceFromName(MString fullName) -> MString
     |      
     |      Strips the namespace from a full name. 
     |      For example, given a full name: 'a:b:c:d:ball' this method  
     |      would return: 'ball'.
     |  
     |  validateName(...)
     |      validateName(MString name) -> MString
     |      
     |      Convert the specified name to a validated name which 
     |      contains no illegal characters.
     |      The leading illegal characters will be removed and
     |      other illegal characters will be converted to '_'.
     |      
     |      For example, name '@name@space@' will be converted to 'name_space_'.
     |      
     |      If the entire name consists solely of illegal characters, 
     |      e.g. '123' which contains only leading digits, then the 
     |      returned string will be empty.
    
    class MNodeClass(__builtin__.object)
     |  A class for performing node class-level operations in the dependency graph.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  addExtensionAttribute(...)
     |      Adds an extension attribute to the node class. An extension attribute is a class-level attribute which has been added dynamically to a node class. Because it is added at the class level, all nodes of that class will have the given attribute, and will only store the attribute's value if it differs from the default. Returns the type of the object at the end of the path.
     |  
     |  attribute(...)
     |      If passed an int: Returns the node class's i'th attribute. Raises IndexError if index is out of bounds.  If passed a string, Returns the node class's attribute having the given name. Returns MObject.kNullObj if the class does not have an attribute with that name.
     |  
     |  getAttributes(...)
     |      Returns an MObjectArray array containing all of the node class's attributes.
     |  
     |  hasAttribute(...)
     |      Returns True if the node class has an attribute of the given name, False otherwise.
     |  
     |  removeExtensionAttribute(...)
     |      Removes an extension attribute from the node class. Raises ValueError if attr is not an extension attribute of this node class.
     |  
     |  removeExtensionAttributeIfUnset(...)
     |      Removes an extension attribute from the node class, but only if there are no nodes in the graph with non-default values for this attribute. Returns True if the attribute was removed, False otherwise. Raises ValueError if attr is not an extension attribute of this node class.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  attributeCount
     |      Number of attributes the node class has. Includes extension attributes, since those are applied to the entire node class, but not dynamic attributes, since those are only applied to individual nodes.
     |  
     |  classification
     |      This is a string that is used in dependency nodes that are also shaders to provide more detailed type information to the rendering system.
     |  
     |  pluginName
     |      File path of the plug-in in which the node class is defined. The empty string is returned for Maya's built-in node types.
     |  
     |  typeId
     |      Type ID for the node class.
     |  
     |  typeName
     |      Name of the node class. This is the name that is given to the createNode command to create nodes of this type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MNodeMessage(MMessage)
     |  Class used to register callbacks for dependency node messages of specific dependency nodes.
     |  
     |  The class also provides the following AttributeMessage constants which describe
     |  the type of attribute changed/addedOrRemoved messages that has occurred:
     |    kConnectionMade               #a connection has been made to an attribute of this node
     |    kConnectionBroken     #a connection has been broken for an attribute of this node
     |    kAttributeEval                #an attribute of this node has been evaluated
     |    kAttributeSet         #an attribute value of this node has been set
     |    kAttributeLocked              #an attribute of this node has been locked
     |    kAttributeUnlocked    #an attribute of this node has been unlocked
     |    kAttributeAdded               #an attribute has been added to this node
     |    kAttributeRemoved     #an attribute has been removed from this node
     |    kAttributeRenamed     #an attribute of this node has been renamed
     |    kAttributeKeyable     #an attribute of this node has been marked keyable
     |    kAttributeUnkeyable   #an attribute of this node has been marked unkeyable
     |    kIncomingDirection    #the connection was coming into the node
     |    kAttributeArrayAdded  #an array attribute has been added to this node
     |    kAttributeArrayRemoved        #an array attribute has been removed from this node
     |    kOtherPlugSet         #the otherPlug data has been set
     |  
     |  
     |  The class also provides the following KeyableChangeMsg constants which
     |  allows user to prevent attributes from becoming (un)keyable:
     |    kKeyChangeInvalid
     |    kMakeKeyable
     |    kMakeUnkeyable
     |    kKeyChangeLast
     |  
     |  Method resolution order:
     |      MNodeMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addAttributeAddedOrRemovedCallback(...)
     |      addAttributeAddedOrRemovedCallback(node, function, clientData=None) -> id
     |      
     |      Registers callbacks for attribute add/removed messages.
     |      This is a more specific version of addAttributeChanged as only attribute
     |      added and attribute removed messages will trigger the callback.
     |      
     |       * node (MObject) - the node to register the callback for
     |       * function - callable which will be passed an AttributeMessage constant (see
     |         class doc for a list) containing the kind of attribute change triggering
     |         the callback, a MObject indicating the node's plug where the connection
     |         changed and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addAttributeChangedCallback(...)
     |      addAttributeChangedCallback(node, function, clientData=None) -> id
     |      
     |      This method registers a callback for attribute changed messages.
     |      See the AttributeChanged enum for a list of all possible messages
     |      that will trigger the callback.
     |      
     |      Note: Attribute Changed messages will not be generated
     |      while Maya is either in playback or scrubbing modes. If you need to
     |      do something during playback or scrubbing you will have to register
     |      a callback for the timeChanged message which is the only
     |      message that is sent during those modes.
     |      
     |      The callback function will be passed the type of attribute message
     |      that has occurred, the plug(s) for the attributes, and any client
     |      data that the user wishes to pass in.
     |      
     |       * node (MObject) - the node to register the callback for
     |       * function - callable which will be passed an AttributeMessage constant (see
     |         class doc for a list) containing the kind of attribute change triggering
     |         the callback, a MObject indicating the node's plug where the connection
     |         changed, a MObject indicating the plug opposite the node's plug where the
     |         connection changed and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addKeyableChangeOverride(...)
     |      addKeyableChangeOverride(plug, function, clientData=None) -> id
     |      
     |      This method registers a callback that is invoked by any class that
     |      changes the keyable state of an attribute.  When the callback is
     |      invoked, the API programmer can make a decision on how to handle
     |      the given keyable change event.  The programmer can either accept
     |      the keyable state change by returning True 
     |      or reject it by returning False.
     |      
     |      Note: you can only attach one callback keyable change override
     |      callback per attribute.  It is an error to attach more than one
     |      callback to the same attribute.
     |      
     |       * plug (MPlug) - The plug to which to attach the callback.
     |       * function - callable which will be passed a MPlug indicating the plug that
     |         has triggered the callback, the clientData object, and a KeyableChangeMsg
     |         constant (see class doc for a list) containing the kind of Keyable change
     |         the callback, a MObject indicating the node's plug where the connection.
     |         User can return True to accept the keyable state change or False to reject it.
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addNameChangedCallback(...)
     |      addNameChangedCallback(node, function, clientData=None) -> id
     |      
     |      Registers a callback for name changed messages.
     |      
     |       * node (MObject) - the node. If this is a NULL MObject then the callback
     |         applies to all node name changes.
     |       * function - callable which will be passed a MObject indicating the node whose
     |         name's changed, a string containing the previous name of the node and the
     |         clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addNodeAboutToDeleteCallback(...)
     |      addNodeAboutToDeleteCallback(node, function, clientData=None) -> id
     |      
     |      Registers a callback which will get called when a node is about to
     |      be deleted.
     |      
     |      The callback will be passed the MDGModifer that will be used to
     |      delete the node. This modifier can be used to do any DG modifications,
     |      such as disconnections, before the node is deleted.  These operations are
     |      also stored and performed when the deletion operation is undone or redone.
     |      
     |      The callback registered with this method will only get called when the
     |      deletion operation is first performed. Undos and redos will be handled solely
     |      through the MDGModifier which was passed to the callback on the original
     |      deletion. If you also wish to receive notification of deletion events
     |      when they are redone, you should register an additional callback using
     |      addNodePreRemovalCallback().
     |      
     |      When a node is deleted Maya automatically breaks all connections to that
     |      node. This process takes place after the callback has been called. This
     |      means that if you use the passed-in MDGModifier to break any
     |      connections to the node you must be sure to call the modifier's doIt() method
     |      before returning from the callback. Otherwise Maya will see that the connections
     |      still exist and try to delete them again, which can lead to errors.
     |      
     |      Note that it uses the passed-in MDGModifier to perform all the disconnections and
     |      connections. This ensures that if the deletion is undone or redone then all of
     |      the connections will be restored correctly.
     |      
     |      After it is done breaking connections, the callback calls the
     |      modifier's doIt() method to commit those disconnections. As noted
     |      above, this is necessary to ensure that Maya doesn't see the
     |      connections and try to break them again later on.
     |      
     |       * node (MObject) - the node to register the callback for
     |       * function - callable which will be passed a MObject indicating the node that
     |         will be deleted, a MDGModifier indicating the DG modifier used to delete the
     |         node and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addNodeDestroyedCallback(...)
     |      addNodeDestroyedCallback(node, function, clientData=None) -> id
     |      
     |      Registers a callback which will get called when a node's destructor is
     |      called.
     |      
     |       * node (MObject) - the node to register the callback for
     |       * function - callable which will be passed the clientData object
     |       * clientData - User defined data that will be passed to the callback
     |         function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addNodeDirtyCallback(...)
     |      addNodeDirtyCallback(node, function, clientData=None) -> id
     |      
     |      Registers a callback for node dirty messages.
     |      
     |       * node (MObject) - the node to register the callback for
     |       * function - callable which will be passed a MObject indicating the node
     |         that has  become dirty and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addNodeDirtyPlugCallback(...)
     |      addNodeDirtyPlugCallback(node, function, clientData=None) -> id
     |      
     |      Registers a callback for node dirty messages.  This callback provides
     |      the plug on the node that was dirtied.  Only provides dirty information
     |      on input plugs.
     |      
     |       * node (MObject) - the node to register the callback for
     |       * function - callable which will be passed a MObject indicating the node
     |         that has  become dirty, a MPlug indicating the plug on the node that has
     |         become dirty and the clientData object * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addNodePreRemovalCallback(...)
     |      addNodePreRemovalCallback(node, function, clientData=None) -> id
     |      
     |      Registers a callback which will get called before a node is deleted.
     |      This callback is called before connections on the node are removed.
     |      Unlike the aboutToDelete callback, this callback will be invoked whenever
     |      the node is deleted, even during a redo.
     |      
     |      Pre-removal and aboutToDelete callbacks serve different purposes.  If DG
     |      changes need to be made when a node is deleted, the aboutToDelete callback
     |      should be used to add undoable operations to an MDGModifier to perform
     |      these changes.  When the desired actions cannot be accomplished using the
     |      MDGModifier passed to the aboutToDelete callback, this callback can be
     |      used to receive notification of the deletion event, even during redo.
     |      
     |      Note that this callback method should not perform any DG operations.
     |      
     |       * node (MObject) - the node to register the callback for
     |       * function - callable which will be passed a MObject indicating the node
     |         that is being deleted and the clientData object
     |       * clientData - User defined data that will be passed to the callback
     |         function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addUuidChangedCallback(...)
     |      addUuidChangedCallback(node, function, clientData=None) -> id
     |      
     |      Registers a callback for UUID changed messages.
     |      
     |       * node (MObject) - the node to register the callback for
     |       * function - callable which will be passed a MObject indicating the node
     |         that is being modified, a MUuid containing the previous UUID of the node
     |         and the clientData object
     |       * clientData - User defined data that will be passed to the callback
     |         function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  kAttributeAdded = 64
     |  
     |  kAttributeArrayAdded = 4096
     |  
     |  kAttributeArrayRemoved = 8192
     |  
     |  kAttributeEval = 4
     |  
     |  kAttributeKeyable = 512
     |  
     |  kAttributeLocked = 16
     |  
     |  kAttributeRemoved = 128
     |  
     |  kAttributeRenamed = 256
     |  
     |  kAttributeSet = 8
     |  
     |  kAttributeUnkeyable = 1024
     |  
     |  kAttributeUnlocked = 32
     |  
     |  kConnectionBroken = 2
     |  
     |  kConnectionMade = 1
     |  
     |  kIncomingDirection = 2048
     |  
     |  kKeyChangeInvalid = 0
     |  
     |  kKeyChangeLast = 3
     |  
     |  kLast = 32768
     |  
     |  kMakeKeyable = 1
     |  
     |  kMakeUnkeyable = 2
     |  
     |  kOtherPlugSet = 16384
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MObject(__builtin__.object)
     |  Opaque wrapper for internal Maya objects.
     |  
     |  Methods defined here:
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  apiType(...)
     |      Returns the function set type for the object.
     |  
     |  hasFn(...)
     |      Tests whether object is compatible with the specified function set.
     |  
     |  isNull(...)
     |      Tests whether there is an internal Maya object.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  apiTypeStr
     |      (readonly) String containing the object's type name.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kNullObj = <OpenMaya.MObject object>
    
    class MObjectArray(__builtin__.object)
     |  Array of MObject values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MObjectHandle(__builtin__.object)
     |  Generic Class for validating MObjects.
     |  
     |  Methods defined here:
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  assign(...)
     |      assign(source) -> self
     |      
     |      Assigns this MObjectHandle to an instance of another MObjectHandle, or to a MObject instance.
     |      
     |      * source (MObject/MObjectHandle) - other instance to assign from.
     |  
     |  hashCode(...)
     |      hashCode() -> int
     |      
     |      Returns a hash code for the internal Maya object referenced by the MObject within this MObjectHandle. If the MObject is null or no longer alive then 0 will be returned, otherwise the hash code is guaranteed to be non-zero
     |  
     |  isAlive(...)
     |      isAlive() -> bool
     |      
     |      Returns the live state of the associated MObject. An object can still be 'alive' but not 'valid' (eg. a deleted object that resides in the undo queue).
     |  
     |  isValid(...)
     |      isValid() -> bool
     |      
     |      Returns the validity of the associated MObject.
     |  
     |  object(...)
     |      object() -> MObject
     |      
     |      Returns the MObject associated with this handle. The returned MObject will be MObject.kNullObj if the object is invalid.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MObjectSetMessage(MMessage)
     |  Class used to register callbacks for set modified related messages.
     |  
     |  Method resolution order:
     |      MObjectSetMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addSetMembersModifiedCallback(...)
     |      addSetMembersModifiedCallback(node, function, clientData=None) -> id
     |      
     |      Registers callbacks for set modified messages.
     |      
     |       * node (MObject) - the set that has triggered a setModified event
     |       * function (MMessage::MNodeFunction) - the callback function
     |       * function - callable which will be passed a MObject indicating the
     |         set that has triggered a setModified event and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MPlane(__builtin__.object)
     |  This class describes a mathematical plane.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  distance(...)
     |      distance() -> float
     |      
     |      Returns the distance of the plane along the normal.
     |  
     |  distanceToPoint(...)
     |      distanceToPoint(point, signed=False) -> float
     |      
     |      Returns the distance from the plane to the specified point.
     |      
     |      * point (MVector) - The point from which to calculate the distance
     |      * signed (bool) - Whether to return a signed or unsigned distance
     |  
     |  normal(...)
     |      normal() -> MVector
     |      
     |      Returns the normal of the plane.
     |  
     |  setPlane(...)
     |      setPlane(a, b, c, d) -> self
     |      setPlane(n, d) -> self
     |      
     |      Set the equation of the plane.
     |      
     |      From values : ax + by + cz + d = 0
     |      * a (float) - The plane equation's x coefficent
     |      * b (float) - The plane equation's y coefficent
     |      * c (float) - The plane equation's z coefficent
     |      * d (float) - The plane equation's constant distance term
     |      
     |      From a normal and offset
     |      * n (MVector) - The plane's normal
     |      * d (float) - The offset of the plane along the normal
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MPlug(__builtin__.object)
     |  Create and access dependency node plugs.
     |  
     |  Methods defined here:
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  array(...)
     |      Returns a plug for the array of plugs of which this plug is an element.
     |  
     |  asBool(...)
     |      Retrieves the plug's value, as a boolean.
     |  
     |  asChar(...)
     |      Retrieves the plug's value, as a single-byte integer.
     |  
     |  asDouble(...)
     |      Retrieves the plug's value, as a double-precision float.
     |  
     |  asFloat(...)
     |      Retrieves the plug's value, as a single-precision float.
     |  
     |  asInt(...)
     |      Retrieves the plug's value, as a regular integer.
     |  
     |  asMAngle(...)
     |      Retrieves the plug's value, as an MAngle.
     |  
     |  asMDataHandle(...)
     |      Retrieve the current value of the attribute this plug references.
     |  
     |  asMDistance(...)
     |      Retrieves the plug's value, as an MDistance.
     |  
     |  asMObject(...)
     |      Retrieves the plug's value, as as an MObject containing a direct reference to the plug's data.
     |  
     |  asMTime(...)
     |      Retrieves the plug's value, as an MTime.
     |  
     |  asShort(...)
     |      Retrieves the plug's value, as a short integer.
     |  
     |  asString(...)
     |      Retrieves the plug's value, as a string.
     |  
     |  attribute(...)
     |      Returns the attribute currently referenced by this plug.
     |  
     |  child(...)
     |      Returns a plug for the specified child attribute of this plug.
     |  
     |  connectedTo(...)
     |      Returns an array of plugs which are connected to this one.
     |  
     |  connectionByPhysicalIndex(...)
     |      Returns a plug for the index'th connected element of this plug.
     |  
     |  constructHandle(...)
     |      Constructs a data handle for the plug.
     |  
     |  copy(...)
     |      Copies one plug to another.
     |  
     |  destinations(...)
     |      If this plug is a source, return the destination plugs connected to it.
     |      If this plug is not a source, a null plug is returned.
     |      This method will produce the networked version of the connected plug.
     |  
     |  destinationsWithConversions(...)
     |      If this plug is a source, return the destination plugs connected to it.
     |      This method is very similar to the destinations() method.  The only difference is that the destinations() method skips over any unit conversion node connected to this source, and returns the destination of the unit conversion node.
     |      destinationsWithConversionNode() does not skip over unit conversion nodes, and returns the destination plug on a unit conversion node, if present.
     |      Note that the behavior of connectedTo() is identical to destinationsWithConversions(), that is, do not skip over unit conversion nodes.
     |  
     |  destructHandle(...)
     |      Destroys a data handle previously constructed using constructHandle().
     |  
     |  elementByLogicalIndex(...)
     |      Returns a plug for the element of this plug array having the specified logical index.
     |  
     |  elementByPhysicalIndex(...)
     |      Returns a plug for the element of this plug array having the specified physical index.
     |  
     |  evaluateNumElements(...)
     |      Like numElements() but evaluates all connected elements first to ensure that they are included in the count.
     |  
     |  getExistingArrayAttributeIndices(...)
     |      Returns an array of all the plug's logical indices which are currently in use.
     |  
     |  getSetAttrCmds(...)
     |      Returns a list of strings containing the setAttr commands (in MEL syntax) for this plug and all of its descendents.
     |  
     |  isDefaultValue(...)
     |      Returns a value indicating if the plug's value is equivalent to the plug's default value.
     |  
     |  isFreeToChange(...)
     |      Returns a value indicating if the plug's value can be changed, after taking into account the effects of locking and connections.
     |  
     |  logicalIndex(...)
     |      Returns this plug's logical index within its parent array.
     |  
     |  name(...)
     |      Returns the name of the plug.
     |  
     |  node(...)
     |      Returns the node that this plug belongs to.
     |  
     |  numChildren(...)
     |      Returns the number of children this plug has.
     |  
     |  numConnectedChildren(...)
     |      Returns the number of this plug's children which have connections.
     |  
     |  numConnectedElements(...)
     |      Returns the number of this plug's elements which have connections.
     |  
     |  numElements(...)
     |      Returns the number of the plug's logical indices which are currently in use. Connected elements which have not yet been evaluated may not yet fully exist and may be excluded from the count.
     |  
     |  parent(...)
     |      Returns a plug for the parent of this plug.
     |  
     |  partialName(...)
     |      Returns the name of the plug, formatted according to various criteria.
     |  
     |  selectAncestorLogicalIndex(...)
     |      Changes the logical index of the specified attribute in the plug's path.
     |  
     |  setAttribute(...)
     |      Switches the plug to reference the given attribute of the same node as the previously referenced attribute.
     |  
     |  setBool(...)
     |      Sets the plug's value as a boolean.
     |  
     |  setChar(...)
     |      Sets the plug's value as a single-byte integer.
     |  
     |  setDouble(...)
     |      Sets the plug's value as a double-precision float.
     |  
     |  setFloat(...)
     |      Sets the plug's value as a single-precision float.
     |  
     |  setInt(...)
     |      Sets the plug's value as a regular integer.
     |  
     |  setMAngle(...)
     |      Sets the plug's value as an MAngle.
     |  
     |  setMDataHandle(...)
     |      Sets the plug's value as a data handle.
     |  
     |  setMDistance(...)
     |      Sets the plug's value as an MDistance.
     |  
     |  setMObject(...)
     |      Sets the plug's value as an MObject.
     |  
     |  setMPxData(...)
     |      Sets the plug's value using custom plug-in data.
     |  
     |  setMTime(...)
     |      Sets the plug's value as an MTime.
     |  
     |  setNumElements(...)
     |      Pre-allocates space for count elements in an array of plugs.
     |  
     |  setShort(...)
     |      Sets the plug's value as a short integer.
     |  
     |  setString(...)
     |      Sets the plug's value as a string.
     |  
     |  source(...)
     |      If this plug is a destination, return the source plug connected to it.
     |      If this plug is not a destination, a null plug is returned.
     |      This method will produce the networked version of the connectedplug.
     |  
     |  sourceWithConversion(...)
     |      If this plug is a destination, return the source plug connected to it.
     |      This method is very similar to the source() method.  The only difference is that the source() method skips over any unit conversionnode connected to this destination, and returns the source of the unit conversion node.
     |      sourceWithConversion() does not skip over unitconversion nodes, and returns the source plug on a unit conversionnode, if present.
     |      Note that the behavior of connectedTo() is identical to sourceWithConversion(), that is, do not skip over unit conversion nodes.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  info
     |      Description of the plug for debugging purposes, in the form node:attr1.attr2[].attr3...
     |  
     |  isArray
     |      True if plug is an array of plugs.
     |  
     |  isCaching
     |      True if plug's value is being cached.
     |  
     |  isChannelBox
     |      True if plug will appear in Maya's Channel Box.
     |  
     |  isChild
     |      True if plug is a child of a compound parent.
     |  
     |  isCompound
     |      True if plug is compound parent with children.
     |  
     |  isConnected
     |      True if plug has any connections.
     |  
     |  isDestination
     |      True if plug is the destination of a connection.
     |  
     |  isDynamic
     |      True if plug is for a dynamic attribute.
     |  
     |  isElement
     |      True if plug is an element of an array of plugs.
     |  
     |  isFromReferencedFile
     |      True if plug is part of a connection from a referenced file.
     |  
     |  isIgnoredWhenRendering
     |      True if connetions to plug are ignored during rendering.
     |  
     |  isKeyable
     |      True if keys can be set on plug from Maya's UI.
     |  
     |  isLocked
     |      True if plug is locked against changes.
     |  
     |  isNetworked
     |      True if plug is networked.
     |  
     |  isNull
     |      True if plug does not reference an attribute.
     |  
     |  isProcedural
     |      True if plug is procedural.
     |  
     |  isSource
     |      True if plug is the source of a connection.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kAll = 0
     |  
     |  kChanged = 2
     |  
     |  kChildrenNotFreeToChange = 2
     |  
     |  kFreeToChange = 0
     |  
     |  kLastAttrSelector = 3
     |  
     |  kNonDefault = 1
     |  
     |  kNotFreeToChange = 1
    
    class MPlugArray(__builtin__.object)
     |  Array of MPlug values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MPoint(__builtin__.object)
     |  3D point with double-precision coordinates.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __div__(...)
     |      x.__div__(y) <==> x/y
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __isub__(...)
     |      x.__isub__(y) <==> x-=y
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __rdiv__(...)
     |      x.__rdiv__(y) <==> y/x
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  cartesianize(...)
     |      Convert point to cartesian form.
     |  
     |  distanceTo(...)
     |      Return distance between this point and another.
     |  
     |  homogenize(...)
     |      Convert point to homogenous form.
     |  
     |  isEquivalent(...)
     |      Test for equivalence of two points, within a tolerance.
     |  
     |  rationalize(...)
     |      Convert point to rational form.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  w
     |      W coordinate
     |  
     |  x
     |      X coordinate
     |  
     |  y
     |      Y coordinate
     |  
     |  z
     |      Z coordinate
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kOrigin = maya.api.OpenMaya.MPoint(0, 0, 0, 1)
     |  
     |  kTolerance = 1e-10
    
    class MPointArray(__builtin__.object)
     |  Array of MPoint values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MPointOnMesh(__builtin__.object)
     |  This class is used to return information about a point on the
     |  surface of a mesh: 3D position, normal, barycentric coordinates,
     |  etc. The point can be anywhere on the mesh, not just at its
     |  vertices.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  barycentricCoords
     |      (float, float) Tuple containing the barycentric coordinates of the
     |      point. If the triangle has vertices (A, B, C) then barycentric
     |      coordinates of (u, v) mean that the 3D position of the point is
     |      u*A + v*B + (1 - u - v)*C. The barycentric coordinates are
     |      particularly useful when interpolating attributes from one mesh to
     |      another.
     |  
     |  face
     |      (int) Mesh-global index of the face containing the point.
     |  
     |  normal
     |      (MFloatVector) Surface normal vector at the point.
     |  
     |  point
     |      (MFloatPoint) 3D position of the point.
     |  
     |  triangle
     |      (int) Face-local index of the triangle containing the point.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MPolyMessage(MMessage)
     |  Class used to register callbacks for poly related messages.
     |  
     |  Method resolution order:
     |      MPolyMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addPolyComponentIdChangedCallback(...)
     |      addPolyComponentIdChangedCallback(node, (wantVertIds, wantEdgeIds, wantFaceIds), function, clientData=None) -> id
     |      
     |      This method registers a callback that should be called whenever a poly
     |      component id is modified.
     |      Currently, there are some cases where the component ids for a polygonal
     |      mesh can be modified without generating a callback or without generating a
     |      correct mapping.  These cases are outlined below.
     |      
     |      - Polygonal mesh has construction history enabled, and there is more than
     |               one topology changing operation in the history.  In this case, the
     |               callback is only called when the component ID mapping changes for the
     |               most recent operation, and performs the mapping with respect to the
     |               input and output meshes for this operation node.
     |      - Polygonal mesh has construction history enabled, and the most recent
     |               topology changing operation is no longer the most recent operation.
     |               In this case, no id remapping callbacks will be invoked when the
     |               attributes on the operation node are changed in the history.
     |      - When undo is used to revert a topology changing operation, the callback
     |               will not be invoked.  The MEventMessage class can be used to get
     |               notification when undo is performed.
     |      
     |      
     |      Component id mapping should always work correctly when construction history
     |      is off.  It should also work correctly when construction history is on and
     |      only the most recent operation is permitted to be adjusted (eg. changing
     |      the distance parameter for a merge vertex node, when merge vertices was the
     |      most recent operation.)  In either case, undo will not produce a poly
     |      message callback.
     |      
     |       * node (MObject) - the node the callback function should listen to
     |       *(wantVertIds, wantEdgeIds, wantFaceIds) - tuple of 3 booleans specifying
     |         what arrays should be provided to the callback function when it is
     |         invoked: (vertex indices, edge indices, face indices).
     |       * function - callable which will be passed a tuple and the clientData object.
     |         The tuple will contain three MUintArrays which are, respectively, the vertex,
     |         edge and face ids of the modified components. Only the arrays which were requested
     |         when the callback was registered will contain data, the others will be empty.
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addPolyTopologyChangedCallback(...)
     |      addPolyTopologyChangedCallback(node, function, clientData=None) -> id
     |      
     |      This method registers a callback that will be called when a node impacting
     |      the topology of a meshShape is modified. Because the callback is invoked
     |      before the mesh has evaluated, the new topology data cannot be
     |      queried at the time the callback is received. If you want to receive a
     |      callback at a time when the new mesh data can be queried, use the
     |      following technique:
     |      
     |      - Use this method to register a topology-changed callback.
     |      - In the topology-changed callback, add an MNodeMessage.addAttributeChangedCallback on the mesh shape.
     |      - In the attribute-changed callback, check the inputs for an MNodeMessage.kAttributeEval message received by the "outMesh" plug of the mesh.
     |      - Once you have received the eval message on that plug, the attribute-changed callback can be removed and the mesh topology can be queried.
     |      
     |       * node (MObject) - the node the callback function should listen to
     |       * function - callable which will be passed the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MPxAttributePatternFactory(__builtin__.object)
     |  Base class for custom attribute pattern factories.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MPxCommand(__builtin__.object)
     |  Base class for custom commands.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  doIt(...)
     |      Called by Maya to execute the command.
     |  
     |  hasSyntax(...)
     |      Called by Maya to determine if the command provides an MSyntax object describing its syntax.
     |  
     |  isUndoable(...)
     |      Called by Maya to determine if the command supports undo.
     |  
     |  redoIt(...)
     |      Called by Maya to redo a previously undone command.
     |  
     |  syntax(...)
     |      Returns the command's MSyntax object, if it has one.
     |  
     |  undoIt(...)
     |      Called by Maya to undo a previously executed command.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  appendToResult(...)
     |      Append a value to the result to be returned by the command.
     |  
     |  clearResult(...)
     |      Clears the command's result.
     |  
     |  currentResult(...)
     |      Returns the command's current result.
     |  
     |  currentResultType(...)
     |      Returns the type of the current result.
     |  
     |  displayError(...)
     |      Display an error message.
     |  
     |  displayInfo(...)
     |      Display an informational message.
     |  
     |  displayWarning(...)
     |      Display a warning message.
     |  
     |  isCurrentResultArray(...)
     |      Returns true if the command's current result is an array of values.
     |  
     |  setResult(...)
     |      Set the value of the result to be returned by the command.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  commandString
     |      Command string to be echoed to the user.
     |  
     |  historyOn
     |      Determines if construction history is on for the command.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kDouble = 1
     |  
     |  kLong = 0
     |  
     |  kNoArg = 3
     |  
     |  kString = 2
    
    class MPxData(__builtin__.object)
     |  Base Class for User-defined Dependency Graph Data Types.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  copy(...)
     |      copy(src) -> self
     |      
     |      This method initializes an instance of an MPxData derived class from another existing instance.  This method can be thought of as the second half of a copy constructor for the class.  The default constructor has already been called for the instance, and this method is used to set the private data by copying the values from an existing instance.
     |      This method must be implemented by the derived class.
     |      
     |      * src (MPxData) - The object from which to copy the private data
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Returns the name of the custom data type.
     |      This method must be implemented by the derived class.
     |  
     |  readASCII(...)
     |      readASCII(argList, endOfTheLastParsedElement) -> int
     |      
     |      Creates Data in Data Block as specified by input from ASCII file record.
     |      Returns the new last argument parsed by this method.
     |      
     |      * argList (MArgList) - List of arguments read from ASCII record* endOfTheLastParsedElement (int) - points to last argument already parsed.
     |  
     |  readBinary(...)
     |      readBinary(in, length) -> int
     |      
     |      Creates Data in Data Block as specified by binary data from the given stream.
     |      Returns the numbers of data bytes processed or -1 in case of error.
     |      
     |      * in (bytearray) - Input stream
     |      * length (int) - Length in bytes of binary data to be read.
     |  
     |  typeId(...)
     |      typeId() -> MTypeId
     |      
     |      Determines the type id of the Data object.
     |      This method must be implemented by the derived class.
     |  
     |  writeASCII(...)
     |      writeASCII() -> string
     |      
     |      Encodes Data in accordance with the ASCII file format and returns as string.
     |  
     |  writeBinary(...)
     |      writeBinary() -> bytearray
     |      
     |      Encodes Data in accordance with the binary file format and returns as bytearray.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kData = 0
     |  
     |  kGeometryData = 1
     |  
     |  kLast = 2
    
    class MPxGeometryData(MPxData)
     |  Base Class for User-defined Dependency Graph Geometry Data Types.
     |  
     |  Method resolution order:
     |      MPxGeometryData
     |      MPxData
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  deleteComponent(...)
     |      deleteComponent(compList) -> bool
     |      
     |      This method should be overridden if this data is to support component deletion. For user defined shapes (MPxSurfaceShape) which support components, this method must be overridden if component deletion is to be supported when the shape has history.
     |      
     |      Returns True if the deletion was successfull, False otherwise.
     |      
     |      * compList (MObjectArray) - a list of components that are to be deleted
     |  
     |  deleteComponentsFromGroups(...)
     |      deleteComponentsFromGroups(compList, groupIdArray, groupComponentArray) -> bool
     |      
     |      This method should be overridden to modify the groups that flows along with the geometry, as part of the data, based on the components being deleted. It should intelligently update the groups based on what gets deleted. The class MFnGeometryData can be used to access and modify grouping information for data.
     |      
     |      Returns True if the deletion was successfull, False otherwise.
     |      
     |      The groupIdArray and groupComponentArray should contain the updated grouping information after the deletion has occurred.
     |      
     |      * compList (MObjectArray) - a list of components that are to be deleted
     |      * groupIdArray [OUT] (MIntArray) - array of group id's
     |      * groupComponentArray (MObjectArray) - array of updated components, one for each group id
     |  
     |  getMatrix(...)
     |      getMatrix(matrix) -> bool
     |      
     |      Gets the matrix associated to MPxGeometryData and retursn True if is identity
     |      
     |      * matrix [OUT] (MMatrix) - the returned matrix that takes a point from local object space to world space.
     |  
     |  iterator(...)
     |      iterator(componentList, component, useComponents, world=None) -> MPxGeometryIterator
     |      
     |      Associates a control point based geometry iterator with this data.
     |      This method is used in conjunction with MPxSurfaceShape and should be overridden if your shape is to support maya's deformations.
     |      
     |      The useComponents argument specifies whether the iteration is over the given componentList or the component.
     |      
     |      Returns an iterator for your geometry.
     |      
     |      * componentList (MObjectArray) - a list of components that are to be iterated over.
     |      * component (MObject) - a component to be iterator over.
     |      * useComponents (bool) - if True then componentList is to be iterated over, otherwise the iteration is on component.
     |      * world (bool) - specifies whether the iteration is for world space data.
     |  
     |  smartCopy(...)
     |      smartCopy(srcGeom) -> self
     |      
     |      This method is used in conjunction with MPxSurfaceShape classes which support maya's deformations.
     |      
     |      This method is used to prvoide maya with an efficient way to copy the source data into the memory of this data with as little memory allocation as possible.
     |      
     |      This method is not mandatory and only needs to be overridden to improve performance of deformations on shapes.
     |      
     |      * srcGeom (MPxGeometryData) - the data to be copied
     |  
     |  updateCompleteVertexGroup(...)
     |      updateCompleteVertexGroup(component) -> bool
     |      
     |      This method is used in conjunction with MPxSurfaceShape classes which support maya's deformations.
     |      
     |      This method should make sure that complete vertex group data is up-to-date.
     |      If the given component is not complete (i.e. it represents all elements of your geometry) then you must mark is as complete using the methods of MFnComponent and return true if the component was updated, false if it was already complete.
     |      
     |      This method is used by deformers when deforming the "whole" object and not just selected components.
     |      
     |      Returns true if the component was updated, false if it was already complete.
     |      
     |      * component (MObject) - the component to test
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  matrix
     |      The matrix associated to MPxGeometryData.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MPxData:
     |  
     |  copy(...)
     |      copy(src) -> self
     |      
     |      This method initializes an instance of an MPxData derived class from another existing instance.  This method can be thought of as the second half of a copy constructor for the class.  The default constructor has already been called for the instance, and this method is used to set the private data by copying the values from an existing instance.
     |      This method must be implemented by the derived class.
     |      
     |      * src (MPxData) - The object from which to copy the private data
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Returns the name of the custom data type.
     |      This method must be implemented by the derived class.
     |  
     |  readASCII(...)
     |      readASCII(argList, endOfTheLastParsedElement) -> int
     |      
     |      Creates Data in Data Block as specified by input from ASCII file record.
     |      Returns the new last argument parsed by this method.
     |      
     |      * argList (MArgList) - List of arguments read from ASCII record* endOfTheLastParsedElement (int) - points to last argument already parsed.
     |  
     |  readBinary(...)
     |      readBinary(in, length) -> int
     |      
     |      Creates Data in Data Block as specified by binary data from the given stream.
     |      Returns the numbers of data bytes processed or -1 in case of error.
     |      
     |      * in (bytearray) - Input stream
     |      * length (int) - Length in bytes of binary data to be read.
     |  
     |  typeId(...)
     |      typeId() -> MTypeId
     |      
     |      Determines the type id of the Data object.
     |      This method must be implemented by the derived class.
     |  
     |  writeASCII(...)
     |      writeASCII() -> string
     |      
     |      Encodes Data in accordance with the ASCII file format and returns as string.
     |  
     |  writeBinary(...)
     |      writeBinary() -> bytearray
     |      
     |      Encodes Data in accordance with the binary file format and returns as bytearray.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MPxData:
     |  
     |  kData = 0
     |  
     |  kGeometryData = 1
     |  
     |  kLast = 2
    
    class MPxGeometryIterator(__builtin__.object)
     |  Base class for user defined geometry iterators.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  component(...)
     |      component() -> MObject
     |      
     |      Returns a component for the current item in the iteration.
     |  
     |  geometry(...)
     |      geometry() -> long/object
     |      
     |      Returns the user geometry that this iterator is iterating over.
     |  
     |  hasNormals(...)
     |      hasNormals() -> bool
     |      
     |      Returns whether the underlying geometry has normals.
     |  
     |  hasPoints(...)
     |      hasPoints() -> bool
     |      
     |      Returns whether the underlying geometry has point data.
     |  
     |  index(...)
     |      index() -> int
     |      
     |      Returns a unique index for the current item in the iteration.
     |      If the iteration is over the whole geometry then this index is the same as current point. If the iteration is over some elements of the geometry specified by a component then this index is the index in your geometry.
     |  
     |  indexUnsimplified(...)
     |      indexUnsimplified() -> int
     |      
     |      Returns a unique index for the current item in the iteration.
     |      Rather than being the iterator index this is the index for the actual item when simplification is skipping items. This index will be equal to index() if no simplification, otherwise it will be larger.
     |  
     |  isDone(...)
     |      isDone() -> bool
     |      
     |      Returns whether all the items have been traversed yet.
     |  
     |  iteratorCount(...)
     |      iteratorCount() -> int
     |      
     |      Returns an estimate of how many items will be iterated over.
     |  
     |  next(...)
     |      next() -> self
     |      
     |      Advances to the next component.
     |  
     |  point(...)
     |      point() -> MPoint
     |      
     |      Returns the current component's positional data.
     |  
     |  reset(...)
     |      reset() -> self
     |      
     |      Resets the iterator to the start of the components so that another pass over them may be made.
     |  
     |  setObject(...)
     |      setObject(shape) -> self
     |      
     |      Optional method to set a shape object to iterate over to allow tweaking of the shape's history (input geometry).
     |      
     |      * shape (MPxSurfaceShape) - a user defined shape object.
     |  
     |  setPoint(...)
     |      setPoint(point) -> self
     |      
     |      Sets the current component's positional data.
     |      
     |      * point (MPoint) - the new positional value to set.
     |  
     |  setPointGetNext(...)
     |      setPointGetNext(point) -> int
     |      
     |      Sets the current component's positional data, and returns the next index value.
     |      
     |      * point (MPoint) - the positional value to set.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  currentPoint
     |      The current index of the iteration.
     |      This value is used when iterating over all elements of your geometry, i.e. when there are no components specified.
     |  
     |  maxPoints
     |      The largest index that will be iterated over.
     |      This value is used when iterating over all elements of your geometry, i.e. when there are no components specified.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MPxNode(__builtin__.object)
     |  Base class for user defined dependency nodes.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addExternalContentForFileAttr(...)
     |      addExternalContentForFileAttr(table, attr) -> bool
     |      
     |      This method is a helper for derived clases implementing getExternalContent().  It augments the external content info table passed in with an entry describing external content whose location is described by the specified attribute.
     |      
     |      The method will not overwrite existing items, i.e. items with the same key. (attribute name).  In this context, overwriting an item means the caller has called this function twice with the same attribute, or that two separate but identically named attributes were used.  If replacing an entry is the desired effect, it is the caller's responsibility to erase the previous item first.
     |      
     |      * table [OUT] (MExternalContentInfoTable) - table The table in which the new entry will be added.
     |      * attr (MObject) - The attribute for which the plug value will be queried for a location.
     |      
     |      Returns True if an item was sucessfully added to the table.  False if the attribute does not describe a non-empty location, or an item with the same key was already present in the table.
     |  
     |  compute(...)
     |      compute(plug, dataBlock) -> self
     |      
     |      This method should be overridden in user defined nodes.
     |      
     |      Recompute the given output based on the nodes inputs.  The plug represents the data value that needs to be recomputed, and the data block holds the storage for all of the node's attributes.
     |      
     |      The MDataBlock will provide smart handles for reading and writing this node's attribute values.  Only these values should be used when performing computations.
     |      
     |      When evaluating the dependency graph, Maya will first call the compute method for this node.  If the plug that is provided to the compute indicates that that the attribute was defined by the Maya parent node, the compute method should return None.  When this occurs, Maya will call the internal Maya node from which the user-defined node is derived to compute the plug's value. Returning any othervalue (including self) will tell Maya that this node successfully computed theplug. Raising an exception will tell Maya that this node failed at computingthe plug. Note that in most cases, Maya ignores node compute failures.
     |      
     |      In other words, the compute method should return None to get the Maya parent class to compute the plug. It should return self (or any other value) to indicate that the plug was computed successfully.
     |      
     |      This means that a user defined node does not need to be concerned with computing inherited output attributes.  However, if desired, these can be safely recomputed by this method to change the behaviour of the node.
     |      
     |      * plug (MPlug) - plug representing the attribute that needs to be recomputed.
     |      * block (MDataBlock) - data block containing storage for the node's attributes.
     |  
     |  connectionBroken(...)
     |      connectionBroken( plug, otherPlug, asSrc) -> self
     |      
     |      This method gets called when connections are broken with attributes of this node.
     |      
     |      * plug (MPlug) - attribute on this node.
     |      * otherPlug (MPlug) - attribute on other node.
     |      * asSrc (bool) - is this plug a source of the connection.
     |  
     |  connectionMade(...)
     |      connectionMade(plug, otherPlug, asSrc) -> self
     |      
     |      This method gets called when connections are made to attributes of this node.
     |      
     |      * plug (MPlug) - attribute on this node.
     |      * otherPlug (MPlug) - attribute on other node.
     |      * asSrc (bool) - is this plug a source of the connection.
     |  
     |  copyInternalData(...)
     |      copyInternalData(node) -> self
     |      
     |      This method is overriden by nodes that store attribute data in some internal format.
     |      
     |      On duplication this method is called on the duplicated node with the node being duplicated passed as the parameter.  Overriding this method gives your node a chance to duplicate any internal data you've been storing and manipulating outside of normal attribute data.
     |      
     |      * node (MPxNode) - the node that is being duplicated.
     |  
     |  dependsOn(...)
     |      dependsOn( plug, otherPlug) -> bool/None
     |      
     |      This method may be overridden by the user defined node. It should only be required to override this on rare occasions.
     |      
     |      This method determines whether a specific attribute depends on another attribute.
     |      
     |      You should return None to specify that Maya should determines the dependency (default).
     |      
     |      This is mainly to define dependency of dynamic attributes, since attributeAffects does not work with dynamic attributes.
     |      
     |      * plug (MPlug) - attribute on this node.
     |      * otherPlug (MPlug) - attribute on other node.
     |  
     |  doNotWrite(...)
     |      doNotWrite() -> bool
     |      
     |      use this method to query the "do not write" state of this proxy node. True is returned if this node will not be saved when the maya model is written out.
     |  
     |  forceCache(...)
     |      forceCache(ctx=MDGContext::current()) -> MDataBlock
     |      
     |      Get the datablock for this node. If there is no datablock then one will be created.
     |      NOTE: This should be used only in places where fast access to the datablock outside of a compute is critical such as the transformUsing method of MPxSurfaceShape.
     |      
     |      * ctx (MDGContext) - The context in which the datablock will be retrieved.
     |  
     |  getExternalContent(...)
     |      getExternalContent(table) -> self
     |      
     |      The table populated by this method must include the location of all the content (files) used by this node, including those that do not exist.  See MExternalContentInfoTable for details.
     |      
     |      Keys used to add items to this table will be the same that get passed to setExternalContent through its MExternalContentLocationTable parameter to perform a batched change of content location.
     |      
     |      When implementing getExternalContent, you are responsible for forwarding the call to the base class when it makes sense to do so, so that base classes  can also add their external content to the table.
     |      
     |      The default implementation does nothing.
     |      
     |      * table [OUT] (MExternalContentInfoTable) - Content information table that this method must populate.
     |  
     |  getFilesToArchive(...)
     |      getFilesToArchive(shortName=False, unresolvedName=False, markCouldBeImageSequence=False) -> list of strings
     |      
     |      Use this method to return all external files used by this node. This file list will be used by the File > Archive zip feature, maya.exe -archive and the `file -q -list` mel command.
     |      
     |      Only include files that exist.
     |      
     |      If shortName is True, return just the filename portion of the path. Otherwise, return a full path.
     |      
     |      If unresolvedName is True, return the path before any resolution has been done (i.e leave it as a relative path, include unexpanded environment variables,  tildes, ".."s etc). Otherwise, resolve the file     path and return an absolute path (to resolve with standard Maya path resolution, use MFileObject.resolvedFullName()).
     |      
     |      * shortName (bool) - If True, only add the filename of the path.
     |      * unresolvedName (bool) - If True, add paths before any resolution, rather than absolute paths.
     |      * markCouldBeImageSequence (bool) - If True, append an asterisk after any file path that could be an image sequence (note: only used by maya.exe -archive).
     |  
     |  getInternalValue(...)
     |      getInternalValue(plug, dataHandle) -> bool
     |      
     |      This method is overridden by nodes that store attribute data in some internal format.
     |      
     |      The internal state of attributes can be set or queried using the setInternal and internal methods of MFnAttribute.
     |      
     |      When internal attribute values are queried via getAttr or MPlug.getValue() this method is called.
     |      
     |      All internal data should respect the current context, which may be obtained from MDGContext::current()
     |      
     |      * plug (MPlug) - the attribute that is being queried.
     |      * dataHandle [OUT] (MDataHandle) - the dataHandle to store the attribute value.
     |  
     |  getInternalValueInContext(...)
     |      getInternalValueInContext(plug, dataHandle, ctx) -> bool [OBSOLETE]
     |      
     |      This method is obsolete. Override MPxNode.getInternalValue instead.
     |      
     |      * plug (MPlug) - the attribute that is being queried.
     |      * dataHandle [OUT] (MDataHandle) - the dataHandle to store the attribute value.
     |      * ctx (MDGContext) - the context the method is being evaluated in.
     |  
     |  internalArrayCount(...)
     |      internalArrayCount(plug) -> int
     |      internalArrayCount(plug, ctx) -> int  [OBSOLETE]
     |      
     |      This method is overridden by nodes that have internal array attributes which are not stored in Maya's datablock. This method is used by Maya to determine the non-sparse count of array elements during file IO. If the internal array is stored sparsely, you should return the maximum index of the array plus one. If the internal array is non-sparse then return the length of the array.
     |      
     |      This method does not need to be implemented for attributes that are stored in the datablock since Maya will use the datablock size.
     |      
     |      If this method is overridden, it should return -1 for attributes which it does not handle. Maya will use the datablock size to determine the array length when -1 is returned.
     |      
     |      All internal data should respect the current context, which may be obtained from MDGContext.current()
     |      
     |      * plug (MPlug) - the array plug.
     |      * ctx (MDGContext) - the context, default to MDGContext.current().
     |  
     |  isAbstractClass(...)
     |      isAbstractClass() -> bool
     |      
     |      Override this class to return True if this node is an abstract node. An abstract node can only be used as a base class.  It cannot be created using the 'createNode' command.
     |      
     |      It is not necessary to override this method.
     |  
     |  isPassiveOutput(...)
     |      isPassiveOutput(plug) -> bool
     |      
     |      This method may be overridden by the user defined node if it wants to provide output attributes which do not prevent value modifications to the destination attribute. For example, output plugs on animation curve nodes are passive. This allows the attributes driven by the animation curves to be set to new values by the user.
     |      
     |      * plug (MPlug) - plug representing output in question.
     |  
     |  legalConnection(...)
     |      legalConnection(plug, otherPlug, asSrc) -> bool/None
     |      
     |      This method allows you to check for legal connections being made to attributes of this node.
     |      
     |      You should return None to specify that maya should handle this connection if you are unable to determine if it is legal.
     |      
     |      * plug (MPlug) - attribute on this node.
     |      * otherPlug (MPlug) - attribute on other node.
     |      * asSrc (bool) - is this plug a source of the connection.
     |  
     |  legalDisconnection(...)
     |      legalDisconnection(plug, otherPlug, arsSrc) -> bool/None
     |      
     |      This method allows you to check for legal disconnections being made to attributes of this node.
     |      
     |      You should return None to specify that maya should handle this disconnection if you are unable to determine if it is legal.
     |      
     |      * plug (MPlug) - attribute on this node.
     |      * otherPlug (MPlug) - attribute on other node.
     |      * asSrc (boool) - is this plug a source of the connection.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Returns the name of this particular instance of this class.  Each objectin the dependency graph has a name.  This name will be used by the UIand by MEL.
     |      
     |      It is not necessary to override this method.
     |      
     |      Returns the name of the node
     |  
     |  passThroughToMany(...)
     |      passThroughToMany(plug, plugArray) -> bool
     |      
     |      This method is overriden by nodes that want to control the traversal behavior of some Maya search algorithms which traverse the history/future of shape nodes looking for directly related nodes. In particular, the Artisan paint code uses this method when searching for paintable nodes, and the disk cache code uses this method when searching for upstream cacheFile nodes.
     |      
     |      If this method is not implemented or returns False, the base class Maya implementation of this method calls passThroughToOne and returns the results of that call.
     |      
     |      * plug (MPlug) - the plug.
     |      * plugArray (MPlugArray) - the corresponding plugs.
     |  
     |  passThroughToOne(...)
     |      passThroughToOne(plug) -> plug
     |      
     |      This method may be overriden by nodes that have a one-to-one relationship between an input attribute and a corresponding output attribute. This method is used by Maya to perform the following capabilities:
     |      
     |      - When this node is deleted, the delete command will rewire the source of the input attribute to the destination of the output attribute if the source and destination are connected to nodes that are not deleted.
     |      - History traversal algorithms such as the bakePartialHistory command use this method to direct its traversal through a shape's construction history.
     |      - The base class Maya implementation of passThroughToAll will call this method if passThroughToAll returns False.
     |      
     |      * plug (MPlug) - the plug.
     |  
     |  postConstructor(...)
     |      postConstructor() -> self
     |      
     |      Internally maya creates two objects when a user defined node is created, the internal MObject and the user derived object.
     |      The association between the these two objects is not made until after the MPxNode constructor is called. This implies that no MPxNode member function can be called from the MPxNode constructor.
     |      The postConstructor will get called immediately after the constructor when it is safe to call any MPxNode member function.
     |  
     |  postEvaluation(...)
     |      postEvaluation(context, evalNode, evalType) -> None
     |      
     |      Clean up node's internal state after threaded evaluation.
     |      
     |      After the evaluation graph execution, each node gets a chance to restore / update its internal states.For example, resetting draw state.
     |      
     |      This code has to be thread safe, non - blocking and work only on data owned by the node.
     |      
     |      This call will most likely happen from a worker thread.
     |      
     |      * context (MDGContext) - Context in which the evaluation is happening.
     |                               This should be respected and only internal state
     |                               information pertaining to it should be modified.
     |      * evaluationNode (MEvaluationNode) - Evaluation node which contains
     |                                           information about the dirty plugs the
     |                                           dirty plugs that were evaluated for this
     |                                           context.
     |      * evalType (PostEvaluationType)
     |        * kEvaluatedIndirectly : The node's compute function handled evaluation.
     |        * kEvaluatedDirectly   : Evaluation was performed externally and the results injected
     |                                 back into the node.  This would happen in situations such as
     |                                 extracting values from an external cache.The node needs to
     |                                 update any additional internal state based on the new values.
     |        * kLeaveDirty          : Evaluation was performed without updating this node. Internal
     |                                 state should be updated to reflect that the node is dirty.
     |  
     |  preEvaluation(...)
     |      preEvaluation(context, evalNode) -> None
     |      
     |      Prepare a node's internal state for threaded evaluation.
     |      
     |      During the evaluation graph execution each node gets a chance to reset its internal states just before being evaluated.
     |      
     |      This code has to be thread safe, non - blocking and work only on data owned by the node.
     |      
     |      The timing of this callback is at the discretion of evaluation graph dependencies and individual evaluators.This means, it should be used purely to prepare this node for evaluation and no particular order should be assumed.
     |      
     |      This call will most likely happen from a worker thread.
     |      
     |      * context (MDGContext) - Context in which the evaluation is happening.
     |                               This should be respected and only internal state
     |                               information pertaining to it should be modified.
     |      * evaluationNode (MEvaluationNode) - Evaluation node which contains
     |                                           information about the dirty plugs that
     |                                           are about to be evaluated for the context.
     |                                           Should be only used to query information.
     |  
     |  setDependentsDirty(...)
     |      setDependentsDirty(plug, plugArray) -> self
     |      
     |      This method can be overridden in user defined nodes to specify which plugs should be set dirty based upon an input plug which Maya is marking dirty. The list of plugs for Maya to mark dirty is returned by the plug array. This method handles both dynamic as well as non-dynamic plugs and is useful in the following ways:
     |      
     |      
     |      
     |      - Allows attributeAffects-style relationships to be handled for dynamically-added attributes. Since MPxNode.attributeAffects() can only be used with non-dynamic attributes, use of this method allows a way for all attributes of a node to affect one another, both dynamic and non-dynamic.
     |      
     |      - Provides more flexible relationships than what is available with MPxNode.attributeAffects(). For example, you may wish to not dirty plugs when the current frame is one. However, as the routine is called during dirty propagation, there are restrictions on what can be done within the routine, most importantly you must not cause any dependency graph computation. For details, see the IMPORTANT NOTE below.
     |      
     |      
     |      
     |      This method is designed to work harmoniously with MPxNode.attributeAffects() on the same node. Alternately, you can do all affects relationships within a yourNode.setDependentsDirty() implementation.
     |      
     |      The body of a user-implemented setDependentsDirty() implementation might look like the following example, which causes the plug called "B" to be set dirty whever plug "A" is changed, i.e. A affects B.
     |      
     |      * plug (MPlug) - plug which is being set dirty by Maya.
     |      * plugArray the programmer should add any plugs which they want to set dirty to this list.
     |  
     |  setDoNotWrite(...)
     |      setDoNotWrite(bool) -> self
     |      
     |      Use this method to mark the "do not write" state of this proxy node.  If set, this node will not be saved when the Maya model is written out. 
     |      
     |      NOTES:
     |      1. Plug-in "requires" information will be written out with the model when saved.  But a subsequent reload and resave of the file will cause these to go away.
     |      2. If this node is a DAG and has a parent or children, the "do not write" flag of the parent or children will not be set. It is the developer's responsibility to ensure that the resulting scene file is capable of being read in without errors due to unwritten nodes.
     |  
     |  setExternalContent(...)
     |      setExternalContent(table) -> self
     |      
     |      This is useful in the context of content relocation.  This will be called while the scene is being loaded to apply path changes performed externally. Consequently, interaction with the rest of the scene must be kept to a minimum.  It is however valid to call this method outside of scene loading contexts.
     |      
     |      The keys in the map must be the same as the ones provided by the node in getExternalContent.  The values are the new locations.
     |      
     |      When implementing setExternalContent, you are responsible for forwarding the call to the base class when it makes sense to do so, so that base classes  can also set their external content.
     |      
     |      The default implementation does nothing.
     |      
     |      * table Key->location table with new content locations.
     |  
     |  setExternalContentForFileAttr(...)
     |      setExternalContentForFileAttr(attr, table) -> bool
     |      
     |      This method is a helper for derived clases implementing setExternalContent().  It assigns a value to a plug with the one from the table whose key is the same as the passed in attribute name.
     |      
     |      The method will not write to the plug if the attribute is not found in the  table.
     |      
     |      * attr (MObject) - The attribute of the plug we want to write to.
     |      * table (MExternalContentLocationTable) - A table which may hold or not the value for a given plug.
     |      
     |      Returns True if the plug was successfully written to. False if no entry in the table was named after the attribute or if no plug was found.
     |  
     |  setInternalValue(...)
     |      setInternalValue(plug, dataHandle) -> bool
     |      
     |      
     |      This method is overriden by nodes that store attribute data in some internal format.
     |      
     |      The internal state of attributes can be set or queried using the setInternal and internal methods of MFnAttribute.
     |      
     |      When internal attribute values are set via setAttr or MPlug.setValue() this method is called.
     |      
     |      Another use for this method is to impose attribute limits.
     |      
     |      All internal data should respect the current context, which may be obtained from MDGContext::current()
     |      
     |      * plug (MPlug) - the attribute that is being set.
     |      * dataHandle (MDataHandle) - the dataHandle containing the value to set.
     |  
     |  setInternalValueInContext(...)
     |      setInternalValueInContext(plug, dataHandle, ctx) -> bool  [OBSOLETE]
     |      
     |      This method is obsolete. Override MPxNode.setInternalValue instead.
     |      
     |      * plug (MPlug) - the attribute that is being set.
     |      * dataHandle (MDataHandle) - the dataHandle containing the value to set.
     |      * ctx (MDGContext) - the context the method is being evaluated in.
     |  
     |  setMPSafe(...)
     |      setMPSafe(bool) -> self
     |      
     |      This method is obsolete. Override MPxNode.setSchedulingType instead.
     |      
     |      Set a flag to specify if a user defined shading node is safe for multi-processor rendering. For a shading node to be MP safe, it cannot access any shared global data and should only use attributes in the datablock to get input data and store output data. 
     |      
     |      NOTE: This should be called from the postConstructor() method for shading node plug-ins only. If a shading node is non-safe, then it will only be useful during single processor rendering.
     |  
     |  shouldSave(...)
     |      shouldSave(plug) -> bool/None
     |      
     |      This method may be overridden by the user defined node.  It should only be required to override this on rare occasions.
     |      
     |      This method determines whether a specific attribute of this node should be written out during a file save.  The default behavior is to only write the value if it differs from the default and is not being supplied by a connection.  This behavior should be sufficient in most cases.
     |      This method is not called for ramp attributes since they should always be written.
     |      
     |      * plug (MPlug) - plug representing the attribute to be saved.
     |  
     |  thisMObject(...)
     |      thisMObject() -> MObject
     |      
     |      Returns the MObject associated with this user defined node.  This makes it possible to use MFnDependencyNode or to construct plugs to this node's attributes.
     |  
     |  type(...)
     |      type() -> int
     |      
     |      Returns the type of node that this is.  This is used to differentiate user defined nodes that are derived off different MPx base classes.
     |      
     |      It is not necessary to override this method.
     |      
     |        kDependNode                    Custom node derived from MPxNode
     |        kLocatorNode                   Custom locator derived from MPxLocatorNode
     |        kDeformerNode                  Custom deformer derived from MPxDeformerNode
     |        kManipContainer                Custom container derived from MPxManipContainer
     |        kSurfaceShape                  Custom shape derived from MPxSurfaceShape
     |        kFieldNode                     Custom field derived from MPxFieldNode
     |        kEmitterNode                   Custom emitter derived from MPxEmitterNode
     |        kSpringNode                    Custom spring derived from MPxSpringNode
     |        kIkSolverNode                  Custom IK solver derived from MPxIkSolverNode
     |        kHardwareShader                Custom shader derived from MPxHardwareShader
     |        kHwShaderNode                  Custom shader derived from MPxHwShaderNode
     |        kTransformNode                 Custom transform derived from MPxTransform
     |        kObjectSet                     Custom set derived from MPxObjectSet
     |        kFluidEmitterNode              Custom fluid emitter derived from MpxFluidEmitterNode
     |        kImagePlaneNode                Custom image plane derived from MPxImagePlane
     |        kParticleAttributeMapperNode   Custom particle attribute mapper derived from MPxParticleAttributeMapperNode
     |        kCameraSetNode                 Custom director derived from MPxCameraSet
     |        kConstraintNode                Custom constraint derived from MPxConstraint
     |        kManipulatorNode               Custom manipulator derived from MPxManipulatorNode
     |        kClientDeviceNode              Custom threaded device derived from MPxThreadedDeviceNode
     |        kThreadedDeviceNode            Custom threaded device node
     |        kAssembly                      Custom assembly derived from MPxAssembly
     |        kSkinCluster                                  Custom deformer derived from MPxSkinCluster
     |        kGeometryFilter                               Custom deformer derived from MPxGeometryFilter
     |               kBlendShape                                    Custom deformer derived from MPxBlendShape
     |  
     |  typeId(...)
     |      typeId() -> MTypeId
     |      
     |      Returns the TYPEID of this node.
     |  
     |  typeName(...)
     |      typeName() -> string
     |      
     |      Returns the type name of this node.  The type name identifies the node type to the ASCII file format
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  addAttribute(...)
     |      addAttribute(attr) -> None
     |      
     |      This method adds a new attribute to a user defined node type during the type's initialization.
     |      
     |      This method will only work during the static initialization method of the user defined node class.  The initialization method is the one that is passed into  MFnPlugin.registerNode(). The attributes must first be created using one of the MFnAttribute classes, and can then be added using this method.
     |      
     |      For compound attributes, the proper way to use this method is by calling it with the parent attribute. If a compound attribute is passed, this method will add all of its children.
     |      NOTE: A failure will occur if you attempt to call addAttribute() on the children of a compound attribute.
     |      
     |      * attr (MObject) - new attribute to add.
     |  
     |  attributeAffects(...)
     |      attributeAffects(whenChanges, isAffected) -> None
     |      
     |      This method specifies that a particular input attribute affects a specific output attribute.  This is required to make evaluation efficient.  When an input changes, only the affected outputs will be computed. Output attributes cannot be keyable - if they are keyable, this method will fail.
     |      
     |      This method must be called for every attribute dependency when initializing the node's attributes.  The attributes must first be added using the MPxNode.addAttribute() method.  Failing to call this method will cause the node not to update when its inputs change. If there are no calls to this method in a node's initialization, then the compute method will never be called.
     |      
     |      This method will only work during the static initialization method of the user defined node class.  The initialization method is the one that is passed into MFnPlugin.registerNode().  As a result, it does not work with dynamic attributes. For an alternate solution which handles dynamic as well as non-dynamic attributes refer to MPxNode.setDependentsDirty.()
     |      
     |      * whenChanges (MObject) - input attribute - MObject that points to an input attribute that has already been added.
     |      * isAffected (MObject) - affected output attribute - MObject that points to an output attribute that has already been added.
     |  
     |  inheritAttributesFrom(...)
     |      inheritAttributesFrom(parentClassName) -> None
     |      
     |      This method allows a class of plugin node to inherit all of the attributes of a second class of plugin node.
     |      
     |      This method will only work during the static initialization method of the user defined node class and must be called before any other attributes have been added.  The initialization method is the one that is passed into  MFnPlugin.registerNode().
     |      
     |      A plugin node may only inherit attributes from one other class of plugin node. Attempting to call this method multiple times within a node's initialization method will result in an error.
     |      
     |      Both node classes must be registered using the same MPxNode type, listed in MPxNode.type().
     |      
     |      * parentClassName (string) - class of node to inherit attributes from.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kAssembly = 22
     |  
     |  kBlendShape = 25
     |  
     |  kCameraSetNode = 16
     |  
     |  kClientDeviceNode = 20
     |  
     |  kConstraintNode = 17
     |  
     |  kDeformerNode = 2
     |  
     |  kDependNode = 0
     |  
     |  kEmitterNode = 6
     |  
     |  kEvaluatedDirectly = 1
     |  
     |  kEvaluatedIndirectly = 0
     |  
     |  kFieldNode = 5
     |  
     |  kFluidEmitterNode = 13
     |  
     |  kGeometryFilter = 24
     |  
     |  kHardwareShader = 9
     |  
     |  kHwShaderNode = 10
     |  
     |  kIkSolverNode = 8
     |  
     |  kImagePlaneNode = 14
     |  
     |  kLast = 26
     |  
     |  kLeaveDirty = 2
     |  
     |  kLocatorNode = 1
     |  
     |  kManipContainer = 3
     |  
     |  kManipulatorNode = 18
     |  
     |  kMotionPathNode = 19
     |  
     |  kObjectSet = 12
     |  
     |  kParticleAttributeMapperNode = 15
     |  
     |  kPostEvaluationTypeLast = 3
     |  
     |  kSkinCluster = 23
     |  
     |  kSpringNode = 7
     |  
     |  kSurfaceShape = 4
     |  
     |  kThreadedDeviceNode = 21
     |  
     |  kTransformNode = 11
    
    class MPxSurfaceShape(MPxNode)
     |  Parent class of all user defined shapes.
     |  
     |  Method resolution order:
     |      MPxSurfaceShape
     |      MPxNode
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  acceptsGeometryIterator(...)
     |      acceptsGeometryIterator(component, writeable=True, forReadOnly=False) -> bool
     |      acceptsGeometryIterator(writeable=True) -> boolboundingBox() -> MBoundingBox
     |      
     |      Returns True if the shape can supply a component iterator.
     |      This methods should be overridden to return True. The default is to return False.
     |      
     |      * component (MObject) - the component to test
     |      * writeable (bool) - is this component type writable by an iterator
     |      * forReadOnly (bool) - is this component type readable by an iterator
     |  
     |  activeComponents(...)
     |      activeComponents() -> MObjectArray
     |      
     |      Returns a list of active (selected) components for the shape.
     |  
     |  boundingBox(...)
     |      boundingBox() -> MBoundingBox
     |      
     |      This method should be overridden to return a bounding box for the shape.
     |      If this method is overridden, then MPxSurfaceShape.isBounded() should also be overridden to return True.
     |  
     |  cachedShapeAttr(...)
     |      cachedShapeAttr() -> MObject
     |      
     |      Returns the attribute containing the shape's cached geometry, if it has one.
     |  
     |  canMakeLive(...)
     |      canMakeLive() -> bool
     |      
     |      This method is used by Maya to determine whether a surface can be made live. It can be overridden to return True if you wish to allow your surface to be made live. If you return True, you will also need to implement both closestPoint() overloads. The default is to return False.
     |  
     |  childChanged(...)
     |      childChanged(state=kObjectChanged) -> self
     |      
     |      This method can be used to trigger the shape to recalculate its bounding box.
     |      
     |      * state (int) - the type of change that has occurred
     |      
     |      Valid state:
     |        kObjectChanged         Object geometry changed. Internal caches need to be updated.
     |        kBoundingBoxChanged    Object geometry is unchanged but its bounding box has changed.
     |                               This might happen if the object was moved or an offset changed.
     |  
     |  closestPoint(...)
     |      closestPoint(toThisPoint, theClosestPoint, tolerance=MPoint.kTolerance) -> self
     |      closestPoint(raySource, rayDirection, theClosestPoint, theClosestNormal, findClosestOnMiss, tolerance=MPoint.kTolerance) -> bool
     |      
     |      This methods are respectively used by Maya in functions (such as select) that require closest point information from your surface and for snapping queries when your surface is live.
     |      
     |      For selection:
     |      If you've overridden canMakeLive() to return True, this method is also used by Maya for some snapping queries when your surface is live.
     |      
     |      * toThisPoint (MPoint) - the point to test against.
     |      * theClosestPoint [OUT] (MPoint) - the closest point on your surface.
     |      * tolerance (float) - tolerance to use in your calculations.
     |      
     |      
     |      For snapping:
     |      If you override this method, you should set theClosestPoint to the closest point on your surface intersected by the ray defined by raySource and rayDirection. You should also populate the theClosestNormal parameter with the surface normal at that intersection point.
     |      
     |      If no intersection is found and findClosestOnMiss is True, you should still provide a point on your surface closest to the ray defined by raySource and rayDirection. When used for live snapping, this allows the user to click and drag outside the bounds    of a live surface and still have it snap to the nearest point on it within the viewport. Note, performing a pure 3D closest point of approach test in this situation may not give the most natural result for live mesh snapping.
     |      To provide behavior that matches Maya, you can project your surface onto the plane defined by the ray, then perform your calculations. This will account for view perspective and give accurate live snap points along the silhouette of the surface.
     |      
     |      If findClosestOnMiss is False, you should not provide a point and normal when the ray misses.
     |      Should return True if theClosestPoint and theClosestNormal have been set, False otherwise.
     |      canMakeLive() must also be overridden to return True.
     |      
     |      * raySource (MPoint) - the origin of the ray to test against
     |      * rayDirection (MVector) - the direction of the ray to test against
     |      * theClosestPoint [OUT] (MPoint) - the closest point on your surface
     |      * theClosestNormal [OUT] (MVector) - the normal at the closest point on your surface
     |      * findClosestOnMiss (bool) - when True, you should calculate theClosestPoint and theClosestNormal even if the ray misses your surface.
     |      * tolerance (float) - tolerance to use in your calculations
     |  
     |  componentToPlugs(...)
     |      componentToPlugs(component, selectionList) -> self
     |      
     |      Converts the given component into a selection list of plugs.
     |      This method is used to associate a shapes components into the corresponding attributes (plugs) within the shape. For example, it gets called by the translate manipulator to determine which attributes should be driven by the manipulator, and by the setKeyframe command to determine where to connect animCurves for components.
     |      
     |      This method should be overridden if the shape supports components that can be selected and moved in Maya.
     |      
     |      * component (MObject) - the component to be converted
     |      * list (MSelectionList) - a selection list where the plug should be added
     |  
     |  convertToTweakNodePlug(...)
     |      convertToTweakNodePlug(plug) -> bool
     |      
     |      Check if a tweak node is connected to this node. If it is, then reset the supplied plug to contain the controlPoints attribute on the tweak node.
     |      Returns True if a tweak node was found, False if the plug was unchanged
     |      
     |      * plug (MPlug) - plug which will be set to point to the associated tweak node plug if a tweak node is connected
     |  
     |  createFullRenderGroup(...)
     |      createFullRenderGroup() -> MObject
     |      
     |      Returns a component containing all of renderable elements in the shape.
     |      This method is used to create a component containing every renderable element in the object.
     |      
     |      This method is supposed to return non-null object only if the dag object contains renderable components. Type of the return component should is the same as the one returned by MPxSurfaceShape::renderGroupComponentType().
     |  
     |  createFullVertexGroup(...)
     |      createFullVertexGroup() -> MObject
     |      
     |      Returns a component containing all of the vertices in the shape.
     |      This method is used to create a component containing every vertex/CV in the object.
     |      
     |      This method is supposed to return non-null object only if the dag object contains vertices/CVs (control points), so derived classes that do should override this method.
     |  
     |  deleteComponents(...)
     |      deleteComponents(componentList, undoInfo) -> bool
     |      
     |      Returns True if this method was successful, False otherwise.
     |      This method should be overridden if the shape is to support deletion of components. A list of components to be deleted will be passed in as well as an array of doubles where information about each deleted component can be stored for undo purposes. A typical use for this array is to store knot values or weights for control points that are deleted.
     |      
     |      * componentList (MObjectArray) - List of components to be deleted
     |      * undoInfo (MDoubleArray) - Values used for undo purposes
     |  
     |  excludeAsPluginShape(...)
     |      excludeAsPluginShape() -> bool
     |      
     |      A Maya viewport can be set to not display "Plugin Shapes", which means shapes derived from MPxSurfaceShape. By overriding excludeAsPluginShape() to return False, you can change that behaviour so that this shape is still displayed even when the display of "Plugin Shapes" is disabled.
     |      The default implementation returns True.
     |      Returns True to have this shape obey the "Plugin Shapes" settings in the viewport's "Show" menu; False to have it ignore that setting.
     |  
     |  geometryData(...)
     |      geometryData() -> MObject
     |      
     |      Returns the geometry data of the shape. The geometry data must be derived from the MPxGeometryData class.
     |      
     |      The data is used by Maya to add, edit and query component grouping (set) information for the shape. This set information is stored and managed by Maya's shape base class, geometryShape.
     |  
     |  geometryIteratorSetup(...)
     |      geometryIteratorSetup(componentList, components, forReadOnly=False) -> MPxGeometryIterator
     |      
     |      This method should be overridden by the user to return a geometry iterator compatible with the user's geometry.
     |      A geometry iterator is used for iterating over the components of a shape, such as the vertices of a mesh, in a generic manner.
     |      
     |      The components to be iterated over are passed to this function in on of two ways, as a list of components, or as a single component.
     |      Only one of these arguments is used at any particular time.
     |      
     |      * componentList (MObjectArray) - a list of components to be iterated over
     |      * components (MObject) - the components to be iterated over
     |      * forReadOnly (bool) - specifies whether the iterator is for read-only
     |  
     |  getComponentSelectionMask(...)
     |      getComponentSelectionMask() -> MSelectionMask
     |      
     |      Returns the selection mask of the shape.
     |      This routine must be overridden if the shape is to support interactive component selection in Viewport 2.0 and should provide information about the selection mask of the shape component.
     |  
     |  getShapeSelectionMask(...)
     |      getShapeSelectionMask() -> MSelectionMask
     |      
     |      Returns the selection mask of the shape.
     |      This routine must be overridden if the shape is to support interactive object selection in Viewport 2.0 and should provide information about the selection mask of the shape.
     |  
     |  getWorldMatrix(...)
     |      getWorldMatrix(block, instanceGeom) -> MMatrix
     |      
     |      Returns MMatrix which takes a point from local object space to world space.
     |      
     |      * block (MDataBlock) - a MDataBlock
     |      * instanceGeom (int) - the instance this MPxSurfaceShape corresponds to
     |  
     |  hasActiveComponents(...)
     |      hasActiveComponents() -> bool
     |      
     |      This method is used to determine whether or not the shape has active (selected) components.
     |  
     |  isBounded(...)
     |      isBounded() -> bool
     |      
     |      This method should be overridden to return True if the user supplies a bounding box routine.  Supplying a bounding box routine makes refresh and selection more efficient.
     |      Returns a boolean value indicating whether a bounding box routine has been supplied
     |  
     |  localShapeInAttr(...)
     |      localShapeInAttr() -> MObject
     |      
     |      Returns the attribute containing the shape's input geometry in local space.
     |      
     |      This method will be called by Maya to determine if the shape has construction history and must be overridden if the shape is to support deformers.
     |  
     |  localShapeOutAttr(...)
     |      localShapeOutAttr() -> MObject
     |      
     |      Returns the attribute containing the shape's output geometry in local space.
     |      
     |      This method must be overridden if the shape is to support deformers.
     |  
     |  match(...)
     |      match(mask, componentList) -> bool
     |      
     |      This method is used to check for matches between a selection type (or mask) and a given component. If your shape has components representing attributes then this method is used to match up your components with selection masks.
     |      
     |      This is used by sets and deformers to make sure that the selected components fall into the "vertex only" category. This is useful when you want to make sure that only a particular component can be deformed.
     |      
     |      * mask (MSelectionMask) - the selection mask to test against
     |      * componentList (MObjectArray) - a list of components to be tested
     |  
     |  matchComponent(...)
     |      matchComponent(item, spec, list) -> int
     |      
     |      This method is used to convert the string representation of a component into a component object and to validate that the indices.
     |      
     |      This method should be overridden if the shape has components.
     |      
     |      * item (MSelectionList) - DAG selection item for the object being matched
     |      * spec (MAttributeSpecArray) - attribute specification object
     |      * list (MSelectionList) - list to add components to
     |      
     |      List of valid component match result:
     |        kMatchOk                       The component was matched without error.
     |        kMatchNone                     No component was matched.
     |        kMatchTooMany                  Not used.
     |        kMatchInvalidName              One of the names in the attribute specification was not valid.
     |        kMatchInvalidAttribute         Not used.
     |        kMatchInvalidAttributeIndex    The attribute specification contained an index for a non-array attribute.
     |        kMatchInvalidAttributeRange    An attribute index was out of range.
     |        kMatchInvalidAttributeDim      The attribute specification provided the wrong number of dimensions for an attribute.
     |  
     |  newControlPointComponent(...)
     |      newControlPointComponent() -> MObject
     |      
     |      The default action of this method is to return an MFnSingleIndexedComponent (of type MFn::kMeshVertComponent) in order to support rigid skinning binds.
     |      
     |      This method can be overridden to support other types of components such as MFnDoubleIndexedComponent and MFnTripleIndexedComponent      and should return a new component of that type.  The types allowed are those listed in the create() method docs for each MFn*IndexedComponent.
     |  
     |  pointAtParm(...)
     |      pointAtParm(atThisParm, evaluatedPoint) -> bool
     |      
     |      This method is used by Maya in functions (such as select) that require point at parameter values. This only makes sense for parametric surfaces such as NURBS.
     |      Returns True if a point was found, False otherwise
     |      
     |      * atThisParm (MPoint) - the parameter to check
     |      * evaluatedPoint [OUT] (MPoint) - the surface point
     |  
     |  renderGroupComponentType(...)
     |      renderGroupComponentType() -> int
     |      
     |      This method is used to return the type of renderable components for this shape. It should return a type among MFn::kMeshPolygonComponent, MFn::kSubdivFaceComponent and MFn::kSurfaceFaceComponent, which is used in the creation of per-face/patch shader assignment.
     |      
     |      Returns the type of renderable components for this shape.
     |      See MFnSet.addMember()
     |  
     |  transformUsing(...)
     |      transformUsing(matrix, componentList, cachingMode=None, pointCache=None) -> self
     |      
     |      Transform the given components using the specified transformation matrix.
     |      This method should be overridden if the shape supports components that can be transformed using maya's move, scale, and rotate tools.
     |      
     |      * matrix (MMatrix) - the matrix representing the transformation that is to be applied to the components
     |      * componentList (MObjectArray) - a list of components to be transformed. If the list is empty, it indicates that every point in the geometry should be transformed.
     |      * cachingMode (int) - whether the points should be cached in the pointCache argument, or restored from the pointCache
     |      * pointCache (MPointArray) - used to store for undo and restore points during undo
     |      
     |      List of valid caching modes:
     |        kNoPointCaching             No point caching.
     |        kSavePoints                 Points should be saved for undo in the point cache.
     |        kRestorePoints              Points should be restored from the point cache.
     |        kUpdatePoints               Transform and update the points in the point cache.
     |        kTransformOriginalPoints    Transform using use the original pre-transformation values stored in the pointCache.
     |  
     |  tweakUsing(...)
     |      tweakUsing(matrix, componentList, cachingMode, pointCache, handle) -> self
     |      
     |      Transform the given components using the specified transformation matrix.
     |      This method should be overridden if the shape supports components that can be transformed using maya's move, scale, and rotate tools. This method is called when the shape has history & connected to a tweak node. The most common reason why the shape would be connected to a tweak node is if it is being deformed. When a shape is connected to a tweak node, transformations applied to the points are placed in the tweak node rather than in the shape itself.
     |      
     |      * matrix (MMatrix) - the matrix representing the transformation that is to be applied to the components
     |      * componentList (MObjectArray) - a list of components to be tranformed. If the list is empty, it indicates that every point in the geometry should be transformed.
     |      * cachingMode (int) - whether the points should be cached in the pointCache argument, or restored from the pointCache
     |      * pointCache (MPointArray) - used to store for undo and restore points during undo
     |      * handle (MArrayDataHandle) - array data handle where the tweaks are stored
     |      
     |      See transformUsing() for a list of valid caching mode
     |  
     |  undeleteComponents(...)
     |      undeleteComponents(componentList, undoInfo) -> bool
     |      
     |      This method should be overridden if the shape is to support undeletion of components. A list of components to be deleted will be passed in as well as an array of doubles where information about each deleted component is stored for undo purposes. A typical use for this array is to store knot values or weights for control points that are deleted.
     |      Returns True if this method was successful, False otherwise
     |      
     |      * componentList (MObjectArray) - List of components that were deleted
     |      * undoInfo (MDoubleArray) - Values used for undo purposes
     |  
     |  vertexOffsetDirection(...)
     |      vertexOffsetDirection(component, direction, mode, normalize) -> bool
     |      
     |      This method should be overridden if the shape supports components that can be moved in the direction of the normal or UV's using the move vertex normal tool.
     |      
     |      This method should calculate the offset direction for a vertex components. The direction vector array is an array of offsets corresponding to the elements in the component. The mode argument specifies the type of movement that is being performed.
     |      
     |      The default for this method is to return False, i.e. no support for move normal tool.
     |      Returns True if the shape supports the current mode, False if the shape cannot do the requested vertex move
     |      
     |      * component (MObject)
     |      * direction (MVectorArray)
     |      * mode (int) - The type of vertex movement
     |      * normalize (bool) - specifies whether the offset vectors should be normalized
     |      
     |      List of valid types:
     |        kNormal       Move in normal direction.
     |        kUTangent     Move in u tangent direction.
     |        kVTangent     Move in v tangent direction.
     |        kUVNTriad     Calculate u, v, and normal offsets.
     |  
     |  weightedTransformUsing(...)
     |      weightedTransformUsing(xform, space, componentList, cachingMode, pointCache, freezePlane) -> self
     |      
     |      Transform the given components with interpolation using the specified transformation matrix.
     |      
     |      If not overridden, then a default implementation will be used to perform the transformation and interpolation.
     |      The default implementation calls setPoint() for each transformed point.
     |      
     |      * xform (MTransformationMatrix) - the matrix representing the transformation that is to be applied to the components.
     |      * space (MMatrix) - the matrix representing the transformation space to perform the interpolated transformation. A value of None indicates it should be ignored.
     |      * componentList (MObjectArray) - a list of components to be transformed and their weights. This list will not be empty.* cachingMode (int) - whether the points should be added/updated in the pointCache, restored from the pointCache, or transform using use the original values in the pointCache.
     |      * pointCache (MPointArray) - used to store for undo and restore points during undo
     |      * freezePlane (MPlane) - used for symmetric transformation of components. A value of None indicates it is not used and there is no symmetric transformation.
     |      
     |      See transformUsing() for a list of valid caching mode
     |  
     |  weightedTweakUsing(...)
     |      weightedTweakUsing(xform, space, componentList, cachingMode, pointCache, freezePlane, handle) -> self
     |      
     |      Transform the given components with interpolation using the specified transformation matrix.
     |      This method is called for transforming components using maya's move, scale, and rotate tools when the shape has history and is connected to a tweak node. The most common reason why the shape would be connected to a tweak node is if it is being deformed. When a shape is connected to a tweak node, transformations applied to the points are placed in the tweak node rather than in the shape itself.
     |      
     |      If not overridden, then a default implementation will be used to perform the transformation and interpolation.
     |      The default implementation calls setPoint() for each transformed point.
     |      
     |      * xform (MTransformationMatrix) - the matrix representing the transformation that is to be applied to the components
     |      * space (MMatrix) - the matrix representing the transformation space to perform the interpolated transformation. A value of None indicates it should be ignored.
     |      * componentList (MObjectArray) - a list of components to be transformed and their weights. This list will not be empty.
     |      * cachingMode (int) - whether the points should be added/updated in the pointCache, restored from the pointCache, or transform using the original values in the pointCache.
     |      * pointCache (MPointArray) - used to store for undo and restore points during undo
     |      * freezePlane (MPlane) - used for symmetric transformation of components. A value of None indicates it is not used and there is no symmetric transformation.
     |      * handle (MArrayDataHandle) - array data handle where the tweaks are stored
     |      
     |      See transformUsing() for a list of valid caching mode
     |  
     |  worldShapeOutAttr(...)
     |      worldShapeOutAttr() -> MObject
     |      
     |      Returns the attribute containing the shape's output geometry in world space.
     |      
     |      This method must be overridden if the shape is to support deformers.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  isRenderable
     |      Specifies whether the shape is a renderable shape.
     |      Making a shape renderable allows the shape to have shading group assignments.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  boundingBoxCenterX = <OpenMaya.MObject object>
     |  
     |  boundingBoxCenterY = <OpenMaya.MObject object>
     |  
     |  boundingBoxCenterZ = <OpenMaya.MObject object>
     |  
     |  center = <OpenMaya.MObject object>
     |  
     |  instObjGroups = <OpenMaya.MObject object>
     |  
     |  intermediateObject = <OpenMaya.MObject object>
     |  
     |  inverseMatrix = <OpenMaya.MObject object>
     |  
     |  isTemplated = <OpenMaya.MObject object>
     |  
     |  kBoundingBoxChanged = 1
     |  
     |  kMatchInvalidAttribute = 4
     |  
     |  kMatchInvalidAttributeDim = 7
     |  
     |  kMatchInvalidAttributeIndex = 5
     |  
     |  kMatchInvalidAttributeRange = 6
     |  
     |  kMatchInvalidName = 3
     |  
     |  kMatchNone = 1
     |  
     |  kMatchOk = 0
     |  
     |  kMatchTooMany = 2
     |  
     |  kNoPointCaching = 0
     |  
     |  kNormal = 0
     |  
     |  kObjectChanged = 0
     |  
     |  kRestorePoints = 2
     |  
     |  kSavePoints = 1
     |  
     |  kTransformOriginalPoints = 4
     |  
     |  kUTangent = 1
     |  
     |  kUVNTriad = 3
     |  
     |  kUpdatePoints = 3
     |  
     |  kVTangent = 2
     |  
     |  mControlPoints = <OpenMaya.MObject object>
     |  
     |  mControlValueX = <OpenMaya.MObject object>
     |  
     |  mControlValueY = <OpenMaya.MObject object>
     |  
     |  mControlValueZ = <OpenMaya.MObject object>
     |  
     |  mHasHistoryOnCreate = <OpenMaya.MObject object>
     |  
     |  matrix = <OpenMaya.MObject object>
     |  
     |  nodeBoundingBox = <OpenMaya.MObject object>
     |  
     |  nodeBoundingBoxMax = <OpenMaya.MObject object>
     |  
     |  nodeBoundingBoxMaxX = <OpenMaya.MObject object>
     |  
     |  nodeBoundingBoxMaxZ = <OpenMaya.MObject object>
     |  
     |  nodeBoundingBoxMin = <OpenMaya.MObject object>
     |  
     |  nodeBoundingBoxMinX = <OpenMaya.MObject object>
     |  
     |  nodeBoundingBoxMinY = <OpenMaya.MObject object>
     |  
     |  nodeBoundingBoxMinZ = <OpenMaya.MObject object>
     |  
     |  nodeBoundingBoxSize = <OpenMaya.MObject object>
     |  
     |  nodeBoundingBoxSizeX = <OpenMaya.MObject object>
     |  
     |  nodeBoundingBoxSizeY = <OpenMaya.MObject object>
     |  
     |  nodeBoundingBoxSizeZ = <OpenMaya.MObject object>
     |  
     |  objectColor = <OpenMaya.MObject object>
     |  
     |  objectGroupColor = <OpenMaya.MObject object>
     |  
     |  objectGroupId = <OpenMaya.MObject object>
     |  
     |  objectGroups = <OpenMaya.MObject object>
     |  
     |  objectGrpCompList = <OpenMaya.MObject object>
     |  
     |  parentInverseMatrix = <OpenMaya.MObject object>
     |  
     |  parentMatrix = <OpenMaya.MObject object>
     |  
     |  useObjectColor = <OpenMaya.MObject object>
     |  
     |  visibility = <OpenMaya.MObject object>
     |  
     |  worldInverseMatrix = <OpenMaya.MObject object>
     |  
     |  worldMatrix = <OpenMaya.MObject object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MPxNode:
     |  
     |  addExternalContentForFileAttr(...)
     |      addExternalContentForFileAttr(table, attr) -> bool
     |      
     |      This method is a helper for derived clases implementing getExternalContent().  It augments the external content info table passed in with an entry describing external content whose location is described by the specified attribute.
     |      
     |      The method will not overwrite existing items, i.e. items with the same key. (attribute name).  In this context, overwriting an item means the caller has called this function twice with the same attribute, or that two separate but identically named attributes were used.  If replacing an entry is the desired effect, it is the caller's responsibility to erase the previous item first.
     |      
     |      * table [OUT] (MExternalContentInfoTable) - table The table in which the new entry will be added.
     |      * attr (MObject) - The attribute for which the plug value will be queried for a location.
     |      
     |      Returns True if an item was sucessfully added to the table.  False if the attribute does not describe a non-empty location, or an item with the same key was already present in the table.
     |  
     |  compute(...)
     |      compute(plug, dataBlock) -> self
     |      
     |      This method should be overridden in user defined nodes.
     |      
     |      Recompute the given output based on the nodes inputs.  The plug represents the data value that needs to be recomputed, and the data block holds the storage for all of the node's attributes.
     |      
     |      The MDataBlock will provide smart handles for reading and writing this node's attribute values.  Only these values should be used when performing computations.
     |      
     |      When evaluating the dependency graph, Maya will first call the compute method for this node.  If the plug that is provided to the compute indicates that that the attribute was defined by the Maya parent node, the compute method should return None.  When this occurs, Maya will call the internal Maya node from which the user-defined node is derived to compute the plug's value. Returning any othervalue (including self) will tell Maya that this node successfully computed theplug. Raising an exception will tell Maya that this node failed at computingthe plug. Note that in most cases, Maya ignores node compute failures.
     |      
     |      In other words, the compute method should return None to get the Maya parent class to compute the plug. It should return self (or any other value) to indicate that the plug was computed successfully.
     |      
     |      This means that a user defined node does not need to be concerned with computing inherited output attributes.  However, if desired, these can be safely recomputed by this method to change the behaviour of the node.
     |      
     |      * plug (MPlug) - plug representing the attribute that needs to be recomputed.
     |      * block (MDataBlock) - data block containing storage for the node's attributes.
     |  
     |  connectionBroken(...)
     |      connectionBroken( plug, otherPlug, asSrc) -> self
     |      
     |      This method gets called when connections are broken with attributes of this node.
     |      
     |      * plug (MPlug) - attribute on this node.
     |      * otherPlug (MPlug) - attribute on other node.
     |      * asSrc (bool) - is this plug a source of the connection.
     |  
     |  connectionMade(...)
     |      connectionMade(plug, otherPlug, asSrc) -> self
     |      
     |      This method gets called when connections are made to attributes of this node.
     |      
     |      * plug (MPlug) - attribute on this node.
     |      * otherPlug (MPlug) - attribute on other node.
     |      * asSrc (bool) - is this plug a source of the connection.
     |  
     |  copyInternalData(...)
     |      copyInternalData(node) -> self
     |      
     |      This method is overriden by nodes that store attribute data in some internal format.
     |      
     |      On duplication this method is called on the duplicated node with the node being duplicated passed as the parameter.  Overriding this method gives your node a chance to duplicate any internal data you've been storing and manipulating outside of normal attribute data.
     |      
     |      * node (MPxNode) - the node that is being duplicated.
     |  
     |  dependsOn(...)
     |      dependsOn( plug, otherPlug) -> bool/None
     |      
     |      This method may be overridden by the user defined node. It should only be required to override this on rare occasions.
     |      
     |      This method determines whether a specific attribute depends on another attribute.
     |      
     |      You should return None to specify that Maya should determines the dependency (default).
     |      
     |      This is mainly to define dependency of dynamic attributes, since attributeAffects does not work with dynamic attributes.
     |      
     |      * plug (MPlug) - attribute on this node.
     |      * otherPlug (MPlug) - attribute on other node.
     |  
     |  doNotWrite(...)
     |      doNotWrite() -> bool
     |      
     |      use this method to query the "do not write" state of this proxy node. True is returned if this node will not be saved when the maya model is written out.
     |  
     |  forceCache(...)
     |      forceCache(ctx=MDGContext::current()) -> MDataBlock
     |      
     |      Get the datablock for this node. If there is no datablock then one will be created.
     |      NOTE: This should be used only in places where fast access to the datablock outside of a compute is critical such as the transformUsing method of MPxSurfaceShape.
     |      
     |      * ctx (MDGContext) - The context in which the datablock will be retrieved.
     |  
     |  getExternalContent(...)
     |      getExternalContent(table) -> self
     |      
     |      The table populated by this method must include the location of all the content (files) used by this node, including those that do not exist.  See MExternalContentInfoTable for details.
     |      
     |      Keys used to add items to this table will be the same that get passed to setExternalContent through its MExternalContentLocationTable parameter to perform a batched change of content location.
     |      
     |      When implementing getExternalContent, you are responsible for forwarding the call to the base class when it makes sense to do so, so that base classes  can also add their external content to the table.
     |      
     |      The default implementation does nothing.
     |      
     |      * table [OUT] (MExternalContentInfoTable) - Content information table that this method must populate.
     |  
     |  getFilesToArchive(...)
     |      getFilesToArchive(shortName=False, unresolvedName=False, markCouldBeImageSequence=False) -> list of strings
     |      
     |      Use this method to return all external files used by this node. This file list will be used by the File > Archive zip feature, maya.exe -archive and the `file -q -list` mel command.
     |      
     |      Only include files that exist.
     |      
     |      If shortName is True, return just the filename portion of the path. Otherwise, return a full path.
     |      
     |      If unresolvedName is True, return the path before any resolution has been done (i.e leave it as a relative path, include unexpanded environment variables,  tildes, ".."s etc). Otherwise, resolve the file     path and return an absolute path (to resolve with standard Maya path resolution, use MFileObject.resolvedFullName()).
     |      
     |      * shortName (bool) - If True, only add the filename of the path.
     |      * unresolvedName (bool) - If True, add paths before any resolution, rather than absolute paths.
     |      * markCouldBeImageSequence (bool) - If True, append an asterisk after any file path that could be an image sequence (note: only used by maya.exe -archive).
     |  
     |  getInternalValue(...)
     |      getInternalValue(plug, dataHandle) -> bool
     |      
     |      This method is overridden by nodes that store attribute data in some internal format.
     |      
     |      The internal state of attributes can be set or queried using the setInternal and internal methods of MFnAttribute.
     |      
     |      When internal attribute values are queried via getAttr or MPlug.getValue() this method is called.
     |      
     |      All internal data should respect the current context, which may be obtained from MDGContext::current()
     |      
     |      * plug (MPlug) - the attribute that is being queried.
     |      * dataHandle [OUT] (MDataHandle) - the dataHandle to store the attribute value.
     |  
     |  getInternalValueInContext(...)
     |      getInternalValueInContext(plug, dataHandle, ctx) -> bool [OBSOLETE]
     |      
     |      This method is obsolete. Override MPxNode.getInternalValue instead.
     |      
     |      * plug (MPlug) - the attribute that is being queried.
     |      * dataHandle [OUT] (MDataHandle) - the dataHandle to store the attribute value.
     |      * ctx (MDGContext) - the context the method is being evaluated in.
     |  
     |  internalArrayCount(...)
     |      internalArrayCount(plug) -> int
     |      internalArrayCount(plug, ctx) -> int  [OBSOLETE]
     |      
     |      This method is overridden by nodes that have internal array attributes which are not stored in Maya's datablock. This method is used by Maya to determine the non-sparse count of array elements during file IO. If the internal array is stored sparsely, you should return the maximum index of the array plus one. If the internal array is non-sparse then return the length of the array.
     |      
     |      This method does not need to be implemented for attributes that are stored in the datablock since Maya will use the datablock size.
     |      
     |      If this method is overridden, it should return -1 for attributes which it does not handle. Maya will use the datablock size to determine the array length when -1 is returned.
     |      
     |      All internal data should respect the current context, which may be obtained from MDGContext.current()
     |      
     |      * plug (MPlug) - the array plug.
     |      * ctx (MDGContext) - the context, default to MDGContext.current().
     |  
     |  isAbstractClass(...)
     |      isAbstractClass() -> bool
     |      
     |      Override this class to return True if this node is an abstract node. An abstract node can only be used as a base class.  It cannot be created using the 'createNode' command.
     |      
     |      It is not necessary to override this method.
     |  
     |  isPassiveOutput(...)
     |      isPassiveOutput(plug) -> bool
     |      
     |      This method may be overridden by the user defined node if it wants to provide output attributes which do not prevent value modifications to the destination attribute. For example, output plugs on animation curve nodes are passive. This allows the attributes driven by the animation curves to be set to new values by the user.
     |      
     |      * plug (MPlug) - plug representing output in question.
     |  
     |  legalConnection(...)
     |      legalConnection(plug, otherPlug, asSrc) -> bool/None
     |      
     |      This method allows you to check for legal connections being made to attributes of this node.
     |      
     |      You should return None to specify that maya should handle this connection if you are unable to determine if it is legal.
     |      
     |      * plug (MPlug) - attribute on this node.
     |      * otherPlug (MPlug) - attribute on other node.
     |      * asSrc (bool) - is this plug a source of the connection.
     |  
     |  legalDisconnection(...)
     |      legalDisconnection(plug, otherPlug, arsSrc) -> bool/None
     |      
     |      This method allows you to check for legal disconnections being made to attributes of this node.
     |      
     |      You should return None to specify that maya should handle this disconnection if you are unable to determine if it is legal.
     |      
     |      * plug (MPlug) - attribute on this node.
     |      * otherPlug (MPlug) - attribute on other node.
     |      * asSrc (boool) - is this plug a source of the connection.
     |  
     |  name(...)
     |      name() -> string
     |      
     |      Returns the name of this particular instance of this class.  Each objectin the dependency graph has a name.  This name will be used by the UIand by MEL.
     |      
     |      It is not necessary to override this method.
     |      
     |      Returns the name of the node
     |  
     |  passThroughToMany(...)
     |      passThroughToMany(plug, plugArray) -> bool
     |      
     |      This method is overriden by nodes that want to control the traversal behavior of some Maya search algorithms which traverse the history/future of shape nodes looking for directly related nodes. In particular, the Artisan paint code uses this method when searching for paintable nodes, and the disk cache code uses this method when searching for upstream cacheFile nodes.
     |      
     |      If this method is not implemented or returns False, the base class Maya implementation of this method calls passThroughToOne and returns the results of that call.
     |      
     |      * plug (MPlug) - the plug.
     |      * plugArray (MPlugArray) - the corresponding plugs.
     |  
     |  passThroughToOne(...)
     |      passThroughToOne(plug) -> plug
     |      
     |      This method may be overriden by nodes that have a one-to-one relationship between an input attribute and a corresponding output attribute. This method is used by Maya to perform the following capabilities:
     |      
     |      - When this node is deleted, the delete command will rewire the source of the input attribute to the destination of the output attribute if the source and destination are connected to nodes that are not deleted.
     |      - History traversal algorithms such as the bakePartialHistory command use this method to direct its traversal through a shape's construction history.
     |      - The base class Maya implementation of passThroughToAll will call this method if passThroughToAll returns False.
     |      
     |      * plug (MPlug) - the plug.
     |  
     |  postConstructor(...)
     |      postConstructor() -> self
     |      
     |      Internally maya creates two objects when a user defined node is created, the internal MObject and the user derived object.
     |      The association between the these two objects is not made until after the MPxNode constructor is called. This implies that no MPxNode member function can be called from the MPxNode constructor.
     |      The postConstructor will get called immediately after the constructor when it is safe to call any MPxNode member function.
     |  
     |  postEvaluation(...)
     |      postEvaluation(context, evalNode, evalType) -> None
     |      
     |      Clean up node's internal state after threaded evaluation.
     |      
     |      After the evaluation graph execution, each node gets a chance to restore / update its internal states.For example, resetting draw state.
     |      
     |      This code has to be thread safe, non - blocking and work only on data owned by the node.
     |      
     |      This call will most likely happen from a worker thread.
     |      
     |      * context (MDGContext) - Context in which the evaluation is happening.
     |                               This should be respected and only internal state
     |                               information pertaining to it should be modified.
     |      * evaluationNode (MEvaluationNode) - Evaluation node which contains
     |                                           information about the dirty plugs the
     |                                           dirty plugs that were evaluated for this
     |                                           context.
     |      * evalType (PostEvaluationType)
     |        * kEvaluatedIndirectly : The node's compute function handled evaluation.
     |        * kEvaluatedDirectly   : Evaluation was performed externally and the results injected
     |                                 back into the node.  This would happen in situations such as
     |                                 extracting values from an external cache.The node needs to
     |                                 update any additional internal state based on the new values.
     |        * kLeaveDirty          : Evaluation was performed without updating this node. Internal
     |                                 state should be updated to reflect that the node is dirty.
     |  
     |  preEvaluation(...)
     |      preEvaluation(context, evalNode) -> None
     |      
     |      Prepare a node's internal state for threaded evaluation.
     |      
     |      During the evaluation graph execution each node gets a chance to reset its internal states just before being evaluated.
     |      
     |      This code has to be thread safe, non - blocking and work only on data owned by the node.
     |      
     |      The timing of this callback is at the discretion of evaluation graph dependencies and individual evaluators.This means, it should be used purely to prepare this node for evaluation and no particular order should be assumed.
     |      
     |      This call will most likely happen from a worker thread.
     |      
     |      * context (MDGContext) - Context in which the evaluation is happening.
     |                               This should be respected and only internal state
     |                               information pertaining to it should be modified.
     |      * evaluationNode (MEvaluationNode) - Evaluation node which contains
     |                                           information about the dirty plugs that
     |                                           are about to be evaluated for the context.
     |                                           Should be only used to query information.
     |  
     |  setDependentsDirty(...)
     |      setDependentsDirty(plug, plugArray) -> self
     |      
     |      This method can be overridden in user defined nodes to specify which plugs should be set dirty based upon an input plug which Maya is marking dirty. The list of plugs for Maya to mark dirty is returned by the plug array. This method handles both dynamic as well as non-dynamic plugs and is useful in the following ways:
     |      
     |      
     |      
     |      - Allows attributeAffects-style relationships to be handled for dynamically-added attributes. Since MPxNode.attributeAffects() can only be used with non-dynamic attributes, use of this method allows a way for all attributes of a node to affect one another, both dynamic and non-dynamic.
     |      
     |      - Provides more flexible relationships than what is available with MPxNode.attributeAffects(). For example, you may wish to not dirty plugs when the current frame is one. However, as the routine is called during dirty propagation, there are restrictions on what can be done within the routine, most importantly you must not cause any dependency graph computation. For details, see the IMPORTANT NOTE below.
     |      
     |      
     |      
     |      This method is designed to work harmoniously with MPxNode.attributeAffects() on the same node. Alternately, you can do all affects relationships within a yourNode.setDependentsDirty() implementation.
     |      
     |      The body of a user-implemented setDependentsDirty() implementation might look like the following example, which causes the plug called "B" to be set dirty whever plug "A" is changed, i.e. A affects B.
     |      
     |      * plug (MPlug) - plug which is being set dirty by Maya.
     |      * plugArray the programmer should add any plugs which they want to set dirty to this list.
     |  
     |  setDoNotWrite(...)
     |      setDoNotWrite(bool) -> self
     |      
     |      Use this method to mark the "do not write" state of this proxy node.  If set, this node will not be saved when the Maya model is written out. 
     |      
     |      NOTES:
     |      1. Plug-in "requires" information will be written out with the model when saved.  But a subsequent reload and resave of the file will cause these to go away.
     |      2. If this node is a DAG and has a parent or children, the "do not write" flag of the parent or children will not be set. It is the developer's responsibility to ensure that the resulting scene file is capable of being read in without errors due to unwritten nodes.
     |  
     |  setExternalContent(...)
     |      setExternalContent(table) -> self
     |      
     |      This is useful in the context of content relocation.  This will be called while the scene is being loaded to apply path changes performed externally. Consequently, interaction with the rest of the scene must be kept to a minimum.  It is however valid to call this method outside of scene loading contexts.
     |      
     |      The keys in the map must be the same as the ones provided by the node in getExternalContent.  The values are the new locations.
     |      
     |      When implementing setExternalContent, you are responsible for forwarding the call to the base class when it makes sense to do so, so that base classes  can also set their external content.
     |      
     |      The default implementation does nothing.
     |      
     |      * table Key->location table with new content locations.
     |  
     |  setExternalContentForFileAttr(...)
     |      setExternalContentForFileAttr(attr, table) -> bool
     |      
     |      This method is a helper for derived clases implementing setExternalContent().  It assigns a value to a plug with the one from the table whose key is the same as the passed in attribute name.
     |      
     |      The method will not write to the plug if the attribute is not found in the  table.
     |      
     |      * attr (MObject) - The attribute of the plug we want to write to.
     |      * table (MExternalContentLocationTable) - A table which may hold or not the value for a given plug.
     |      
     |      Returns True if the plug was successfully written to. False if no entry in the table was named after the attribute or if no plug was found.
     |  
     |  setInternalValue(...)
     |      setInternalValue(plug, dataHandle) -> bool
     |      
     |      
     |      This method is overriden by nodes that store attribute data in some internal format.
     |      
     |      The internal state of attributes can be set or queried using the setInternal and internal methods of MFnAttribute.
     |      
     |      When internal attribute values are set via setAttr or MPlug.setValue() this method is called.
     |      
     |      Another use for this method is to impose attribute limits.
     |      
     |      All internal data should respect the current context, which may be obtained from MDGContext::current()
     |      
     |      * plug (MPlug) - the attribute that is being set.
     |      * dataHandle (MDataHandle) - the dataHandle containing the value to set.
     |  
     |  setInternalValueInContext(...)
     |      setInternalValueInContext(plug, dataHandle, ctx) -> bool  [OBSOLETE]
     |      
     |      This method is obsolete. Override MPxNode.setInternalValue instead.
     |      
     |      * plug (MPlug) - the attribute that is being set.
     |      * dataHandle (MDataHandle) - the dataHandle containing the value to set.
     |      * ctx (MDGContext) - the context the method is being evaluated in.
     |  
     |  setMPSafe(...)
     |      setMPSafe(bool) -> self
     |      
     |      This method is obsolete. Override MPxNode.setSchedulingType instead.
     |      
     |      Set a flag to specify if a user defined shading node is safe for multi-processor rendering. For a shading node to be MP safe, it cannot access any shared global data and should only use attributes in the datablock to get input data and store output data. 
     |      
     |      NOTE: This should be called from the postConstructor() method for shading node plug-ins only. If a shading node is non-safe, then it will only be useful during single processor rendering.
     |  
     |  shouldSave(...)
     |      shouldSave(plug) -> bool/None
     |      
     |      This method may be overridden by the user defined node.  It should only be required to override this on rare occasions.
     |      
     |      This method determines whether a specific attribute of this node should be written out during a file save.  The default behavior is to only write the value if it differs from the default and is not being supplied by a connection.  This behavior should be sufficient in most cases.
     |      This method is not called for ramp attributes since they should always be written.
     |      
     |      * plug (MPlug) - plug representing the attribute to be saved.
     |  
     |  thisMObject(...)
     |      thisMObject() -> MObject
     |      
     |      Returns the MObject associated with this user defined node.  This makes it possible to use MFnDependencyNode or to construct plugs to this node's attributes.
     |  
     |  type(...)
     |      type() -> int
     |      
     |      Returns the type of node that this is.  This is used to differentiate user defined nodes that are derived off different MPx base classes.
     |      
     |      It is not necessary to override this method.
     |      
     |        kDependNode                    Custom node derived from MPxNode
     |        kLocatorNode                   Custom locator derived from MPxLocatorNode
     |        kDeformerNode                  Custom deformer derived from MPxDeformerNode
     |        kManipContainer                Custom container derived from MPxManipContainer
     |        kSurfaceShape                  Custom shape derived from MPxSurfaceShape
     |        kFieldNode                     Custom field derived from MPxFieldNode
     |        kEmitterNode                   Custom emitter derived from MPxEmitterNode
     |        kSpringNode                    Custom spring derived from MPxSpringNode
     |        kIkSolverNode                  Custom IK solver derived from MPxIkSolverNode
     |        kHardwareShader                Custom shader derived from MPxHardwareShader
     |        kHwShaderNode                  Custom shader derived from MPxHwShaderNode
     |        kTransformNode                 Custom transform derived from MPxTransform
     |        kObjectSet                     Custom set derived from MPxObjectSet
     |        kFluidEmitterNode              Custom fluid emitter derived from MpxFluidEmitterNode
     |        kImagePlaneNode                Custom image plane derived from MPxImagePlane
     |        kParticleAttributeMapperNode   Custom particle attribute mapper derived from MPxParticleAttributeMapperNode
     |        kCameraSetNode                 Custom director derived from MPxCameraSet
     |        kConstraintNode                Custom constraint derived from MPxConstraint
     |        kManipulatorNode               Custom manipulator derived from MPxManipulatorNode
     |        kClientDeviceNode              Custom threaded device derived from MPxThreadedDeviceNode
     |        kThreadedDeviceNode            Custom threaded device node
     |        kAssembly                      Custom assembly derived from MPxAssembly
     |        kSkinCluster                                  Custom deformer derived from MPxSkinCluster
     |        kGeometryFilter                               Custom deformer derived from MPxGeometryFilter
     |               kBlendShape                                    Custom deformer derived from MPxBlendShape
     |  
     |  typeId(...)
     |      typeId() -> MTypeId
     |      
     |      Returns the TYPEID of this node.
     |  
     |  typeName(...)
     |      typeName() -> string
     |      
     |      Returns the type name of this node.  The type name identifies the node type to the ASCII file format
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MPxNode:
     |  
     |  addAttribute(...)
     |      addAttribute(attr) -> None
     |      
     |      This method adds a new attribute to a user defined node type during the type's initialization.
     |      
     |      This method will only work during the static initialization method of the user defined node class.  The initialization method is the one that is passed into  MFnPlugin.registerNode(). The attributes must first be created using one of the MFnAttribute classes, and can then be added using this method.
     |      
     |      For compound attributes, the proper way to use this method is by calling it with the parent attribute. If a compound attribute is passed, this method will add all of its children.
     |      NOTE: A failure will occur if you attempt to call addAttribute() on the children of a compound attribute.
     |      
     |      * attr (MObject) - new attribute to add.
     |  
     |  attributeAffects(...)
     |      attributeAffects(whenChanges, isAffected) -> None
     |      
     |      This method specifies that a particular input attribute affects a specific output attribute.  This is required to make evaluation efficient.  When an input changes, only the affected outputs will be computed. Output attributes cannot be keyable - if they are keyable, this method will fail.
     |      
     |      This method must be called for every attribute dependency when initializing the node's attributes.  The attributes must first be added using the MPxNode.addAttribute() method.  Failing to call this method will cause the node not to update when its inputs change. If there are no calls to this method in a node's initialization, then the compute method will never be called.
     |      
     |      This method will only work during the static initialization method of the user defined node class.  The initialization method is the one that is passed into MFnPlugin.registerNode().  As a result, it does not work with dynamic attributes. For an alternate solution which handles dynamic as well as non-dynamic attributes refer to MPxNode.setDependentsDirty.()
     |      
     |      * whenChanges (MObject) - input attribute - MObject that points to an input attribute that has already been added.
     |      * isAffected (MObject) - affected output attribute - MObject that points to an output attribute that has already been added.
     |  
     |  inheritAttributesFrom(...)
     |      inheritAttributesFrom(parentClassName) -> None
     |      
     |      This method allows a class of plugin node to inherit all of the attributes of a second class of plugin node.
     |      
     |      This method will only work during the static initialization method of the user defined node class and must be called before any other attributes have been added.  The initialization method is the one that is passed into  MFnPlugin.registerNode().
     |      
     |      A plugin node may only inherit attributes from one other class of plugin node. Attempting to call this method multiple times within a node's initialization method will result in an error.
     |      
     |      Both node classes must be registered using the same MPxNode type, listed in MPxNode.type().
     |      
     |      * parentClassName (string) - class of node to inherit attributes from.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MPxNode:
     |  
     |  kAssembly = 22
     |  
     |  kBlendShape = 25
     |  
     |  kCameraSetNode = 16
     |  
     |  kClientDeviceNode = 20
     |  
     |  kConstraintNode = 17
     |  
     |  kDeformerNode = 2
     |  
     |  kDependNode = 0
     |  
     |  kEmitterNode = 6
     |  
     |  kEvaluatedDirectly = 1
     |  
     |  kEvaluatedIndirectly = 0
     |  
     |  kFieldNode = 5
     |  
     |  kFluidEmitterNode = 13
     |  
     |  kGeometryFilter = 24
     |  
     |  kHardwareShader = 9
     |  
     |  kHwShaderNode = 10
     |  
     |  kIkSolverNode = 8
     |  
     |  kImagePlaneNode = 14
     |  
     |  kLast = 26
     |  
     |  kLeaveDirty = 2
     |  
     |  kLocatorNode = 1
     |  
     |  kManipContainer = 3
     |  
     |  kManipulatorNode = 18
     |  
     |  kMotionPathNode = 19
     |  
     |  kObjectSet = 12
     |  
     |  kParticleAttributeMapperNode = 15
     |  
     |  kPostEvaluationTypeLast = 3
     |  
     |  kSkinCluster = 23
     |  
     |  kSpringNode = 7
     |  
     |  kSurfaceShape = 4
     |  
     |  kThreadedDeviceNode = 21
     |  
     |  kTransformNode = 11
    
    class MQuaternion(__builtin__.object)
     |  Quaternion math.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __neg__(...)
     |      x.__neg__() <==> -x
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  asAxisAngle(...)
     |      Returns the rotation as a tuple containing an axis vector and an angle in radians about that axis.
     |  
     |  asEulerRotation(...)
     |      Returns the rotation as an equivalent MEulerRotation.
     |  
     |  asMatrix(...)
     |      Returns the rotation as an equivalent rotation matrix.
     |  
     |  conjugate(...)
     |      Returns the conjugate of this quaternion (i.e. x, y and z components negated).
     |  
     |  conjugateIt(...)
     |      In-place conjugation (i.e. negates the x, y and z components).
     |  
     |  exp(...)
     |      Returns a new quaternion containing the exponent of this one.
     |  
     |  inverse(...)
     |      Returns a new quaternion containing the inverse of this one.
     |  
     |  invertIt(...)
     |      In-place inversion.
     |  
     |  isEquivalent(...)
     |      Returns True if the distance between the two quaternions (in quaternion space) is less than or equal to the given tolerance.
     |  
     |  log(...)
     |      Returns a new quaternion containing the natural log of this one.
     |  
     |  negateIt(...)
     |      In-place negation of the x, y, z and w components.
     |  
     |  normal(...)
     |      Returns a new quaternion containing the normalized version of this one (i.e. scaled to unit length).
     |  
     |  normalizeIt(...)
     |      In-place normalization (i.e. scales the quaternion to unit length).
     |  
     |  setToXAxis(...)
     |      Set this quaternion to be equivalent to a rotation of a given angle, in radians, about the X-axis.
     |  
     |  setToYAxis(...)
     |      Set this quaternion to be equivalent to a rotation of a given angle, in radians, about the Y-axis.
     |  
     |  setToZAxis(...)
     |      Set this quaternion to be equivalent to a rotation of a given angle, in radians, about the Z-axis.
     |  
     |  setValue(...)
     |      Set the value of this quaternion to that of the specified MQuaternion, MEulerRotation, MMatrix or MVector and angle.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  slerp(...)
     |      Returns the quaternion at a given interpolation value along the shortest path between two quaternions.
     |  
     |  squad(...)
     |      Returns the quaternion at a given interpolation value along a cubic curve segment in quaternion space.
     |  
     |  squadPt(...)
     |      Returns a new quaternion representing an intermediate point which when used with squad() will produce a C1 continuous spline.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  w
     |      Real component
     |  
     |  x
     |      Imaginary X component
     |  
     |  y
     |      Imaginary Y component
     |  
     |  z
     |      Imaginary Z component
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kIdentity = maya.api.OpenMaya.MQuaternion(0, 0, 0, 1)
     |  
     |  kTolerance = 1e-10
    
    class MRampAttribute(__builtin__.object)
     |  Functionset for creating and working with ramp attributes.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addEntries(...)
     |      Adds entries to the ramp.
     |  
     |  deleteEntries(...)
     |      Removes from the ramp those entries with the specified indices.
     |  
     |  getEntries(...)
     |      Returns a tuple containing all of the entries in the ramp.
     |  
     |  getValueAtPosition(...)
     |      Returns the value of the entry at the given position.
     |  
     |  hasIndex(...)
     |      Return true if an entry is defined at this index.
     |  
     |  numEntries(...)
     |      Returns the number of entries in the ramp.
     |  
     |  pack(...)
     |      Change the indices numbering by re-ordering them from 0.
     |  
     |  setInterpolationAtIndex(...)
     |      Sets the interpolation of the entry at the given index.
     |  
     |  setPositionAtIndex(...)
     |      Sets the position of the entry at the given index.
     |  
     |  setRamp(...)
     |      Set this ramp with one or multiple entries. Current entries are removed before adding the new one(s).
     |  
     |  setValueAtIndex(...)
     |      Sets the value of the entry at the given index.
     |  
     |  sort(...)
     |      Sort the ramp by position. Indices are also re-ordered during sort.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  createColorRamp(...)
     |      Creates and returns a new color ramp attribute.
     |  
     |  createCurveRamp(...)
     |      Creates and returns a new curve ramp attribute.
     |  
     |  createRamp(...)
     |      Creates and returns a new color or curve ramp attribute initialized with values.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  isColorRamp
     |      True if the attribute is a color ramp.
     |  
     |  isCurveRamp
     |      True if the attribute is a curve ramp.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kLinear = 1
     |  
     |  kNone = 0
     |  
     |  kSmooth = 2
     |  
     |  kSpline = 3
    
    class MRichSelection(__builtin__.object)
     |  A selection list supporting soft selection and symmetry.
     |  
     |  The rich selection is split into two halves: the 'normal' side,
     |  and an optional symmetric component. Components on both sides
     |  can include weight data which is used to specify both the amount
     |  of influence and the proximity to the centre of symmetry.
     |  
     |  In addition to the selected objects, the rich selection also
     |  includes information about the axis of symmetry so that
     |  operations can determine how to process any symmetric selection
     |  (e.g. reflect transformations).
     |  
     |  __init__()
     |  Initializes a new, empty MRichSelection object.
     |  
     |  __init__(MRichSelection other)
     |  Initializes a new MRichSelection object containing the same
     |  items as another rich selection.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  clear(...)
     |      clear() -> self
     |      
     |      
     |      Empties the rich selection.
     |  
     |  getRawSymmetryMatrix(...)
     |      getRawSymmetryMatrix() -> (MMatrix, space)
     |      
     |      Returns a tuple containing the raw symmetry matrix to use for the
     |      symmetric components of the rich selection, and the transformation
     |      space used by the matrix (see MSpace). The caller is responsible for
     |      handling any necessary transformation space conversions.
     |  
     |  getSelection(...)
     |      getSelection() -> MSelectionList
     |      
     |      Returns a copy of the non-symmetry component of the rich selection.
     |  
     |  getSymmetry(...)
     |      getSymmetry() -> MSelectionList
     |      
     |      Returns a copy of the symmetry component of the rich selection.
     |  
     |  getSymmetryMatrix(...)
     |      getSymmetryMatrix(MDagPath, space) -> MMatrix
     |      
     |      Returns the symmetry matrix to use for the symmetric component of
     |      the specified DAG object. The matrix will already be converted to
     |      use the specified transformation space (see MSpace).
     |  
     |  getSymmetryPlane(...)
     |      getSymmetryPlane(MDagPath, space) -> MPlane
     |      
     |      Returns the plane of symmetry, in the specified transformation space
     |      (see MSpace). This can be used to enforce seam weights in tools that
     |      support symmetry. Note that the direction of the plane carries no
     |      significance. Specifically, having a positive offset from the plane
     |      does not imply a point is part of the non-symmetric selection.
     |  
     |  setSelection(...)
     |      setSelection(MSelectionList) -> self
     |      
     |      Sets the non-symmetry component of the rich selection.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MSceneMessage(MMessage)
     |  Class used to register callbacks for scene related messages.
     |  
     |  Method resolution order:
     |      MSceneMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addCallback(...)
     |      addCallback(message, function, clientData=None) -> id
     |      
     |      Adds a new callback for the specified scene message.
     |      If a 'before' message is sent, the corresponding 'after' message
     |      will be as well.
     |      Callbacks can be added to the following Message constant with this function: kSceneUpdate
     |       kBeforeNew
     |       kAfterNew
     |       kBeforeImport
     |       kAfterImport
     |       kBeforeOpen
     |       kAfterOpen
     |       kBeforeFileRead
     |       kAfterFileRead
     |       kAfterSceneReadAndRecordEdits
     |       kBeforeExport
     |       kExportStarted
     |       kAfterExport
     |       kBeforeSave
     |       kAfterSave
     |       kBeforeCreateReference
     |       kBeforeCreateReferenceAndRecordEdits
     |       kAfterCreateReference
     |       kAfterCreateReferenceAndRecordEdits
     |       kBeforeRemoveReference
     |       kAfterRemoveReference
     |       kBeforeImportReference
     |       kAfterImportReference
     |       kBeforeExportReference
     |       kAfterExportReference
     |       kBeforeUnloadReference
     |       kAfterUnloadReference
     |       kBeforeLoadReference
     |       kBeforeLoadReferenceAndRecordEdits
     |       kAfterLoadReference
     |       kAfterLoadReferenceAndRecordEdits
     |       kBeforeSoftwareRender
     |       kAfterSoftwareRender
     |       kBeforeSoftwareFrameRender
     |       kAfterSoftwareFrameRender
     |       kSoftwareRenderInterrupted
     |       kMayaInitialized
     |       kMayaExiting
     |      
     |      Note that for referencing, the creation of the reference (i.e. creation of
     |      the reference node and associated structures) is separate from the loading
     |      of the reference itself (i.e. read the nodes from file).
     |      
     |      The kBeforeCreateReference message will be sent when a reference is created.
     |      So it will happen for both loaded and unloaded references. But the 
     |      kBeforeLoadReference message will only be sent when the file is read from disk.
     |      
     |      When opening a file with a loaded reference, the callback order is as follows:
     |       kBeforeCreateReference
     |       kBeforeCreateReferenceAndRecordEdits
     |       kBeforeCreateReferenceAndRecordEdits
     |       kAfterCreateReferenceAndRecordEdits
     |      
     |       kBeforeLoadReference
     |       kBeforeLoadReferenceAndRecordEdits
     |       kAfterLoadReference
     |       kAfterLoadReferenceAndRecordEdits
     |      
     |      By default, edits to referenced objects will not be recorded during the execution
     |      of file I/O callbacks. A specific set of callbacks are provided that will enable
     |      the recording of reference edits during their execution as follows:
     |       kAfterSceneReadAndRecordEdits
     |       kBeforeCreateReferenceAndRecordEdits
     |       kAfterCreateReferenceAndRecordEdits
     |       kBeforeLoadReferenceAndRecordEdits
     |       kAfterLoadReferenceAndRecordEdits
     |      
     |      The kExportStarted callback is sent after the kBeforeExport callback, once Maya
     |      has actually started to process the exported data. One important difference between
     |      the two callbacks is that the fileInfo command affects the exported scene when used
     |      in the kExportStarted callback, but affects the current scene in memory when used
     |      in the kBeforeExport callback.
     |      
     |       * message - the Message constant that will trigger the callback
     |       * function - callable which will be passed the clientData object
     |       * clientData - user data that will be passed to the callback function
     |  
     |  addCheckCallback(...)
     |      addCheckCallback(message, function, clientData=None) -> id
     |      
     |      This function adds a new callback for the specified scene message.
     |      The callback will have the ability to abort the current operation
     |      by returning False.
     |      
     |      Callbacks can be added to the following messages with this function:
     |       kBeforeNewCheck
     |       kBeforeImportCheck
     |       kBeforeOpenCheck
     |       kBeforeExportCheck
     |       kBeforeSaveCheck
     |       kBeforeCreateReferenceCheck
     |       kBeforeLoadReferenceCheck
     |      
     |       * message - the scene message that will trigger the callback
     |       * function - callable which will be passed the clientData object,
     |         return False to abort the current operation.
     |       * clientData - user data that will be passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addCheckFileCallback(...)
     |      addCheckFileCallback(message, function, clientData=None) -> id
     |      
     |      This function adds a new callback for the specified scene message. This
     |      callback has the option to abort the current operation by returning
     |      False. The file parameter stores the target file for the current
     |      file IO operation, by modifying this file parameter the target file
     |      will be changed as well.
     |      
     |      Callbacks can be added to the following messages with this function:
     |       kBeforeImportCheck
     |       kBeforeOpenCheck
     |       kBeforeExportCheck
     |       kBeforeCreateReferenceCheck
     |       kBeforeLoadReferenceCheck
     |      
     |       * message - the scene message that will trigger the callback
     |       * function - callable which will be passed a MFileObject indicating the
     |         file object that will be acted on by the current file IO operation, any
     |         modifications to it will be passed back to Maya and change the file being
     |         acted on, and the clientData object.
     |         return False to abort the current operation.
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addCheckReferenceCallback(...)
     |      addCheckReferenceCallback(message, function, clientData=None) -> id
     |      
     |      This function adds a new callback for the specified scene message.
     |      The callback will have the ability to abort the current operation
     |      by returning False.
     |      
     |      Callbacks can be added to the following Message constant with this function:
     |       BeforeLoadReferenceCheck
     |      
     |       * message - the scene Message constant that will trigger the callback
     |       * function - callable which will be passed a MObject indicating the
     |         reference node, a MFileObject indicating the resolved file path of the
     |         referenced file, and the clientData object
     |         return False to abort the current operation
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addConnectionFailedCallback(...)
     |      addConnectionFailedCallback(function, clientData=None) -> id
     |      
     |      This method registers a callback that is called when a connection was
     |      unable to be made.
     |      Currently, the callback is only triggered during the reading of files (.ma or .mb)
     |      or of edits files (.editMA or .editMB files created by Maya's offline file support).
     |      The most common reasons why a connection would fail are:
     |      - inability to find the specified node or attribute names, or
     |      - a conflicting existing connection
     |      
     |       * function - callable which will be passed a MPlug indicating the
     |         source plug of the connection (or None if it could not be found),
     |         a MPlug indicating destination plug of the connection (or None if
     |         it could not be found), a string containing the name used to look up
     |         the source plug, a string containing the name used to look up the
     |         destination plug and the clientData object.
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addReferenceCallback(...)
     |      addReferenceCallback(message, function, clientData=None) -> id
     |      
     |      This function adds a new callback for the specified scene message.
     |      
     |      Callbacks can be added to the following messages with this function:
     |       kBeforeRemoveReference
     |       kBeforeImportReference
     |       kBeforeUnloadReference
     |       kAfterUnloadReference
     |       kBeforeLoadReference
     |       kAfterLoadReference
     |       kAfterCreateReference
     |       kAfterCreateReferenceAndRecordEdits
     |       kBeforeLoadReferenceAndRecordEdits
     |       kAfterLoadReferenceAndRecordEdits
     |      
     |       * message - the scene Message constant that will trigger the callback
     |       * function - callable which will be passed a MObject indicating the
     |         reference node, a MFileObject indicating he resolved file path of the 
     |         referenced file and the clientData object.
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  addStringArrayCallback(...)
     |      addStringArrayCallback(message, function, clientData=None) -> id
     |      
     |      Adds a new callback which takes a string array argument, in addition to
     |      the usual clientData.
     |      
     |      The Message constants which can be used with this method and the contents
     |      of the string array passed to their callbacks are as follows:
     |       kBeforePluginLoad - path to plug-in file
     |       kAfterPluginLoad - path to plug-in file, name of plug-in
     |       kBeforePluginUnload - name of plug-in
     |       kAfterPluginUnload - name of plug-in, path to plug-in file
     |      
     |              To allow for future expansion callbacks should not rely on the number
     |      of array elements being exactly as given above. While there will not
     |      be fewer elements than given above, there may in future be more.
     |      
     |       * message - the scene Message constant that will trigger the callback
     |       * function - callable which will be passed a list of strings and the
     |         clientData object.
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  kAfterCreateReference = 45
     |  
     |  kAfterCreateReferenceAndRecordEdits = 50
     |  
     |  kAfterExport = 11
     |  
     |  kAfterExportReference = 21
     |  
     |  kAfterFileRead = 8
     |  
     |  kAfterImport = 4
     |  
     |  kAfterImportReference = 19
     |  
     |  kAfterLoadReference = 37
     |  
     |  kAfterLoadReferenceAndRecordEdits = 48
     |  
     |  kAfterNew = 2
     |  
     |  kAfterOpen = 6
     |  
     |  kAfterPluginLoad = 41
     |  
     |  kAfterPluginUnload = 43
     |  
     |  kAfterReference = 15
     |  
     |  kAfterRemoveReference = 17
     |  
     |  kAfterSave = 13
     |  
     |  kAfterSceneReadAndRecordEdits = 9
     |  
     |  kAfterSoftwareFrameRender = 27
     |  
     |  kAfterSoftwareRender = 25
     |  
     |  kAfterUnloadReference = 23
     |  
     |  kBeforeCreateReference = 44
     |  
     |  kBeforeCreateReferenceAndRecordEdits = 49
     |  
     |  kBeforeCreateReferenceCheck = 39
     |  
     |  kBeforeExport = 10
     |  
     |  kBeforeExportCheck = 35
     |  
     |  kBeforeExportReference = 20
     |  
     |  kBeforeFileRead = 7
     |  
     |  kBeforeImport = 3
     |  
     |  kBeforeImportCheck = 34
     |  
     |  kBeforeImportReference = 18
     |  
     |  kBeforeLoadReference = 36
     |  
     |  kBeforeLoadReferenceAndRecordEdits = 47
     |  
     |  kBeforeLoadReferenceCheck = 38
     |  
     |  kBeforeNew = 1
     |  
     |  kBeforeNewCheck = 31
     |  
     |  kBeforeOpen = 5
     |  
     |  kBeforeOpenCheck = 32
     |  
     |  kBeforePluginLoad = 40
     |  
     |  kBeforePluginUnload = 42
     |  
     |  kBeforeReference = 14
     |  
     |  kBeforeReferenceCheck = 39
     |  
     |  kBeforeRemoveReference = 16
     |  
     |  kBeforeSave = 12
     |  
     |  kBeforeSaveCheck = 33
     |  
     |  kBeforeSoftwareFrameRender = 26
     |  
     |  kBeforeSoftwareRender = 24
     |  
     |  kBeforeUnloadReference = 22
     |  
     |  kExportStarted = 46
     |  
     |  kLast = 51
     |  
     |  kMayaExiting = 30
     |  
     |  kMayaInitialized = 29
     |  
     |  kSceneUpdate = 0
     |  
     |  kSoftwareRenderInterrupted = 28
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MSelectionList(__builtin__.object)
     |  A heterogenous list of MObjects, MPlugs and MDagPaths.
     |  
     |  __init__()
     |  Initializes a new, empty MSelectionList object.
     |  
     |  __init__(MSelectionList other)
     |  Initializes a new MSelectionList object containing the same
     |  items as another list.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  add(...)
     |      add(pattern, searchChildNamespaces=False) -> self
     |      add(item, mergeWithExisting=True) -> self
     |      
     |      
     |      The first version adds to the list any nodes, DAG paths, components
     |      or plugs which match the given the pattern string.
     |      
     |      The second version adds the specific item to the list, where the
     |      item can be a plug (MPlug), a node (MObject), a DAG path (MDagPath)
     |      or a component (tuple of (MDagPath, MObject) ).
     |  
     |  clear(...)
     |      clear() -> self
     |      
     |      Empties the selection list.
     |  
     |  copy(...)
     |      copy(src) -> self
     |      
     |      Replaces the contents of the selection list with a copy of those from src (MSelectionList).
     |  
     |  getComponent(...)
     |      getComponent(index) -> (MDagPath, MObject)
     |      
     |      Returns the index'th item of the list as a component, represented by
     |      a tuple containing an MDagPath and an MObject. If the item is just a
     |      DAG path without a component then MObject.kNullObj will be returned
     |      in the second element of the tuple. Raises TypeError if the item is
     |      neither a DAG path nor a component. Raises IndexError if index is
     |      out of range.
     |  
     |  getDagPath(...)
     |      getDagPath(index) -> MDagPath
     |      
     |      Returns the DAG path associated with the index'th item of the list.
     |      Raises TypeError if the item is neither a DAG path nor a component.
     |      Raises IndexError if index is out of range.
     |  
     |  getDependNode(...)
     |      getDependNode(index) -> MObject
     |      
     |      Returns the node associated with the index'th item, whether it be a
     |      dependency node, DAG path, component or plug.
     |      Raises kFailure if there is no dependency node associated with the current item.
     |      Raises IndexError if index is out of range.
     |  
     |  getPlug(...)
     |      getPlug(index) -> MPlug
     |      
     |      Returns the index'th item of the list as a plug. Raises TypeError if
     |      the item is not a plug. Raises IndexError if index is out of range.
     |  
     |  getSelectionStrings(...)
     |      getSelectionStrings(index=None) -> (string, string, ...)
     |      
     |      Returns a tuple containing the string representation of the
     |      specified item. For nodes, DAG paths, plugs and contiguous
     |      components the tuple will only contain a single string, but for non-
     |      contiguous components there will be a separate string for each
     |      distinct block of contiguous elements. If index is not specified
     |      then the string representations of all the items in the selection
     |      list are returned. Raises IndexError if index is out of bounds.
     |  
     |  hasItem(...)
     |      hasItem(item) -> bool
     |      
     |      Returns True if the given item is on the selection list. For a
     |      component this means that all of the elements of the component must
     |      be on the list. A component is passed as a tuple containing the
     |      MDagPath of the DAG node and an MObject containing the component.
     |  
     |  hasItemPartly(...)
     |      hasItemPartly(dagPath, component) -> bool
     |      
     |      Returns True if at least one of the component's elements is on the
     |      selection list. Raises TypeError if dagPath is invalid or component
     |      does not contain a component.
     |  
     |  intersect(...)
     |      intersect(other, expandToLeaves=False) -> self
     |      
     |      Modify this list to contain the intersection of itself and the given list.
     |  
     |  isEmpty(...)
     |      isEmpty() -> bool
     |      
     |      Returns True if the selection list is empty.
     |  
     |  length(...)
     |      length() -> int
     |      
     |      Returns the number of items on the selection list.
     |  
     |  merge(...)
     |      merge(other, strategy=kMergeNormal) -> self
     |      merge(dagPath, component, strategy=kMergeNormal) -> self
     |      
     |      The first version merges the items from another selection list in
     |      with those already on the list, using the given strategy.
     |      
     |      The second version merges the specified component with those already
     |      on the list.
     |  
     |  remove(...)
     |      remove(index) -> self
     |      
     |      Removes the index'th item from the list. Raises IndexError if the
     |      index is out of range.
     |  
     |  replace(...)
     |      replace(index, newItem) -> self
     |      
     |      Replaces the index'th item on the list with a new item. A component
     |      is passed as a tuple containing the MDagPath of the DAG node and an
     |      MObject containing the component. Raises IndexError if the index is
     |      out of range.
     |  
     |  toggle(...)
     |      toggle(dagPath, component) -> self
     |      
     |      Removes from the list those elements of the given component which
     |      are already on it and adds those which are not.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kMergeNormal = 0
     |  
     |  kRemoveFromList = 2
     |  
     |  kXORWithList = 1
    
    class MSelectionMask(__builtin__.object)
     |  Selection masks provide a way to control what is selectable in Maya.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addMask(...)
     |      addMask(selType) -> self
     |      
     |      Add the specified selection type to this mask.
     |      
     |      * selType (int) - the selection type to add.
     |      
     |      Valid selection types:
     |        kSelectHandles
     |        kSelectLocalAxis
     |        kSelectIkHandles
     |        kSelectIkEndEffectors
     |        kSelectJoints
     |        kSelectLights
     |        kSelectCameras
     |        kSelectLattices
     |        kSelectClusters
     |        kSelectSculpts
     |        kSelectNurbsCurves
     |        kSelectNurbsSurfaces
     |        kSelectMeshes
     |        kSelectSubdiv
     |        kSelectSketchPlanes
     |        kSelectParticleShapes
     |        kSelectEmitters
     |        kSelectFields
     |        kSelectSprings
     |        kSelectRigidBodies
     |        kSelectRigidConstraints
     |        kSelectCollisionModels
     |        kSelectXYZLocators
     |        kSelectOrientationLocators
     |        kSelectUVLocators
     |        kSelectTextures
     |        kSelectCurves
     |        kSelectSurfaces
     |        kSelectLocators
     |        kSelectObjectsMask
     |        kSelectCVs
     |        kSelectHulls
     |        kSelectEditPoints
     |        kSelectMeshVerts
     |        kSelectMeshEdges
     |        kSelectMeshFreeEdges
     |        kSelectMeshFaces
     |        kSelectSubdivMeshPoints
     |        kSelectSubdivMeshEdges
     |        kSelectSubdivMeshFaces
     |        kSelectMeshUVs
     |        kSelectVertices
     |        kSelectEdges
     |        kSelectFacets
     |        kSelectMeshLines
     |        kSelectMeshComponents
     |        kSelectCurveParmPoints
     |        kSelectCurveKnots
     |        kSelectSurfaceParmPoints
     |        kSelectSurfaceKnots
     |        kSelectSurfaceRange
     |        kSelectSurfaceEdge
     |        kSelectIsoparms
     |        kSelectCurvesOnSurfaces
     |        kSelectPPStrokes
     |        kSelectLatticePoints
     |        kSelectParticles
     |        kSelectJointPivots
     |        kSelectScalePivots
     |        kSelectRotatePivots
     |        kSelectPivots
     |        kSelectComponentsMask
     |        kSelectAnimCurves
     |        kSelectAnimKeyframes
     |        kSelectAnimInTangents
     |        kSelectAnimOutTangents
     |        kSelectAnimMask
     |        kSelectAnimAny
     |        kSelectTemplates
     |        kSelectManipulators
     |        kSelectGuideLines
     |        kSelectPointsForGravity
     |        kSelectPointsOnCurvesForGravity
     |        kSelectPointsOnSurfacesForGravity
     |        kSelectObjectGroups
     |        kSelectSubdivMeshMaps
     |        kSelectFluids
     |        kSelectHairSystems
     |        kSelectFollicles
     |        kSelectNCloths
     |        kSelectNRigids
     |        kSelectDynamicConstraints
     |        kSelectNParticles
     |  
     |  copy(...)
     |      copy(source) -> self
     |      
     |      Copy data from source selection mask.
     |      
     |      * source (MSelectionMask) - The source selection mask to copy from
     |  
     |  intersects(...)
     |      intersects(mask) -> bool
     |      intersects(selType) -> bool
     |      
     |      Returns True if the specified selection mask or selection type is contained within this selection mask.
     |      
     |      * mask (MSelectionMask) - the selection mask to test.
     |      * selType (int) - the selection type to test.  See addMask() for a list of valid selection masks.
     |  
     |  setMask(...)
     |      setMask(mask) -> self
     |      setMask(selType) -> self
     |      
     |      Sets the selection mask to the specified selection mask or selection type.
     |      
     |      * mask (MSelectionMask) - the selection mask to be set.
     |      * selType (int) - the selection type to be set.  See addMask() for a list of valid selection masks.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  deregisterSelectionType(...)
     |      deregisterSelectionType(selTypeName) -> bool
     |      
     |      Unregisters a previously registered selection type.
     |      
     |      * selTypeName (string) - Name of the selection type.
     |  
     |  getSelectionTypePriority(...)
     |      getSelectionTypePriority(selTypeName) -> int
     |      
     |      Gets the selection priority corresponding to a given selection type.
     |      
     |      * selTypeName (string) - Name of the selection type.
     |  
     |  registerSelectionType(...)
     |      registerSelectionType(selTypeName, priority=0) -> bool
     |      
     |      Registers a new selection type. It is perfectly legal for 2 plug-ins to register the same selection type.
     |      Currently we use the registration count. The selection type is deleted only when deregisterSelectionType() as been called the same number of times as this function - registerSelectionType().
     |      
     |      When registerSelectionType() is invoked and the selection type already exists, we neither enable it nor change its priority, just add its registration count by 1.
     |      The reason is the user might has modified these values after loading the plug-in that has register the selection type the first time.
     |      
     |      * selTypeName (string) - Name of the selection type.
     |      * priority (int) - Priority of the selection type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kSelectAnimAny = 68
     |  
     |  kSelectAnimCurves = 63
     |  
     |  kSelectAnimInTangents = 65
     |  
     |  kSelectAnimKeyframes = 64
     |  
     |  kSelectAnimMask = 67
     |  
     |  kSelectAnimOutTangents = 66
     |  
     |  kSelectCVs = 30
     |  
     |  kSelectCameras = 6
     |  
     |  kSelectClusters = 8
     |  
     |  kSelectCollisionModels = 21
     |  
     |  kSelectComponentsMask = 62
     |  
     |  kSelectCurveKnots = 47
     |  
     |  kSelectCurveParmPoints = 46
     |  
     |  kSelectCurves = 26
     |  
     |  kSelectCurvesOnSurfaces = 53
     |  
     |  kSelectDynamicConstraints = 82
     |  
     |  kSelectEdges = 42
     |  
     |  kSelectEditPoints = 32
     |  
     |  kSelectEmitters = 16
     |  
     |  kSelectFacets = 43
     |  
     |  kSelectFields = 17
     |  
     |  kSelectFluids = 77
     |  
     |  kSelectFollicles = 79
     |  
     |  kSelectGuideLines = 71
     |  
     |  kSelectHairSystems = 78
     |  
     |  kSelectHandles = 0
     |  
     |  kSelectHulls = 31
     |  
     |  kSelectIkEndEffectors = 3
     |  
     |  kSelectIkHandles = 2
     |  
     |  kSelectIsoparms = 52
     |  
     |  kSelectJointPivots = 57
     |  
     |  kSelectJoints = 4
     |  
     |  kSelectLatticePoints = 55
     |  
     |  kSelectLattices = 7
     |  
     |  kSelectLights = 5
     |  
     |  kSelectLocalAxis = 1
     |  
     |  kSelectLocators = 28
     |  
     |  kSelectManipulators = 70
     |  
     |  kSelectMeshComponents = 45
     |  
     |  kSelectMeshEdges = 34
     |  
     |  kSelectMeshFaces = 36
     |  
     |  kSelectMeshFreeEdges = 35
     |  
     |  kSelectMeshLines = 44
     |  
     |  kSelectMeshUVs = 40
     |  
     |  kSelectMeshVerts = 33
     |  
     |  kSelectMeshes = 12
     |  
     |  kSelectNCloths = 80
     |  
     |  kSelectNParticles = 83
     |  
     |  kSelectNRigids = 81
     |  
     |  kSelectNurbsCurves = 10
     |  
     |  kSelectNurbsSurfaces = 11
     |  
     |  kSelectObjectGroups = 75
     |  
     |  kSelectObjectsMask = 29
     |  
     |  kSelectOrientationLocators = 23
     |  
     |  kSelectPPStrokes = 54
     |  
     |  kSelectParticleShapes = 15
     |  
     |  kSelectParticles = 56
     |  
     |  kSelectPivots = 60
     |  
     |  kSelectPointsForGravity = 72
     |  
     |  kSelectPointsOnCurvesForGravity = 73
     |  
     |  kSelectPointsOnSurfacesForGravity = 74
     |  
     |  kSelectRigidBodies = 19
     |  
     |  kSelectRigidConstraints = 20
     |  
     |  kSelectRotatePivots = 59
     |  
     |  kSelectScalePivots = 58
     |  
     |  kSelectSculpts = 9
     |  
     |  kSelectSelectHandles = 61
     |  
     |  kSelectSketchPlanes = 14
     |  
     |  kSelectSprings = 18
     |  
     |  kSelectSubdiv = 13
     |  
     |  kSelectSubdivMeshEdges = 38
     |  
     |  kSelectSubdivMeshFaces = 39
     |  
     |  kSelectSubdivMeshMaps = 76
     |  
     |  kSelectSubdivMeshPoints = 37
     |  
     |  kSelectSurfaceEdge = 51
     |  
     |  kSelectSurfaceKnots = 49
     |  
     |  kSelectSurfaceParmPoints = 48
     |  
     |  kSelectSurfaceRange = 50
     |  
     |  kSelectSurfaces = 27
     |  
     |  kSelectTemplates = 69
     |  
     |  kSelectTextures = 25
     |  
     |  kSelectUVLocators = 24
     |  
     |  kSelectVertices = 41
     |  
     |  kSelectXYZLocators = 22
    
    class MSpace(__builtin__.object)
     |  Static class providing coordinate space constants.
     |  
     |  Data and other attributes defined here:
     |  
     |  kInvalid = 0
     |  
     |  kLast = 5
     |  
     |  kObject = 2
     |  
     |  kPostTransform = 3
     |  
     |  kPreTransform = 2
     |  
     |  kTransform = 1
     |  
     |  kWorld = 4
    
    class MSyntax(__builtin__.object)
     |  Syntax for commands.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addArg(...)
     |      Add a command argument.
     |  
     |  addFlag(...)
     |      Add a flag and its arguments.
     |  
     |  makeFlagMultiUse(...)
     |      Set whether a flag may be used multiple times on the command line.
     |  
     |  makeFlagQueryWithFullArgs(...)
     |      Set whether a flag requires its args when queried.
     |  
     |  maxObjects(...)
     |      Returns the maximum number of objects which can be passed to the command.
     |  
     |  minObjects(...)
     |      Returns the minimum number of objects which can be passed to the command.
     |  
     |  setMaxObjects(...)
     |      Sets the maximum number of objects which can be passed to the command.
     |  
     |  setMinObjects(...)
     |      Sets the minimum number of objects which can be passed to the command.
     |  
     |  setObjectType(...)
     |      Set the type and number of objects to be passed to the command.
     |  
     |  useSelectionAsDefault(...)
     |      If set to True then when no objects are provided on the command-line Maya will pass the current selection instead.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  enableEdit
     |      Enable support for the -edit flag.
     |  
     |  enableQuery
     |      Enable support for the -query flag.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kAngle = 8
     |  
     |  kBoolean = 2
     |  
     |  kDistance = 7
     |  
     |  kDouble = 4
     |  
     |  kInvalidArgType = 0
     |  
     |  kInvalidObjectFormat = 0
     |  
     |  kLastArgType = 11
     |  
     |  kLastObjectFormat = 4
     |  
     |  kLong = 3
     |  
     |  kNoArg = 1
     |  
     |  kNone = 1
     |  
     |  kSelectionItem = 10
     |  
     |  kSelectionList = 3
     |  
     |  kString = 5
     |  
     |  kStringObjects = 2
     |  
     |  kTime = 9
     |  
     |  kUnsigned = 6
    
    class MTime(__builtin__.object)
     |  Manipulate time data.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __div__(...)
     |      x.__div__(y) <==> x/y
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __idiv__(...)
     |      x.__idiv__(y) <==> x/=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __isub__(...)
     |      x.__isub__(y) <==> x-=y
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __rdiv__(...)
     |      x.__rdiv__(y) <==> y/x
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  asUnits(...)
     |      Return the time value, converted to the specified units.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  setUIUnit(...)
     |      Change the units used to display time in Maya's UI.
     |  
     |  ticksPerSecond(...)
     |      Returns the number of ticks per second, the smallest unit of time available.
     |  
     |  uiUnit(...)
     |      Return the units used to display time in Maya's UI.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  unit
     |      Time units currently in use.
     |  
     |  value
     |      Value of the time in the current units.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  k100FPS = 25
     |  
     |  k10FPS = 18
     |  
     |  k1200FPS = 38
     |  
     |  k120FPS = 26
     |  
     |  k125FPS = 27
     |  
     |  k12FPS = 19
     |  
     |  k1500FPS = 39
     |  
     |  k150FPS = 28
     |  
     |  k15FPS = 5
     |  
     |  k16FPS = 20
     |  
     |  k2000FPS = 40
     |  
     |  k200FPS = 29
     |  
     |  k20FPS = 21
     |  
     |  k23_976FPS = 43
     |  
     |  k240FPS = 30
     |  
     |  k24FPS = 6
     |  
     |  k250FPS = 31
     |  
     |  k25FPS = 7
     |  
     |  k29_97DF = 45
     |  
     |  k29_97FPS = 44
     |  
     |  k2FPS = 12
     |  
     |  k3000FPS = 41
     |  
     |  k300FPS = 32
     |  
     |  k30FPS = 8
     |  
     |  k375FPS = 33
     |  
     |  k3FPS = 13
     |  
     |  k400FPS = 34
     |  
     |  k40FPS = 22
     |  
     |  k44100FPS = 48
     |  
     |  k47_952FPS = 46
     |  
     |  k48000FPS = 49
     |  
     |  k48FPS = 9
     |  
     |  k4FPS = 14
     |  
     |  k500FPS = 35
     |  
     |  k50FPS = 10
     |  
     |  k59_94FPS = 47
     |  
     |  k5FPS = 15
     |  
     |  k6000FPS = 42
     |  
     |  k600FPS = 36
     |  
     |  k60FPS = 11
     |  
     |  k6FPS = 16
     |  
     |  k750FPS = 37
     |  
     |  k75FPS = 23
     |  
     |  k80FPS = 24
     |  
     |  k8FPS = 17
     |  
     |  k90FPS = 50
     |  
     |  kFilm = 6
     |  
     |  kGames = 5
     |  
     |  kHours = 1
     |  
     |  kInvalid = 0
     |  
     |  kLast = 52
     |  
     |  kMilliseconds = 4
     |  
     |  kMinutes = 2
     |  
     |  kNTSCField = 11
     |  
     |  kNTSCFrame = 8
     |  
     |  kPALField = 10
     |  
     |  kPALFrame = 7
     |  
     |  kSeconds = 3
     |  
     |  kShowScan = 9
     |  
     |  kUserDef = 51
    
    class MTimeArray(__builtin__.object)
     |  Array of MTime values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MTimerMessage(MMessage)
     |  Class used to register callbacks for timer related messages.
     |  
     |  Method resolution order:
     |      MTimerMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addTimerCallback(...)
     |      addTimerCallback(period, function, clientData=None) -> id
     |      
     |      This method registers a callback which is called repeatedly with a
     |      specified period of time between calls. Each time the timer fires the
     |      callback will be placed on the idle queue for execution in the next
     |      idle cycle. If the timer fires again, before the previous invocation
     |      has completed execution, the new firing will be skipped.
     |      
     |      If the execution time of the callback exceeds half of its period then
     |      the next timeout will be skipped to give Maya time to process other tasks.
     |      
     |      The maximum resolution for this callback is about 1ms.  The response
     |      is, however, not guaranteed because while multitasking, the OS may
     |      delay for an unspecified length of time before returning control to
     |      Maya.
     |      
     |       * period (float) - the period at which the callback will be
     |      executed (Measured in seconds)
     |       * function - callable which will be passed a float indicating
     |         the elapsed time since this function was last called, a float
     |         indicating the execution time of this function the last time
     |         it was called, and the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MTransformationMatrix(__builtin__.object)
     |  Manipulate the individual components of a transformation.
     |  
     |  Methods defined here:
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  asMatrix(...)
     |      Interpolates between the identity transformation and that currently in the object, returning the result as an MMatrix.
     |  
     |  asMatrixInverse(...)
     |      Returns the inverse of the matrix representing the transformation.
     |  
     |  asRotateMatrix(...)
     |      Returns the matrix which takes points from object space to the space immediately following the scale/shear/rotation transformations.
     |  
     |  asScaleMatrix(...)
     |      Returns the matrix which takes points from object space to the space immediately following scale and shear transformations.
     |  
     |  isEquivalent(...)
     |      Returns true if this transformation's matrix is within tolerance of another's matrix.
     |  
     |  reorderRotation(...)
     |      Reorders the transformation's rotate component to give the same overall rotation but using a new order or rotations.
     |  
     |  rotateBy(...)
     |      Adds to the transformation's rotation component.
     |  
     |  rotateByComponents(...)
     |      Adds to the transformation's rotation component.
     |  
     |  rotatePivot(...)
     |      Returns the transformation's rotate pivot component.
     |  
     |  rotatePivotTranslation(...)
     |      Returns the transformation's rotate pivot translation component.
     |  
     |  rotation(...)
     |      Returns the transformation's rotation component as either an Euler rotation or a quaternion.
     |  
     |  rotationComponents(...)
     |      Returns a list containing the four components of the transformation's rotate component.
     |  
     |  rotationOrder(...)
     |      Returns the order of rotations when the transformation's rotate component is expressed as an euler rotation.
     |  
     |  rotationOrientation(...)
     |      Returns a quaternion which orients the local rotation space.
     |  
     |  scale(...)
     |      Returns a list containing the transformation's scale components.
     |  
     |  scaleBy(...)
     |      Multiplies the transformation's scale components by the three floats in the provided sequence.
     |  
     |  scalePivot(...)
     |      Returns the transformation's scale pivot component.
     |  
     |  scalePivotTranslation(...)
     |      Returns the transformation's scale pivot translation component.
     |  
     |  setRotatePivot(...)
     |      Sets the transformation's rotate pivot component.
     |  
     |  setRotatePivotTranslation(...)
     |      Sets the transformation's rotate pivot translation component.
     |  
     |  setRotation(...)
     |      Sets the transformation's rotation component.
     |  
     |  setRotationComponents(...)
     |      Sets the transformation's rotate component from the four values in the provided sequence.
     |  
     |  setRotationOrientation(...)
     |      Sets a quaternion which orients the local rotation space.
     |  
     |  setScale(...)
     |      Sets the transformation's scale components to the three floats in the provided sequence.
     |  
     |  setScalePivot(...)
     |      Sets the transformation's scale pivot component.
     |  
     |  setScalePivotTranslation(...)
     |      Sets the transformation's scale pivot translation component.
     |  
     |  setShear(...)
     |      Sets the transformation's shear component.
     |  
     |  setToRotationAxis(...)
     |      Sets the transformation's rotate component to be a given axis vector and angle in radians.
     |  
     |  setTranslation(...)
     |      Sets the transformation's translation component.
     |  
     |  shear(...)
     |      Returns a list containing the transformation's shear components.
     |  
     |  shearBy(...)
     |      Multiplies the transformation's shear components by the three floats in the provided sequence.
     |  
     |  translateBy(...)
     |      Adds a vector to the transformation's translation component.
     |  
     |  translation(...)
     |      Returns the transformation's translation component as a vector.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kIdentity = <OpenMaya.MTransformationMatrix object>
     |  
     |  kInvalid = 0
     |  
     |  kLast = 7
     |  
     |  kTolerance = 1e-10
     |  
     |  kXYZ = 1
     |  
     |  kXZY = 4
     |  
     |  kYXZ = 5
     |  
     |  kYZX = 2
     |  
     |  kZXY = 3
     |  
     |  kZYX = 6
    
    class MTypeId(__builtin__.object)
     |  Stores a Maya object type identifier.
     |  
     |  Methods defined here:
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  id(...)
     |      Returns the type id as a long.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MURI(__builtin__.object)
     |  Manipulate URIs.
     |  
     |  Methods defined here:
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  addQueryItem(...)
     |      addQueryItem(key, value) -> self
     |      
     |      Add a key/value pair to the query string of the URI.
     |  
     |  asString(...)
     |      asString() -> string
     |      
     |      Returns the string representation of the URI.
     |  
     |  clear(...)
     |      clear() -> self
     |      
     |      Clears the contents of the MURI object.
     |  
     |  copy(...)
     |      copy(source) -> self
     |      
     |      Copy method. Assigns the value of one MURI to another.
     |      
     |      * source (MURI) - Existing MURI object to copy.
     |  
     |  getAllQueryItemKeys(...)
     |      getAllQueryItemKeys() -> array
     |      
     |      Returns an array containing the keys from all query string pairs.
     |  
     |  getAllQueryItemValues(...)
     |      getAllQueryItemValues(key) -> array
     |      
     |      Returns an array containing the values from all query string pairs which have a given key.
     |  
     |  getAuthority(...)
     |      getAuthority() -> string
     |      
     |      Returns the authority component of the URI.
     |  
     |  getDirectory(...)
     |      getDirectory() -> string
     |      
     |      Returns just the file directory portion of the URI, without the file name.
     |  
     |  getFileName(...)
     |      getFileName(bool includeExtension=True) -> string
     |      
     |      Returns just the file name portion of the URI, with or without the extension.
     |  
     |  getFragment(...)
     |      getFragment() -> string
     |      
     |      Returns the fragment component of the URI.
     |  
     |  getHost(...)
     |      getHost() -> string
     |      
     |      Returns the host component of the URI.
     |  
     |  getPassword(...)
     |      getPassword() -> string
     |      
     |      Returns the password component of the URI.
     |  
     |  getPath(...)
     |      getPath() -> string
     |      
     |      Returns the path component of the URI.
     |  
     |  getPort(...)
     |      getPort() -> int
     |      
     |      Returns the port component of the URI, or -1 if the port is not defined.
     |  
     |  getQueryItemValue(...)
     |      getQueryItemValue(key) -> string
     |      
     |      Returns the value from the first query string pair in the URI which has a given key.
     |  
     |  getQueryPairDelimiter(...)
     |      getQueryPairDelimiter() -> string
     |      
     |      Returns the character used to delimit between key-value pairs in the query string of the URI.
     |  
     |  getQueryValueDelimiter(...)
     |      getQueryValueDelimiter() -> string
     |      
     |      Returns the character used to delimit keys and values in the query string of the URI.
     |  
     |  getScheme(...)
     |      getScheme() -> string
     |      
     |      Returns the scheme of the URI.
     |  
     |  getUserInfo(...)
     |      getUserInfo() -> string
     |      
     |      Returns the user info component of the URI.
     |  
     |  getUserName(...)
     |      getUserName() -> string
     |      
     |      Returns the user name component of the URI.
     |  
     |  isEmpty(...)
     |      isEmpty() -> bool
     |      
     |      Determines if the URI does not contain any data.
     |  
     |  isValid(...)
     |      isValid() -> bool
     |      
     |      Determines if the URI is valid.
     |  
     |  removeAllQueryItems(...)
     |      removeAllQueryItems(int) -> self
     |      
     |      Removes all query string pairs having a given key from the URI.
     |  
     |  removeQueryItem(...)
     |      removeQueryItem(int) -> self
     |      
     |      Removes the first query string pair with a given key from the URI.
     |  
     |  setAuthority(...)
     |      setAuthority(string) -> self
     |      
     |      Set the authority portion of the URI.
     |  
     |  setDirectory(...)
     |      setDirectory(string) -> self
     |      
     |      Sets just the directory portion of the URI (i.e. not including the filename).
     |  
     |  setFileName(...)
     |      setFileName(string) -> self
     |      
     |      Sets just the filename portion of the URI (i.e. not including the directory).
     |  
     |  setFragment(...)
     |      setFragment(string) -> self
     |      
     |      Sets the fragment component of the URI.
     |  
     |  setHost(...)
     |      setHost(string) -> self
     |      
     |      Set the host component of the URI.
     |  
     |  setPassword(...)
     |      setPassword(string) -> self
     |      
     |      Sets the password part of the user info component.
     |  
     |  setPath(...)
     |      setPath(string) -> self
     |      
     |      Sets the path component of the URI.
     |  
     |  setPort(...)
     |      setPort(int) -> self
     |      
     |      Set the port component of the URI.
     |  
     |  setQueryDelimiters(...)
     |      setQueryDelimiters(valueDelimiter, pairDelimiter) -> self
     |      
     |      Sets the delimiter characters used in the query string of the URI.
     |  
     |  setScheme(...)
     |      setScheme(string) -> self
     |      
     |      Sets the scheme component of the URI.
     |  
     |  setURI(...)
     |      setURI(uri) -> self
     |      
     |      Initialize the MURI from a string value.
     |  
     |  setUserInfo(...)
     |      setUserInfo(string) -> self
     |      
     |      Decomposes the userInfo string to fill out the userInfo-related component values.
     |  
     |  setUserName(...)
     |      setUserName(string) -> self
     |      
     |      Sets the user name part of the user info component.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  isValidURI(...)
     |      isValidURI(uri) -> bool
     |      
     |      Determines if a string value represents a valid URI.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MUint64Array(__builtin__.object)
     |  Array of MUint64 values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MUintArray(__builtin__.object)
     |  Array of unsigned int values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MUserData(__builtin__.object)
     |  Virtual base class for user data caching.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  deleteAfterUse(...)
     |      deleteAfterUse() -> bool
     |      
     |      Returns whether or not this user data should be deleted immediately after use instead of being
     |      maintained until the internal owning object is deleted.
     |  
     |  setDeleteAfterUse(...)
     |      setDeleteAfterUse(bool) -> self
     |      
     |      Sets whether or not this user data should be deleted immediately after use instead of being
     |      maintained until the internal owning object is deleted.
     |      
     |      Setting this to false may allow the data to be reused in some situations.
     |      For example, if the MUserData returned by an MPxDrawOverride instance's prepareForDraw() method has
     |      its delete-after-use set to false, then Maya will retain the data between draws of that object,
     |      passing it back to the instance for reuse on subsequent draws.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MUserEventMessage(MMessage)
     |  Class used to register callbacks for user event messages.
     |  
     |  Method resolution order:
     |      MUserEventMessage
     |      MMessage
     |      __builtin__.object
     |  
     |  Static methods defined here:
     |  
     |  addUserEventCallback(...)
     |      addUserEventCallback(eventName, function, clientData=None) -> id
     |      
     |      This method registers a callback for user-defined messages.
     |      
     |      The parameter clientData will be passed to callbacks registered for this
     |      event whenever the event is triggered.  To override the data that is passed
     |      to the callback whenever the event is posted, you can supply a clientData
     |      pointer to postUserEvent()..
     |      
     |       * eventName (string) - the event name to register the callback for
     |       * function - callable which will be passed the clientData object
     |       * clientData - User defined data passed to the callback function
     |      
     |       * return: Identifier used for removing the callback.
     |  
     |  deregisterUserEvent(...)
     |      deregisterUserEvent(eventName)
     |      
     |      Removes the event type with the given event name.  If callbacks have been
     |      registered with this event type, they will become invalid after a
     |      successful call to this method.
     |      
     |       * eventName (string) - the name of the new event to deregister.
     |  
     |  isUserEvent(...)
     |      isUserEvent(eventName) -> bool
     |      
     |      Checks if an event type exists with the given event name.
     |      
     |       * eventName (string) - the name of the new event to check.
     |  
     |  postUserEvent(...)
     |      postUserEvent(eventName, clientData=None)
     |      
     |      Notifies all callbacks attached to the given event type of the occurence
     |      of the event.
     |      
     |      If clientData is specified, this data will be passed to all callbacks that
     |      receive the event.  If clientData is None (the default), the clientData
     |      registered with addUserEventCallback will be passed to the callbacks.
     |      
     |      
     |       * eventName (string) - the name of the new event.
     |       * clientData - User defined data.
     |  
     |  registerUserEvent(...)
     |      registerUserEvent(eventName)
     |      
     |      Adds a new event type with the given string identifier.  The string
     |      identifier can then be used in all other MUserEventMessage methods to operate
     |      on the new event type.
     |      
     |       * eventName (string) - the name of the new event to register.  Any
     |         non-empty string may be used as an event name.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from MMessage:
     |  
     |  currentCallbackId(...)
     |      currentCallbackId() -> id
     |      
     |      Returns the callback ID of the currently executing callback. If called
     |      outside of a callback, an invalid MCallbackId and failed status will
     |      be returned.
     |  
     |  nodeCallbacks(...)
     |      nodeCallbacks(node) -> ids
     |      
     |      Returns a list of callback IDs registered to a given node.
     |      
     |       * node (MObject) - Node to query for callbacks.
     |       * ids (MCallbackIdArray) - Array to store the list of callback IDs.
     |  
     |  removeCallback(...)
     |      removeCallback(id) -> None
     |      
     |      Removes the specified callback from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * id (MCallbackId) - identifier of callback to be removed
     |  
     |  removeCallbacks(...)
     |      removeCallbacks(ids) -> None
     |      
     |      Removes all of the specified callbacks from Maya.
     |      This method must be called for all callbacks registered by a
     |      plug-in before that plug-in is unloaded.
     |      
     |       * idList (MCallbackIdArray) - list of callbacks to be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MMessage:
     |  
     |  kDefaultAction = 0
     |  
     |  kDoAction = 2
     |  
     |  kDoNotDoAction = 1
    
    class MUuid(__builtin__.object)
     |  Manipulate UUID data.
     |  
     |  Methods defined here:
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  asString(...)
     |      asString() -> string
     |      
     |      Return the UUID as a string.
     |  
     |  copy(...)
     |      copy(source) -> self
     |      
     |      Copy method. Assigns the value of one MUuid to another.
     |      
     |      * source (MUuid) - Existing MUuid object to copy.
     |  
     |  generate(...)
     |      generate() -> self
     |      
     |      Generate a new UUID.
     |  
     |  valid(...)
     |      valid() -> bool
     |      
     |      Return whether the UUID is valid.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MVector(__builtin__.object)
     |  3D vector with double-precision coordinates.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __div__(...)
     |      x.__div__(y) <==> x/y
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __idiv__(...)
     |      x.__idiv__(y) <==> x/=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __isub__(...)
     |      x.__isub__(y) <==> x-=y
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __neg__(...)
     |      x.__neg__() <==> -x
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __rdiv__(...)
     |      x.__rdiv__(y) <==> y/x
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __rxor__(...)
     |      x.__rxor__(y) <==> y^x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  __xor__(...)
     |      x.__xor__(y) <==> x^y
     |  
     |  angle(...)
     |      Returns the angle, in radians, between this vector and another.
     |  
     |  isEquivalent(...)
     |      Returns True if this vector and another are within a given tolerance of being equal.
     |  
     |  isParallel(...)
     |      Returns True if this vector and another are within the given tolerance of being parallel.
     |  
     |  length(...)
     |      Returns the magnitude of this vector.
     |  
     |  normal(...)
     |      Returns a new vector containing the normalized version of this one.
     |  
     |  normalize(...)
     |      Normalizes this vector in-place and returns a new reference to it.
     |  
     |  rotateBy(...)
     |      Returns the vector resulting from rotating this one by the given amount.
     |  
     |  rotateTo(...)
     |      Returns the quaternion which will rotate this vector into another.
     |  
     |  transformAsNormal(...)
     |      Returns a new vector which is calculated by postmultiplying this vector by the transpose of the given matrix's inverse and then normalizing the result.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  x
     |      X coordinate
     |  
     |  y
     |      Y coordinate
     |  
     |  z
     |      Z coordinate
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kOneVector = maya.api.OpenMaya.MVector(1, 1, 1)
     |  
     |  kTolerance = 1e-10
     |  
     |  kWaxis = 3
     |  
     |  kXaxis = 0
     |  
     |  kXaxisVector = maya.api.OpenMaya.MVector(1, 0, 0)
     |  
     |  kXnegAxisVector = maya.api.OpenMaya.MVector(-1, 0, 0)
     |  
     |  kYaxis = 1
     |  
     |  kYaxisVector = maya.api.OpenMaya.MVector(0, 1, 0)
     |  
     |  kYnegAxisVector = maya.api.OpenMaya.MVector(0, -1, 0)
     |  
     |  kZaxis = 2
     |  
     |  kZaxisVector = maya.api.OpenMaya.MVector(0, 0, 1)
     |  
     |  kZeroVector = maya.api.OpenMaya.MVector(0, 0, 0)
     |  
     |  kZnegAxisVector = maya.api.OpenMaya.MVector(0, 0, -1)
    
    class MVectorArray(__builtin__.object)
     |  Array of MVector values.
     |  
     |  Methods defined here:
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x
     |  
     |  __delitem__(...)
     |      x.__delitem__(y) <==> del x[y]
     |  
     |  __delslice__(...)
     |      x.__delslice__(i, j) <==> del x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __mul__(...)
     |      x.__mul__(n) <==> x*n
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rmul__(...)
     |      x.__rmul__(n) <==> n*x
     |  
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=y
     |  
     |  __setslice__(...)
     |      x.__setslice__(i, j, y) <==> x[i:j]=y
     |      
     |      Use  of negative indices is not supported.
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  append(...)
     |      Add a value to the end of the array.
     |  
     |  clear(...)
     |      Remove all elements from the array.
     |  
     |  copy(...)
     |      Replace the array contents with that of another or of a compatible Python sequence.
     |  
     |  insert(...)
     |      Insert a new value into the array at the given index.
     |  
     |  remove(...)
     |      Remove an element from the array.
     |  
     |  setLength(...)
     |      Grow or shrink the array to contain a specific number of elements.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  sizeIncrement
     |      Number of elements by which to grow the array when necessary.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class MWeight(__builtin__.object)
     |  Methods for accessing component weight data. This class is currently
     |  only used to access soft select and symmetry selection weights.
     |  Other weight data (e.g. deformer weights) does not use this class
     |  and can be accessed through the corresponding MFn class or directly
     |  from the node's attributes.
     |  
     |  __init__()
     |  Initializes a new MWeight object with influence weight of 1 and seam
     |  weight of 0.
     |  __init__(MWeight src)
     |  Initializes a new MWeight object with the same value as src.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  influence
     |      Controls how much of a given operation is applied to the entity
     |      associated with this weight structure. A value of 1 means the full
     |       effect should be applied. A value of 0 means the operation should
     |      not affect the entity at all.
     |  
     |  seam
     |      Indicates how close the entity associated with this weight is to the
     |      plane of reflection (the seam), and hence, how strongly it should be
     |      associated with the seam. A value of 0 means the entity is free to move
     |      independent of the seam. A value of 1 means the entity is full on the
     |      seam, and should ideally maintain it's distance relative to the plane of
     |      symmetry. This value is only relevant when symmetry is enabled.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    val = class MRampAttribute(__builtin__.object)
     |  Functionset for creating and working with ramp attributes.
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  addEntries(...)
     |      Adds entries to the ramp.
     |  
     |  deleteEntries(...)
     |      Removes from the ramp those entries with the specified indices.
     |  
     |  getEntries(...)
     |      Returns a tuple containing all of the entries in the ramp.
     |  
     |  getValueAtPosition(...)
     |      Returns the value of the entry at the given position.
     |  
     |  hasIndex(...)
     |      Return true if an entry is defined at this index.
     |  
     |  numEntries(...)
     |      Returns the number of entries in the ramp.
     |  
     |  pack(...)
     |      Change the indices numbering by re-ordering them from 0.
     |  
     |  setInterpolationAtIndex(...)
     |      Sets the interpolation of the entry at the given index.
     |  
     |  setPositionAtIndex(...)
     |      Sets the position of the entry at the given index.
     |  
     |  setRamp(...)
     |      Set this ramp with one or multiple entries. Current entries are removed before adding the new one(s).
     |  
     |  setValueAtIndex(...)
     |      Sets the value of the entry at the given index.
     |  
     |  sort(...)
     |      Sort the ramp by position. Indices are also re-ordered during sort.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  createColorRamp(...)
     |      Creates and returns a new color ramp attribute.
     |  
     |  createCurveRamp(...)
     |      Creates and returns a new curve ramp attribute.
     |  
     |  createRamp(...)
     |      Creates and returns a new color or curve ramp attribute initialized with values.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  isColorRamp
     |      True if the attribute is a color ramp.
     |  
     |  isCurveRamp
     |      True if the attribute is a curve ramp.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  kLinear = 1
     |  
     |  kNone = 0
     |  
     |  kSmooth = 2
     |  
     |  kSpline = 3

DATA
    key = 'MRampAttribute'
    ourdict = {'MAngle': <type 'OpenMaya.MAngle'>, 'MArgDatabase': <type '...
    py2dict = {'MAngle': <type 'OpenMaya.MAngle'>, 'MArgDatabase': <type '...


