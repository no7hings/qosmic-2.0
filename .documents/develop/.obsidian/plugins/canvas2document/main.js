/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Canvas2DocumentPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var path = __toESM(require("path"));
var Canvas2DocumentPlugin = class extends import_obsidian.Plugin {
  async onload() {
    if (this.app.vault.adapter instanceof import_obsidian.FileSystemAdapter) {
      this.fsadapter = this.app.vault.adapter;
    } else {
      return;
    }
    this.addCommand({
      id: "run-conversion",
      name: "Convert canvas to a longform document",
      callback: async () => {
        const canvStruct = await this.readCanvasStruct();
        if (canvStruct == false) {
          new import_obsidian.Notice(`this is not a canvas file`);
          return;
        }
        const contents = await this.readCanvasData(canvStruct);
        this.writeCanvDocFile(contents, canvStruct);
      }
    });
    this.addCommand({
      id: "run-redoc",
      name: "Clear canvas2document target document",
      callback: async () => {
        const canvStruct = await this.readC2Dtarget();
        if (canvStruct == false) {
          new import_obsidian.Notice(`this is not a canvas2document target file`);
          return;
        }
        this.writeC2Doc(canvStruct);
      }
    });
  }
  onunload() {
  }
  async readC2Dtarget() {
    let activeFile = this.app.workspace.getActiveFile();
    if (!activeFile || !activeFile.name.includes("_fromCanvas.md")) {
      return false;
    } else {
      let mdFolderPath = path.dirname(activeFile.path);
    }
    let content = this.app.vault.cachedRead(activeFile);
    return content;
  }
  async writeC2Doc(canvStruct) {
    let activeFile = this.app.workspace.getActiveFile();
    let mdFolderPath = path.dirname(activeFile.path);
    const pattern = /\!\[\[([^[\]]+)\]\]/g;
    const matches = canvStruct.match(pattern);
    let doccontentstring = "> [!success] This is your converted and cleared document from Canvas2Document\n> (you can delete this infobox)\n\n";
    if (!matches) {
      return;
    }
    let textfilenames = [];
    let filenames = [];
    matches.forEach((match) => {
      let embeddedfilename = match.replace(/\!\[\[(.*)\]\]/, "$1");
      if (embeddedfilename.endsWith(".md")) {
        if (embeddedfilename.startsWith("./")) {
          embeddedfilename = embeddedfilename.replace("./", "");
        }
        textfilenames.push(embeddedfilename);
      }
      filenames.push(embeddedfilename);
    });
    const fileContents = await Promise.all(
      textfilenames.map(
        async (file) => [file, await this.app.vault.cachedRead(this.app.vault.getAbstractFileByPath(file))]
      )
    );
    for (const xfile of filenames) {
      if (xfile.endsWith(".md")) {
        const found = fileContents.find((element) => element[0] == xfile);
        doccontentstring += found[1] + "\n\n";
      } else {
        doccontentstring += "![[" + xfile + "]]\n\n";
      }
    }
    let docFilename;
    if (mdFolderPath == ".") {
      docFilename = activeFile.basename + "_" + Math.round(new Date().getTime() / 1e3) + "_fromC2D.md";
    } else {
      docFilename = mdFolderPath + "/" + activeFile.basename + "_" + Math.round(new Date().getTime() / 1e3) + "_fromC2D.md";
    }
    try {
      await this.app.vault.create(docFilename, doccontentstring);
    } catch (e) {
      console.log("error writing the new cleare doc file " + e);
    }
    const docftab = await this.app.vault.getAbstractFileByPath(docFilename);
    try {
      await this.app.workspace.getLeaf("split").openFile(docftab);
    } catch (e) {
      console.log(e);
    }
    return;
  }
  async readCanvasStruct() {
    let activeFile = this.app.workspace.getActiveFile();
    if (!activeFile || activeFile.extension != "canvas") {
      return false;
    } else {
      let mdFolderPath = path.dirname(activeFile.path);
    }
    let content = this.app.vault.cachedRead(activeFile);
    return content;
  }
  async readCanvasData(struct) {
    const fileContents = [];
    let myparsed_data = JSON.parse(struct);
    for (const node of myparsed_data.nodes) {
      const id = node.id;
      const type = node.type;
      let nodefile = "";
      if (type === "file") {
        nodefile = node.file;
        const { name, ext } = path.parse(nodefile);
        if (ext === ".md") {
          fileContents.push([id, type, nodefile, "textfile"]);
        } else if (ext === ".jpg" || ext == ".jpeg" || ext === ".png" || ext === ".gif") {
          fileContents.push([id, type, nodefile, "contentimage"]);
        } else if (ext === ".pdf") {
          fileContents.push([id, type, nodefile, "contentpdf"]);
        } else {
        }
      } else if (type === "link") {
        if (node.url.includes("youtube")) {
          const url = node.url;
          fileContents.push([id, type, url, "contentyoutube"]);
        } else {
          fileContents.push([id, type, node.url, "contentlink"]);
        }
      } else if (type === "text") {
        const text = node.text;
        fileContents.push([id, type, "node", text]);
      }
    }
    return fileContents;
  }
  getNodes(id) {
    return;
  }
  async writeCanvDocFile(content, convStruct) {
    let activeFile = this.app.workspace.getActiveFile();
    let mdFolderPath = path.dirname(activeFile.path);
    let writeworkdir = mdFolderPath + "/" + activeFile.basename + "_canvas2doc-data";
    this.fsadapter.mkdir(writeworkdir);
    let canvasFile;
    let canvasFilename;
    if (mdFolderPath == ".") {
      canvasFilename = activeFile.basename + "_" + Math.round(new Date().getTime() / 1e3) + "_fromCanvas.md";
    } else {
      canvasFilename = mdFolderPath + "/" + activeFile.basename + "_" + Math.round(new Date().getTime() / 1e3) + "_fromCanvas.md";
    }
    let contentString = "> [!info] This is an automatically generated document from Plugin [Canvas2Document](https://github.com/slnsys/obsidian-canvas2document)\n> arrange the document as you need with the outline, then call *Clear canvas2document target document*\n\n";
    let myparsed_data = JSON.parse(convStruct);
    for (const element of content) {
      let cnfname = "";
      if (element[1] == "text") {
        cnfname = writeworkdir + "/newdoc-node_" + element[0] + "_fromCanvas.md";
        contentString += "\n\n# ___card from Canvas\n";
        contentString += element[2] + " ^" + element[0] + "\n\n";
        contentString += "> [!tip] link navigation from the canvas\n";
        for (const edge of myparsed_data.edges) {
          if (edge.fromNode == element[0]) {
            contentString += "> linking to: [[#^" + edge.toNode + "|canvaslink]]\n";
          }
          if (edge.toNode == element[0]) {
            contentString += "> linked from: [[#^" + edge.fromNode + "|canvaslink]]\n";
          }
        }
        contentString += "\n ![[" + cnfname + "]]\n\n";
      } else if (element[1] == "link") {
        contentString += "\n\n# ___link from Canvas\n";
        contentString += element[2] + " ^" + element[0] + "\n\n";
        contentString += "> [!tip] link navigation from the canvas\n";
        for (const edge of myparsed_data.edges) {
          if (edge.fromNode == element[0]) {
            contentString += "> linking to: [[#^" + edge.toNode + "|canvaslink]]\n";
          }
          if (edge.toNode == element[0]) {
            contentString += "> linked from: [[#^" + edge.fromNode + "|canvaslink]]\n";
          }
        }
        if (element[3] == "contentyoutube") {
          contentString += "\n ![](" + element[2] + ")\n\n";
        } else if (element[3] == "contentlink") {
          contentString += '\n <iframe src="' + element[2] + '"></iframe>\n\n';
        }
      } else if (element[1] == "file") {
        if (element[3] == "contentimage" || element[3] == "contentpdf") {
          contentString += "\n\n# ___Media from Canvas\n";
          contentString += element[2] + " ^" + element[0] + "\n\n";
          contentString += "> [!tip] link navigation from the canvas\n";
          for (const edge of myparsed_data.edges) {
            if (edge.fromNode == element[0]) {
              contentString += "> linking to: [[#^" + edge.toNode + "|canvaslink]]\n";
            }
            if (edge.toNode == element[0]) {
              contentString += "> linked from: [[#^" + edge.fromNode + "|canvaslink]]\n";
            }
          }
          if (element[3] == "contentpdf") {
            contentString += "\n ![[" + element[2] + "#height=500]]\n\n";
          } else if (element[3] == "contentimage") {
            contentString += "\n ![[" + element[2] + "|500]]\n\n";
          }
        } else {
          contentString += "\n\n# ___noteFile from Canvas\n";
          contentString += element[2] + " ^" + element[0] + "\n\n";
          contentString += "> [!tip] link navigation from the canvas\n";
          for (const edge of myparsed_data.edges) {
            if (edge.fromNode == element[0]) {
              contentString += "> linking to: [[#^" + edge.toNode + "|canvaslink]]\n";
            }
            if (edge.toNode == element[0]) {
              contentString += "> linked from: [[#^" + edge.fromNode + "|canvaslink]]\n";
            }
          }
          contentString += "\n ![[" + element[2] + "]]\n\n";
        }
      }
      let canvasnodeFile;
      try {
        let cnfabst2 = this.app.vault.getAbstractFileByPath(cnfname);
        this.app.vault.delete(cnfabst2, true);
        canvasnodeFile = this.app.vault.create(cnfname, element[3]);
      } catch (e) {
        console.log(e);
        return;
      }
    }
    try {
      canvasFile = await this.app.vault.create(canvasFilename, contentString);
    } catch (e) {
      console.log("error writing the new doc file " + e);
    }
    const cnfabst = await this.app.vault.getAbstractFileByPath(canvasFilename);
    try {
      await this.app.workspace.getLeaf("split").openFile(cnfabst);
    } catch (e) {
      console.log(e);
    }
    return;
  }
};
//# sourceMappingURL=data:application/json;base64,
