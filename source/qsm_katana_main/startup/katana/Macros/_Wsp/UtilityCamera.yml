option:
    root: '/rootNode'
    category: 'workspace'
    type: 'utility_camera'
    type_abr: 'utl_cmr'
    create_type: 'UtilityCamera_Wsp'
    description:
        |-
        utility camera
    variant_key: 'camera'
    #
    auto_color: False
    #
    color:
        r: .125
        g: .125
        b: .5
#
main:
    type: Group
    name: '<option.type>'
    path: '<option.root>/<.name>'
    input: '<.path>.join_other'
    output: '<.path>.output'
    #
    attributes:
        ns_offsetX: 480
        ns_offsetY: 120
        #
        ns_colorr: <option.color.r>
        ns_colorg: <option.color.g>
        ns_colorb: <option.color.b>
        ns_linkColorR: <option.color.r>
        ns_linkColorG: <option.color.g>
        ns_linkColorB: <option.color.b>
        #
        comment: '<option.description>'
    #
    input_ports:
        - join_upstream
        - join_other
    #
    output_ports:
        - output
    #
    ports:
        # basic
        type:
            widget: string
            value: '<option.create_type>'
            tool_tip: '...'
            lock: True

        parameters/branch:
            widget: capsule_string
            value: ['asset', 'shot']
            default: 'asset'
            tool_tip: '...'
        # setting
        parameters/setting/scheme:
            widget: capsule_string
            value: ['default', 'abc']
            default: 'default'
            tool_tip: '...'

        parameters/setting/add_to_camera_list:
            widget: boolean
            value: True
            tool_tip: '...'

        parameters/setting/abc:
            widget: group
            expand: True
            tool_tip: '...'
            visible_condition_hint: {
                conditionalVisOp: 'equalTo', conditionalVisPath: '../scheme', conditionalVisValue: 'abc'
            }

        parameters/setting/abc/file:
            widget: file
            value: ''
            tool_tip: '...'

        parameters/setting/abc/element:
            widget: enumerate
            value: ['None']
            default: 'None'
            tool_tip: '...'

        parameters/setting/abc/refresh:
            widget: button
            value: 'import lxkatana.scripts as ktn_scripts; ktn_scripts.ScpWspUtilityCamera(node).refresh_abc()'
            tool_tip: '...'

        parameters/setting/default:
            widget: group
            expand: True
            tool_tip: '...'
            visible_condition_hint: {
                conditionalVisOp: 'equalTo', conditionalVisPath: '../scheme', conditionalVisValue: 'default'
            }

        parameters/setting/default/fov:
            widget: float
            value: 35
            tool_tip: '...'
        #   clip plane
        parameters/setting/clip_plane/near:
            widget: float
            value: .1

        parameters/setting/clip_plane/far:
            widget: float
            value: 100000

        parameters/setting/screen/mode:
            widget: enumerate
            value: ['horizontal', 'vertical', 'fill']
            tool_tip: '...'
        #   render
        parameters/setting/render/enable:
            widget: boolean
            value: True
            tool_tip: '...'

        parameters/setting/render/resolution:
            widget: resolution
            value: '2048x2048'
            tool_tip: '...'

        parameters/setting/render/adjust_screen_window:
            widget: enumerate
            value: ['No adjustment', 'Adjust width to match resolution', 'Adjust height to match resolution']
            default: 'Adjust height to match resolution'
            tool_tip: '...'

        # option
        option/variant_key:
            widget: string
            value: '<option.variant_key>'
            tool_tip: '...'
            lock: True

        option/location:
            widget: path
            value: '/root/world/cam'
            tool_tip: '...'

        option/root:
            widget: path
            value: '/root/world/cam/renderCamera'
            tool_tip: '...'

        option/default:
            widget: path
            value: '/root/world/cam/renderCamera/defaultCamera/defaultCameraLeft/defaultCameraLeftShape'
            tool_tip: '...'
        # record
        record/variant_properties_opt:
            widget: node
            value: '<node.variant_properties_opt.name>'
            tool_tip: '...'
            lock: True
    #
    expand_groups:
        - 'parameters'
        - 'parameters/setting'
#
node:
    # join geometry dot
    join_upstream_dot:
        type: Dot
        path: '<main.path>/<option.type_abr>__<..key>'
        input: '<.path>.input'
        output: '<.path>.output'
        #
        connections:
            # input
            - '<main.path>.join_upstream'
            - '<.input>'
    # join other dot
    join_other_dot:
        type: Dot
        path: '<main.path>/<option.type_abr>__<..key>'
        input: '<.path>.input'
        output: '<.path>.output'
        #
        connections:
            # input
            - '<main.path>.join_other'
            - '<.input>'
    # camera
    placeholder:
        type: 'CameraCreate'
        path: '<main.path>/<option.type_abr>__<..key>'
        output: '<.path>.out'
        #
        parameters:
            transform/translate: [0, 10.477797173, 47.1840229369]
        #
        expressions:
            name: 'getParent().option.default'
            fov: 'getParent().parameters.setting.default.fov'
            includeInCameraList: 'getParent().parameters.setting.add_to_camera_list'
    #  abc
    abc:
        type: 'Alembic_In'
        path: '<main.path>/<option.type_abr>__<..key>'
        output: '<.path>.out'
        #
        expressions:
            abcAsset: 'getParent().parameters.setting.abc.file'
            name:
                |-
                '{}/abc'.format(getParent().option.location)

    abc_transform:
        type: TransformEdit
        path: '<main.path>/<option.type_abr>__<..key>'
        input: '<.path>.in'
        output: '<.path>.out'
        #
        expressions:
            path: 'getParent().parameters.setting.abc.element'
        #
        connections:
            # camera
            - '<..abc.output>'
            - '<.input>'

    copy_merge:
        type: Merge
        path: '<main.path>/<option.type_abr>__<..key>'
        output: '<.path>.out'

        input_ports:
            - 'placeholder'
            - 'abc'

        connections:
            # placeholder
            - '<..placeholder.output>'
            - '<.path>.placeholder'
            # abc
            - '<..abc_transform.output>'
            - '<.path>.abc'

    copy_opt:
        tag: CCO
        type: CameraCopy_Opt
        name: '<option.type_abr>__<.tag>'
        path: '<main.path>/<.name>'
        input: '<.path>.i0'
        output: '<.path>.out'
        #
        parameters:
            user/option/enable: True
        #
        expressions:
            CEL: 'getParent().option.default'
            user/option/from: 'getParent().parameters.setting.abc.element'
        #
        connections:
            - '<..copy_merge.output>'
            - '<.input>'

    abc_enable:
        type: Switch
        path: '<main.path>/<option.type_abr>__<..key>'
        output: '<.path>.output'
        #
        input_ports:
            - 'off'
            - 'on'
        #
        expressions:
            in:
                |-
                1 if getParent().parameters.setting.scheme == 'abc' else 0
        #
        connections:
            # off
            - '<..placeholder.output>'
            - '<.path>.off'
            # on
            - '<..copy_opt.output>'
            - '<.path>.on'

    # upstream_merge
    upstream_merge:
        tag: 'UMG'
        type: UpstreamMerge_Wsp
        name: '<option.type_abr>__<.tag>'
        path: '<main.path>/<.name>'
        output: '<.path>.out'
        #
        input_ports:
            - 'join_upstream'
            - 'join_current'
            - 'join_other'
        #
        connections:
            # join upstream
            - '<..join_upstream_dot.output>'
            - '<.path>.join_upstream'
            # join current
            - '<..abc_enable.output>'
            - '<.path>.join_current'
            # join other
            - '<..join_other_dot.output>'
            - '<.path>.join_other'
            # output
            - '<.output>'
            - '<main.output>'
    # setting
    #   camera list
    camera_list_opt:
        tag: 'CLO'
        type: CameraList_Opt
        name: '<option.type_abr>__<.tag>'
        path: '<main.path>/<.name>'
        input: '<.path>.i0'
        output: '<.path>.out'
        #
        expressions:
            user/enable: 'getParent().parameters.setting.add_to_camera_list'
            user/camera_shape: 'getParent().option.default'
        #
        connections:
            #
            - '<..upstream_merge.output>'
            - '<.input>'
    #   camera data
    camera_properties_opt:
        tag: 'CPO'
        type: CameraProperties_Opt
        name: '<option.type_abr>__<.tag>'
        path: '<main.path>/<.name>'
        input: '<.path>.i0'
        output: '<.path>.out'
        #
        parameters:
            user/enable: True
        #
        expressions:
            CEL: 'getParent().option.default'
            user/clip_plane/near: 'getParent().parameters.setting.clip_plane.near'
            user/clip_plane/far: 'getParent().parameters.setting.clip_plane.far'
            user/screen/mode: 'getParent().parameters.setting.screen.mode'
            user/render/resolution: 'getParent().parameters.setting.render.resolution'
        #
        connections:
            #
            - '<..camera_list_opt.output>'
            - '<.input>'
    #   render properties
    render_properties_opt:
        tag: 'RPO'
        type: RenderProperties_Opt
        name: '<option.type_abr>__<.tag>'
        path: '<main.path>/<.name>'
        input: '<.path>.i0'
        output: '<.path>.out'
        #
        parameters:
            CEL: '/root'
            user/option/builtin/enable: True
        #
        expressions:
            user/option/builtin/enable: 'getParent().parameters.setting.render.enable'
            user/option/builtin/camera: 'getParent().option.default'
            user/option/builtin/resolution: 'getParent().parameters.setting.render.resolution'
            user/option/builtin/adjust_screen_window: 'getParent().parameters.setting.render.adjust_screen_window'
        #
        connections:
            #
            - '<..camera_properties_opt.output>'
            - '<.input>'
    # variant properties opt
    variant_properties_opt:
        tag: 'VPO'
        type: VariantProperties_Opt
        name: '<option.type_abr>__<.tag>'
        path: '<main.path>/<.name>'
        input: '<.path>.i0'
        output: '<.path>.out'
        #
        parameters:
            user/data_1/i0: '<option.variant_key>.current'
            user/data_2/i0: '<option.variant_key>.branch'
            user/data_3/i0: '<option.variant_key>.root'
            user/data_4/i0: '<option.variant_key>.default'
        #
        expressions:
            user/data_1/i1: 'getParent().getNodeName()'
            user/data_2/i1: 'getParent().parameters.branch'
            user/data_3/i1: 'getParent().option.root'
            user/data_4/i1: 'getParent().option.default'
        #
        connections:
            - '<..render_properties_opt.output>'
            - '<.input>'
            # output
            - '<.output>'
            - '<main.output>'