#include <stdosl.h>

shader osl_window_box(
	int up_use_z_axis = 0 [[ string widget = "boolean" ]],
    string filename = "" [[ string widget = "filename" ]],
    int texture_flip = 0 [[ string widget = "boolean" ]],
    int texture_flop = 0 [[ string widget = "boolean" ]],
    float room_depth = 1 [[ float min = 0.1, float max = 100 ]],
    float width_overscan = 0 [[ float min = 0.0, float max = 0.9 ]],
    float height_overscan = 0 [[ float min = 0.0, float max = 0.9 ]],
    int midground_enable = 0 [[ string widget = "boolean" ]],
    float midground_depth = 0.5 [[ float min = 0.05, float max = 99 ]],
    float midground_offset_x = 0,
    float midground_offset_y = 0,
    int curtains_enable = 0 [[ string widget = "boolean" ]],
    output color out_rgb = 0.0,
)
{
    //user controls remapping
    float room_depthMult = clamp(room_depth,0.1,100);
    float height_overscanMult = 1 - clamp(height_overscan,0,0.9);
    float width_overscanMult = 1 - clamp(width_overscan,0,0.9); 
    float midground_depthMult = clamp(midground_depth,0.05,room_depthMult-0.01); 
    float midgroundOffY = midground_offset_y * (texture_flip*2-1) * 0.1;
    float midgroundOffX = midground_offset_x * (texture_flop*2-1) * 0.1;


    //global variables & remapping 
    vector objI = transform("object", -I);
    if (up_use_z_axis > 0){
      objI = vector(-objI[0],-objI[1],-objI[2]) * color(width_overscanMult, height_overscanMult, 1);		//reorder to match UV for Y up axis
    } else {
      objI = vector(-objI[0],objI[2],-objI[1]) * color(width_overscanMult, height_overscanMult, 1);		//reorder to match UV for Z up axis
    } 
    color objPOrig = (color(u,v,0.5) * 2 - 1) * 0.5 + 0.5;							//for curtains
    color objP = (color(u,v,0.5) * 2 - 1) * color(width_overscanMult, height_overscanMult, 1)  * 0.5 + 0.5; 	//UV seems to be the better approach


    //bases for width/height/depth
    vector sections = step(0, objI);
    color baseDepth = (objP-sections)/(-objI * room_depthMult);
    color mgDepth = (objP-sections)/(-objI * midground_depthMult);    
    color baseBack = (objP-sections)/(-objI);
    color baseWidth = baseDepth * room_depthMult;



    //depth and width ramps
    color baseDepthX = (baseDepth[1]*objI+objP + 1);
    color baseDepthY = (baseDepth[0]*objI+objP + 1);
    color baseWidthX = (baseWidth[1]*objI+objP + 1);
    color baseWidthY = (baseWidth[0]*objI+objP + 1);

    float horizU = baseDepthY[2] - 0.5;
    float vertU = baseWidthX[0] - 1;
    float horizV = baseWidthY[1] - 1;
    float vertV = baseDepthX[2] - 0.5;


    //convert ramps to UV/ST... WIP - not very efficient
    float sideWallsMask = step(0,horizU) * step(0,1-max(horizV, 1-horizV)); 
    color sideWallsUV = color(horizU, horizV, 0) / 3;
    color rWallUV = (sideWallsUV + color(2.0/3.0, 1.0/3.0, 0)) * sideWallsMask * sections[0];
    color lWallUV = (sideWallsUV + color(0.0, 1.0/3.0, 0)) * sideWallsMask * (1-sections[0]);
    lWallUV[0] = (1.0/3.0 - lWallUV[0]) * sideWallsMask * (1-sections[0]);     
    
    float FloorCeilMask = step(0,vertV) * step(0,1-max(vertU, 1-vertU));
    color FloorCeilUV = color(vertU, vertV, 0) / 3;
    color ceilUV = (FloorCeilUV + color(1.0/3.0, 2.0/3.0, 0)) * FloorCeilMask * sections[1];
    color floorUV = (FloorCeilUV + color(1.0/3.0, 0, 0)) * FloorCeilMask * (1-sections[1]);
    floorUV[1] = (1.0/3.0 - floorUV[1]) * FloorCeilMask * (1-sections[1]);
    
    color backWallUV = ((baseBack[2]*objI + (objP/2)/(room_depthMult)) * (room_depthMult*2) / 3 + color(1.0/3.0, 1.0/3.0, 0) ) * (1 - max(step(0,horizU), step(0,vertV)));


    color midgroundUV = (1.0/3.0 - (baseBack[2]*objI + (objP)/(midground_depthMult*2)) * (midground_depthMult*2) / 3);
    float midgroundMask = step( 0, midgroundUV[1] * 3 * (1-midgroundUV[1]*3) ) * step( 0, midgroundUV[0] * (1.0/3.0-midgroundUV[0]) ); 
    midgroundUV = (color(midgroundOffX, midgroundOffY, 0) + midgroundUV) * midgroundMask;
    midgroundUV[1] = 1-midgroundUV[1];  
    
    color curtainsUV = objPOrig * color(1.0/3.0, 1.0/3.0, 1);
    curtainsUV[0] = 1.0/3.0 - curtainsUV[0];



    color finalUV = ceilUV + floorUV + rWallUV + lWallUV + backWallUV;




    //flipping ctrl
    if (texture_flop > 0){
        midgroundUV[0] = 1.0/3.0 - midgroundUV[0];
        curtainsUV[0] = 1.0/3.0 - curtainsUV[0];
    } else
        finalUV[0] = 1-finalUV[0];
    if (texture_flip > 0){
        finalUV[1] = 1-finalUV[1];
        midgroundUV[1] = 1 - midgroundUV[1] + 2.0/3.0;
        curtainsUV[1] = 1.0/3.0 - curtainsUV[1];
    }


    color roomRGB = texture(filename, finalUV[0], finalUV[1]);
        
    color finalRGB;




    //midground switch
    if (midground_enable > 0){
        float midgroundA;
        color midgroundRGB = texture(filename, midgroundUV[0], midgroundUV[1], "alpha", midgroundA);
        finalRGB = mix(roomRGB,midgroundRGB,midgroundA);
    }
    else{
        finalRGB = roomRGB;
    }




    //curtains switch
    if (curtains_enable > 0){
        float curtainsA;
        color curtainsRGB = texture(filename, curtainsUV[0], curtainsUV[1], "alpha", curtainsA);
        finalRGB = mix(finalRGB,curtainsRGB,curtainsA);
    }




    out_rgb = finalRGB;

}