option:
    root: '/rootNode'
    category: 'workspace'
    type: 'camera_list_opt'
    type_abr: 'cmr_lst_opt'
    create_type: 'CameraList_Opt'
    description:
        |-
        for camera list operator
    variant_key: ''
    #
    auto_color: False
    #
    color:
        r: .5
        g: .125
        b: .125
#
main:
    type: OpScript
    name: '<option.type>'
    path: '<option.root>/<.name>'
    input: '<.path>.i0'
    output: '<.path>.out'
    #
    clear_start: 'user'
    #
    attributes:
        ns_colorr: <option.color.r>
        ns_colorg: <option.color.g>
        ns_colorb: <option.color.b>
        ns_linkColorR: <option.color.r>
        ns_linkColorG: <option.color.g>
        ns_linkColorB: <option.color.b>
        #
        comment: '<option.description>'
    #
    input_ports: []
    #
    output_ports: []
    #
    ports:
        # basic
        user/type:
            widget: string
            value: '<option.create_type>'
            tool_tip: '...'
            lock: True
        #
        user/enable:
            widget: boolean
            value: False
            tool_tip: '...'
        #
        user/camera_shape:
            widget: path
            value: ''
            tool_tip: '...'
    #
    parameters:
        CEL: '/root/world'
        script/lua:
            |-
            local location = Interface.GetInputLocationPath()

            function get_v_include(tab, value)
                for k, v in pairs(tab) do
                  if v == value then
                      return true
                  end
                end
                return false
            end
            
            function get_new_cameras(new_cameras)
                local all_cameras = {}
                local camera_list = Interface.GetAttr('globals.cameraList')
                if camera_list then
                    local old_cameras = camera_list:getNearestSample(0)
                    for k, v in ipairs(old_cameras) do
                        if (get_v_include(all_cameras, v) == false) then
                            table.insert(all_cameras, v)
                        end
                    end
                end
                if new_cameras then
                    for k, v in ipairs(new_cameras) do
                        if (get_v_include(all_cameras, v) == false) then
                            table.insert(all_cameras, v)
                        end
                    end
                end
                return all_cameras
            end
            
            function main()
                if (Interface.GetOpArg('user.enable'):getValue() == 1) then
                    local cameras_ = { Interface.GetOpArg('user.camera_shape'):getValue() }
                    local new_cameras_ = get_new_cameras(cameras_)
                    local size = table.getn(new_cameras_)
                    Interface.SetAttr('globals.cameraList', StringAttribute(new_cameras_, size))
                end
            end
            
            main()




