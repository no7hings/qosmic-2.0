#usda 1.0
(
    defaultPrim = "{{ asset.root_name }}"
    startTimeCode = {{ shot.start_frame }}
    endTimeCode = {{ shot.end_frame }}
    upAxis = "Y"
)

def Xform "{{ asset.root_name }}" (
    kind = "component"
    variants = {
        string shot_asset = "{{ shot.shot_asset_main.keys()[0] }}"
        string shot_asset_override = "None"
        string model_main = "None"
        string model_override = "None"
        string groom_main = "None"
        string groom_override = "None"
        string rig_main = "None"
        string rig_override = "None"
        string effect_main = "None"
        string effect_override = "None"
        string surface_main = "None"
        string surface_override = "None"
    }
    prepend variantSets = [
        "shot_asset_override",
        "shot_asset",
        "surface_override",
        "surface_main",
        "effect_override",
        "effect_main",
        "rig_override",
        "rig_main",
        "groom_override",
        "groom_main",
        "model_override",
        "model_main",
    ]
)
{
    string userProperties:usd:variants:asset:project = "{{ asset.project }}"
    string userProperties:usd:variants:asset:role = "{{ asset.role }}"
    string userProperties:usd:variants:asset:name = "{{ asset.name }}"
    string userProperties:usd:variants:shot:sequence = "{{ shot.sequence }}"
    string userProperties:usd:variants:shot:name = "{{ shot.name }}"
    string userProperties:usd:variants:shot:start_frame = "{{ shot.start_frame }}"
    string userProperties:usd:variants:shot:end_frame = "{{ shot.end_frame }}"
    variantSet "shot_asset" = {
        "None" {
        }
        {% for i_shot_asset, i_location in shot.shot_asset_main.iteritems() -%}
        "{{ i_shot_asset }}" (
            prepend references = {{ '@%s@<%s>' | format(shot.set_file, i_location) }}
        ) {
            string userProperties:usd:variants:shot_asset:name = "{{ i_shot_asset }}"
        }
        {%- endfor %}
    }
    variantSet "shot_asset_override" = {
        "None" {
        }
        {% for i_variant_key, i_variant_file in shot.shot_asset_override.iteritems() -%}
        "{{ i_variant_key }}" (
            prepend references = {{ '@%s@</master>' | format(i_variant_file) }}
        ) {
            string userProperties:usd:variants:shot_asset:name:override = "{{ i_variant_key }}"
        }
        {%- endfor %}
    }
    variantSet "model_main" = {
        "None" {
        }
        {% for i_variant_key, i_variant_file in asset.version_main.model.iteritems() -%}
        "{{ i_variant_key }}" (
            prepend references = {{ '@%s@</master>' | format(i_variant_file) }}
        ) {
            string userProperties:usd:variants:asset:step = "model"
            string userProperties:usd:variants:asset:model:version = "{{ i_variant_key }}"
            string userProperties:usd:variants:asset:model:file = "{{ i_variant_file }}"
        }
        {%- endfor %}
    }
    variantSet "model_override" = {
        "None" {
        }
        {% for i_variant_key, i_variant_file in asset.version_override.model.iteritems() -%}
        "{{ i_variant_key }}" (
            prepend references = {{ '@%s@</master>' | format(i_variant_file) }}
        ) {
            string userProperties:usd:variants:asset:step:override = "model"
            string userProperties:usd:variants:asset:model:override:version = "{{ i_variant_key }}"
            string userProperties:usd:variants:asset:model:override:file = "{{ i_variant_file }}"
        }
        {%- endfor %}
    }
    variantSet "groom_main" = {
        "None" {
        }
        {% for i_variant_key, i_variant_file in asset.version_main.groom.iteritems() -%}
        "{{ i_variant_key }}" (
            prepend references = {{ '@%s@</master>' | format(i_variant_file) }}
        ) {
            string userProperties:usd:variants:asset:step = "groom"
            string userProperties:usd:variants:asset:groom:version = "{{ i_variant_key }}"
            string userProperties:usd:variants:asset:groom:file = "{{ i_variant_file }}"
        }
        {%- endfor %}
    }
    variantSet "groom_override" = {
        "None" {
        }
        {% for i_variant_key, i_variant_file in asset.version_override.groom.iteritems() -%}
        "{{ i_variant_key }}" (
            prepend references = {{ '@%s@</master>' | format(i_variant_file) }}
        ) {
            string userProperties:usd:variants:asset:step:override = "groom"
            string userProperties:usd:variants:asset:groom:override:version = "{{ i_variant_key }}"
            string userProperties:usd:variants:asset:groom:override:file = "{{ i_variant_file }}"
        }
        {%- endfor %}
    }
    variantSet "rig_main" = {
        "None" {
        }
        {% for i_variant_key, i_variant_file in asset.version_main.rig.iteritems() -%}
        "{{ i_variant_key }}" (
            prepend references = {{ '@%s@</master>' | format(i_variant_file) }}
        ) {
            string userProperties:usd:variants:asset:step = "rig"
            string userProperties:usd:variants:asset:rig:version = "{{ i_variant_key }}"
            string userProperties:usd:variants:asset:rig:file = "{{ i_variant_file }}"
        }
        {%- endfor %}
    }
    variantSet "rig_override" = {
        "None" {
        }
        {% for i_variant_key, i_variant_file in asset.version_override.rig.iteritems() -%}
        "{{ i_variant_key }}" (
            prepend references = {{ '@%s@</master>' | format(i_variant_file) }}
        ) {
            string userProperties:usd:variants:asset:step:override = "rig"
            string userProperties:usd:variants:asset:rig:override:version = "{{ i_variant_key }}"
            string userProperties:usd:variants:asset:rig:override:file = "{{ i_variant_file }}"
        }
        {%- endfor %}
    }
    variantSet "effect_main" = {
        "None" {
        }
        {% for i_variant_key, i_variant_file in asset.version_main.effect.iteritems() -%}
        "{{ i_variant_key }}" (
            prepend references = {{ '@%s@</master>' | format(i_variant_file) }}
        ) {
            string userProperties:usd:variants:asset:step = "effect"
            string userProperties:usd:variants:asset:effect:version = "{{ i_variant_key }}"
            string userProperties:usd:variants:asset:effect:file = "{{ i_variant_file }}"
        }
        {%- endfor %}
    }
    variantSet "effect_override" = {
        "None" {
        }
        {% for i_variant_key, i_variant_file in asset.version_override.effect.iteritems() -%}
        "{{ i_variant_key }}" (
            prepend references = {{ '@%s@</master>' | format(i_variant_file) }}
        ) {
            string userProperties:usd:variants:asset:step:override = "effect"
            string userProperties:usd:variants:asset:effect:override:version = "{{ i_variant_key }}"
            string userProperties:usd:variants:asset:effect:override:file = "{{ i_variant_file }}"
        }
        {%- endfor %}
    }
    variantSet "surface_main" = {
        "None" {
        }
        {% for i_variant_key, i_variant_file in asset.version_main.surface.iteritems() -%}
        "{{ i_variant_key }}" (
            prepend references = {{ '@%s@</master>' | format(i_variant_file) }}
        ) {
            string userProperties:usd:variants:asset:step = "surface"
            string userProperties:usd:variants:asset:surface:version = "{{ i_variant_key }}"
            string userProperties:usd:variants:asset:surface:file = "{{ i_variant_file }}"
        }
        {%- endfor %}
    }
    variantSet "surface_override" = {
        "None" {
        }
        {% for i_variant_key, i_variant_file in asset.version_override.surface.iteritems() -%}
        "{{ i_variant_key }}" (
            prepend references = {{ '@%s@</master>' | format(i_variant_file) }}
        ) {
            string userProperties:usd:variants:asset:step:override = "surface"
            string userProperties:usd:variants:asset:surface:override:version = "{{ i_variant_key }}"
            string userProperties:usd:variants:asset:surface:override:file = "{{ i_variant_file }}"
        }
        {%- endfor %}
    }
}
def Xform "{{ camera.root_name }}" (
    kind = "component"
    prepend references = {{ '@%s@<%s>' | format(shot.set_file, camera.path) }}
)
{
}